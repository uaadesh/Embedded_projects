
design_oscilloscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  00002c58  00002cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030f  0080023a  0080023a  00002d26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002d26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008a0  00000000  00000000  00002d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010818  00000000  00000000  00003638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028d4  00000000  00000000  00013e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000040b3  00000000  00000000  00016724  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c0c  00000000  00000000  0001a7d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003705  00000000  00000000  0001c3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a0d1  00000000  00000000  0001fae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000808  00000000  00000000  00029bba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c4       	rjmp	.+2152   	; 0x86a <__ctors_end>
       2:	00 00       	nop
       4:	52 c4       	rjmp	.+2212   	; 0x8aa <__bad_interrupt>
       6:	00 00       	nop
       8:	dd c4       	rjmp	.+2490   	; 0x9c4 <__vector_2>
       a:	00 00       	nop
       c:	2b c5       	rjmp	.+2646   	; 0xa64 <__vector_3>
       e:	00 00       	nop
      10:	77 c5       	rjmp	.+2798   	; 0xb00 <__vector_4>
      12:	00 00       	nop
      14:	95 c5       	rjmp	.+2858   	; 0xb40 <__vector_5>
      16:	00 00       	nop
      18:	b0 c5       	rjmp	.+2912   	; 0xb7a <__vector_6>
      1a:	00 00       	nop
      1c:	46 c4       	rjmp	.+2188   	; 0x8aa <__bad_interrupt>
      1e:	00 00       	nop
      20:	44 c4       	rjmp	.+2184   	; 0x8aa <__bad_interrupt>
      22:	00 00       	nop
      24:	42 c4       	rjmp	.+2180   	; 0x8aa <__bad_interrupt>
      26:	00 00       	nop
      28:	40 c4       	rjmp	.+2176   	; 0x8aa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3e c4       	rjmp	.+2172   	; 0x8aa <__bad_interrupt>
      2e:	00 00       	nop
      30:	3c c4       	rjmp	.+2168   	; 0x8aa <__bad_interrupt>
      32:	00 00       	nop
      34:	3a c4       	rjmp	.+2164   	; 0x8aa <__bad_interrupt>
      36:	00 00       	nop
      38:	38 c4       	rjmp	.+2160   	; 0x8aa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	36 c4       	rjmp	.+2156   	; 0x8aa <__bad_interrupt>
      3e:	00 00       	nop
      40:	34 c4       	rjmp	.+2152   	; 0x8aa <__bad_interrupt>
      42:	00 00       	nop
      44:	32 c4       	rjmp	.+2148   	; 0x8aa <__bad_interrupt>
      46:	00 00       	nop
      48:	30 c4       	rjmp	.+2144   	; 0x8aa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2e c4       	rjmp	.+2140   	; 0x8aa <__bad_interrupt>
      4e:	00 00       	nop
      50:	2c c4       	rjmp	.+2136   	; 0x8aa <__bad_interrupt>
      52:	00 00       	nop
      54:	2a c4       	rjmp	.+2132   	; 0x8aa <__bad_interrupt>
      56:	00 00       	nop
      58:	28 c4       	rjmp	.+2128   	; 0x8aa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	26 c4       	rjmp	.+2124   	; 0x8aa <__bad_interrupt>
      5e:	00 00       	nop
      60:	24 c4       	rjmp	.+2120   	; 0x8aa <__bad_interrupt>
      62:	00 00       	nop
      64:	22 c4       	rjmp	.+2116   	; 0x8aa <__bad_interrupt>
      66:	00 00       	nop
      68:	20 c4       	rjmp	.+2112   	; 0x8aa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1e c4       	rjmp	.+2108   	; 0x8aa <__bad_interrupt>
      6e:	00 00       	nop
      70:	1c c4       	rjmp	.+2104   	; 0x8aa <__bad_interrupt>
      72:	00 00       	nop
      74:	1a c4       	rjmp	.+2100   	; 0x8aa <__bad_interrupt>
      76:	00 00       	nop
      78:	18 c4       	rjmp	.+2096   	; 0x8aa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	16 c4       	rjmp	.+2092   	; 0x8aa <__bad_interrupt>
      7e:	00 00       	nop
      80:	14 c4       	rjmp	.+2088   	; 0x8aa <__bad_interrupt>
      82:	00 00       	nop
      84:	12 c4       	rjmp	.+2084   	; 0x8aa <__bad_interrupt>
      86:	00 00       	nop
      88:	10 c4       	rjmp	.+2080   	; 0x8aa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0e c4       	rjmp	.+2076   	; 0x8aa <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c c4       	rjmp	.+2072   	; 0x8aa <__bad_interrupt>
      92:	00 00       	nop
      94:	0a c4       	rjmp	.+2068   	; 0x8aa <__bad_interrupt>
      96:	00 00       	nop
      98:	08 c4       	rjmp	.+2064   	; 0x8aa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	06 c4       	rjmp	.+2060   	; 0x8aa <__bad_interrupt>
      9e:	00 00       	nop
      a0:	04 c4       	rjmp	.+2056   	; 0x8aa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	02 c4       	rjmp	.+2052   	; 0x8aa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	00 c4       	rjmp	.+2048   	; 0x8aa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	fe c3       	rjmp	.+2044   	; 0x8aa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	fc c3       	rjmp	.+2040   	; 0x8aa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	fa c3       	rjmp	.+2036   	; 0x8aa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f8 c3       	rjmp	.+2032   	; 0x8aa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f6 c3       	rjmp	.+2028   	; 0x8aa <__bad_interrupt>
      be:	00 00       	nop
      c0:	f4 c3       	rjmp	.+2024   	; 0x8aa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f2 c3       	rjmp	.+2020   	; 0x8aa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f0 c3       	rjmp	.+2016   	; 0x8aa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ee c3       	rjmp	.+2012   	; 0x8aa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ec c3       	rjmp	.+2008   	; 0x8aa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ea c3       	rjmp	.+2004   	; 0x8aa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e8 c3       	rjmp	.+2000   	; 0x8aa <__bad_interrupt>
      da:	00 00       	nop
      dc:	e6 c3       	rjmp	.+1996   	; 0x8aa <__bad_interrupt>
      de:	00 00       	nop
      e0:	e4 c3       	rjmp	.+1992   	; 0x8aa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 0b       	sbc	r25, r22
      e6:	0f 0c       	add	r0, r15
      e8:	ca 0b       	sbc	r28, r26
      ea:	13 0c       	add	r1, r3
      ec:	f4 0b       	sbc	r31, r20
      ee:	02 0c       	add	r0, r2
      f0:	0c 0c       	add	r0, r12
      f2:	c0 11       	cpse	r28, r0
      f4:	c6 11       	cpse	r28, r6
      f6:	dd 11       	cpse	r29, r13
      f8:	ce 11       	cpse	r28, r14
      fa:	dd 11       	cpse	r29, r13
      fc:	dd 11       	cpse	r29, r13
      fe:	dd 11       	cpse	r29, r13
     100:	dd 11       	cpse	r29, r13
     102:	dd 11       	cpse	r29, r13
     104:	dd 11       	cpse	r29, r13
     106:	dd 11       	cpse	r29, r13
     108:	dd 11       	cpse	r29, r13
     10a:	dd 11       	cpse	r29, r13
     10c:	dd 11       	cpse	r29, r13
     10e:	dd 11       	cpse	r29, r13
     110:	dd 11       	cpse	r29, r13
     112:	dd 11       	cpse	r29, r13
     114:	dd 11       	cpse	r29, r13
     116:	dd 11       	cpse	r29, r13
     118:	dd 11       	cpse	r29, r13
     11a:	dd 11       	cpse	r29, r13
     11c:	dd 11       	cpse	r29, r13
     11e:	dd 11       	cpse	r29, r13
     120:	dd 11       	cpse	r29, r13
     122:	dd 11       	cpse	r29, r13
     124:	dd 11       	cpse	r29, r13
     126:	dd 11       	cpse	r29, r13
     128:	dd 11       	cpse	r29, r13
     12a:	dd 11       	cpse	r29, r13
     12c:	dd 11       	cpse	r29, r13
     12e:	bb 11       	cpse	r27, r11
     130:	dd 11       	cpse	r29, r13
     132:	dd 11       	cpse	r29, r13
     134:	dd 11       	cpse	r29, r13
     136:	dd 11       	cpse	r29, r13
     138:	dd 11       	cpse	r29, r13
     13a:	dd 11       	cpse	r29, r13
     13c:	dd 11       	cpse	r29, r13
     13e:	dd 11       	cpse	r29, r13
     140:	b1 11       	cpse	r27, r1
     142:	dd 11       	cpse	r29, r13
     144:	dd 11       	cpse	r29, r13
     146:	dd 11       	cpse	r29, r13
     148:	dd 11       	cpse	r29, r13
     14a:	dd 11       	cpse	r29, r13
     14c:	dd 11       	cpse	r29, r13
     14e:	dd 11       	cpse	r29, r13
     150:	dd 11       	cpse	r29, r13
     152:	dd 11       	cpse	r29, r13
     154:	dd 11       	cpse	r29, r13
     156:	d3 11       	cpse	r29, r3
     158:	d8 11       	cpse	r29, r8
     15a:	07 63       	ori	r16, 0x37	; 55
     15c:	42 36       	cpi	r20, 0x62	; 98
     15e:	b7 9b       	sbis	0x16, 7	; 22
     160:	d8 a7       	std	Y+40, r29	; 0x28
     162:	1a 39       	cpi	r17, 0x9A	; 154
     164:	68 56       	subi	r22, 0x68	; 104
     166:	18 ae       	std	Y+56, r1	; 0x38
     168:	ba ab       	std	Y+50, r27	; 0x32
     16a:	55 8c       	ldd	r5, Z+29	; 0x1d
     16c:	1d 3c       	cpi	r17, 0xCD	; 205
     16e:	b7 cc       	rjmp	.-1682   	; 0xfffffade <__eeprom_end+0xff7efade>
     170:	57 63       	ori	r21, 0x37	; 55
     172:	bd 6d       	ori	r27, 0xDD	; 221
     174:	ed fd       	.word	0xfded	; ????
     176:	75 3e       	cpi	r23, 0xE5	; 229
     178:	f6 17       	cp	r31, r22
     17a:	72 31       	cpi	r23, 0x12	; 18
     17c:	bf 00       	.word	0x00bf	; ????
     17e:	00 00       	nop
     180:	80 3f       	cpi	r24, 0xF0	; 240
     182:	08 00       	.word	0x0008	; ????
     184:	00 00       	nop
     186:	be 92       	st	-X, r11
     188:	24 49       	sbci	r18, 0x94	; 148
     18a:	12 3e       	cpi	r17, 0xE2	; 226
     18c:	ab aa       	std	Y+51, r10	; 0x33
     18e:	aa 2a       	or	r10, r26
     190:	be cd       	rjmp	.-1156   	; 0xfffffd0e <__eeprom_end+0xff7efd0e>
     192:	cc cc       	rjmp	.-1640   	; 0xfffffb2c <__eeprom_end+0xff7efb2c>
     194:	4c 3e       	cpi	r20, 0xEC	; 236
     196:	00 00       	nop
     198:	00 80       	ld	r0, Z
     19a:	be ab       	std	Y+54, r27	; 0x36
     19c:	aa aa       	std	Y+50, r10	; 0x32
     19e:	aa 3e       	cpi	r26, 0xEA	; 234
     1a0:	00 00       	nop
     1a2:	00 00       	nop
     1a4:	bf 00       	.word	0x00bf	; ????
     1a6:	00 00       	nop
     1a8:	80 3f       	cpi	r24, 0xF0	; 240
     1aa:	00 00       	nop
     1ac:	00 00       	nop
     1ae:	00 08       	sbc	r0, r0
     1b0:	41 78       	andi	r20, 0x81	; 129
     1b2:	d3 bb       	out	0x13, r29	; 19
     1b4:	43 87       	std	Z+11, r20	; 0x0b
     1b6:	d1 13       	cpse	r29, r17
     1b8:	3d 19       	sub	r19, r13
     1ba:	0e 3c       	cpi	r16, 0xCE	; 206
     1bc:	c3 bd       	out	0x23, r28	; 35
     1be:	42 82       	std	Z+2, r4	; 0x02
     1c0:	ad 2b       	or	r26, r29
     1c2:	3e 68       	ori	r19, 0x8E	; 142
     1c4:	ec 82       	std	Y+4, r14	; 0x04
     1c6:	76 be       	out	0x36, r7	; 54
     1c8:	d9 8f       	std	Y+25, r29	; 0x19
     1ca:	e1 a9       	ldd	r30, Z+49	; 0x31
     1cc:	3e 4c       	sbci	r19, 0xCE	; 206
     1ce:	80 ef       	ldi	r24, 0xF0	; 240
     1d0:	ff be       	out	0x3f, r15	; 63
     1d2:	01 c4       	rjmp	.+2050   	; 0x9d6 <__vector_2+0x12>
     1d4:	ff 7f       	andi	r31, 0xFF	; 255
     1d6:	3f 00       	.word	0x003f	; ????
     1d8:	00 00       	nop
	...

000001dc <__trampolines_end>:
     1dc:	22 00       	.word	0x0022	; ????
     1de:	25 00       	.word	0x0025	; ????
     1e0:	28 00       	.word	0x0028	; ????
     1e2:	2b 00       	.word	0x002b	; ????
     1e4:	2e 00       	.word	0x002e	; ????
     1e6:	31 00       	.word	0x0031	; ????
     1e8:	34 00       	.word	0x0034	; ????
     1ea:	02 01       	movw	r0, r4

000001ec <u8g_avr_ddr_P>:
     1ec:	21 00 24 00 27 00 2a 00 2d 00 30 00 33 00 01 01     !.$.'.*.-.0.3...

000001fc <u8g_dev_ks0108_128x64_init_seq>:
     1fc:	ff d0 ff e0 ff c1 ff d1 3f c0 ff 14 ff d2 3f c0     ........?.....?.
     20c:	ff 14 ff d0 ff fe                                   ......

00000212 <u8g_font_5x7>:
     212:	01 05 07 00 ff 06 01 15 02 27 20 ff ff 06 ff 06     .........' .....
     222:	ff 08 00 50 22 16 56 80 80 80 80 00 80 15 33 53     ...P".V.......3S
     232:	a0 a0 a0 02 55 55 50 f8 50 f8 50 02 55 55 70 a0     ....UUP.P.P.UUp.
     242:	70 28 70 02 46 56 80 90 20 40 90 10 02 45 55 40     p(p.FV.. @...EU@
     252:	a0 40 a0 50 25 13 53 80 80 80 12 26 56 40 80 80     .@.P%.S....&V@..
     262:	80 80 40 12 26 56 80 40 40 40 40 80 12 35 55 a0     ..@.&V.@@@@..5U.
     272:	40 e0 40 a0 02 55 55 20 20 f8 20 20 11 33 53 60     @.@..UU  .  .3S`
     282:	40 80 04 41 51 f0 12 22 52 c0 c0 03 44 54 10 20     @..AQ.."R...DT. 
     292:	40 80 12 36 56 40 a0 a0 a0 a0 40 12 36 56 40 c0     @..6V@....@.6V@.
     2a2:	40 40 40 e0 02 46 56 60 90 10 20 40 f0 02 46 56     @@@..FV`.. @..FV
     2b2:	f0 10 60 10 90 60 02 46 56 20 60 a0 f0 20 20 02     ..`..`.FV `..  .
     2c2:	46 56 f0 80 e0 10 90 60 02 46 56 60 80 e0 90 90     FV.....`.FV`....
     2d2:	60 02 46 56 f0 10 20 20 40 40 02 46 56 60 90 60     `.FV..  @@.FV`.`
     2e2:	90 90 60 02 46 56 60 90 90 70 10 60 12 25 55 c0     ..`.FV`..p.`.%U.
     2f2:	c0 00 c0 c0 01 36 56 60 60 00 60 40 80 12 35 55     .....6V``.`@..5U
     302:	20 40 80 40 20 03 43 53 f0 00 f0 12 35 55 80 40      @.@ .CS....5U.@
     312:	20 40 80 12 36 56 40 a0 20 40 00 40 02 46 56 60      @..6V@. @.@.FV`
     322:	90 b0 b0 80 60 02 46 56 60 90 90 f0 90 90 02 46     ....`.FV`......F
     332:	56 e0 90 e0 90 90 e0 02 46 56 60 90 80 80 90 60     V.......FV`....`
     342:	02 46 56 e0 90 90 90 90 e0 02 46 56 f0 80 e0 80     .FV.......FV....
     352:	80 f0 02 46 56 f0 80 e0 80 80 80 02 46 56 60 90     ...FV.......FV`.
     362:	80 b0 90 70 02 46 56 90 90 f0 90 90 90 12 36 56     ...p.FV.......6V
     372:	e0 40 40 40 40 e0 02 46 56 10 10 10 10 90 60 02     .@@@@..FV.....`.
     382:	46 56 90 a0 c0 c0 a0 90 02 46 56 80 80 80 80 80     FV.......FV.....
     392:	f0 02 46 56 90 f0 f0 90 90 90 02 46 56 90 d0 d0     ..FV.......FV...
     3a2:	b0 b0 90 02 46 56 60 90 90 90 90 60 02 46 56 e0     ....FV`....`.FV.
     3b2:	90 90 e0 80 80 01 47 57 60 90 90 90 d0 60 10 02     ......GW`....`..
     3c2:	46 56 e0 90 90 e0 a0 90 02 46 56 60 90 40 20 90     FV.......FV`.@ .
     3d2:	60 12 36 56 e0 40 40 40 40 40 02 46 56 90 90 90     `.6V.@@@@@.FV...
     3e2:	90 90 60 02 46 56 90 90 90 90 60 60 02 46 56 90     ..`.FV....``.FV.
     3f2:	90 90 f0 f0 90 02 46 56 90 90 60 60 90 90 12 36     ......FV..``...6
     402:	56 a0 a0 a0 40 40 40 02 46 56 f0 10 20 40 80 f0     V...@@@.FV.. @..
     412:	12 36 56 e0 80 80 80 80 e0 03 44 54 80 40 20 10     .6V.......DT.@ .
     422:	12 36 56 e0 20 20 20 20 e0 16 32 52 40 a0 02 41     .6V.    ..2R@..A
     432:	51 f0 16 22 52 80 40 02 44 54 70 90 b0 50 02 46     Q.."R.@.DTp..P.F
     442:	56 80 80 e0 90 90 e0 02 34 54 60 80 80 60 02 46     V.......4T`..`.F
     452:	56 10 10 70 90 90 70 02 44 54 60 b0 c0 60 02 46     V..p..p.DT`..`.F
     462:	56 20 50 40 e0 40 40 01 45 55 70 90 60 80 70 02     V P@.@@.EUp.`.p.
     472:	46 56 80 80 e0 90 90 90 12 36 56 40 00 c0 40 40     FV.......6V@..@@
     482:	e0 11 37 57 20 00 20 20 20 a0 40 02 46 56 80 80     ..7W .   .@.FV..
     492:	a0 c0 a0 90 12 36 56 c0 40 40 40 40 e0 02 44 54     .....6V.@@@@..DT
     4a2:	a0 f0 90 90 02 44 54 e0 90 90 90 02 44 54 60 90     .....DT.....DT`.
     4b2:	90 60 01 45 55 e0 90 90 e0 80 01 45 55 70 90 90     .`.EU......EUp..
     4c2:	70 10 02 44 54 e0 90 80 80 02 44 54 70 c0 30 e0     p..DT.....DTp.0.
     4d2:	02 46 56 40 40 e0 40 40 30 02 44 54 90 90 90 70     .FV@@.@@0.DT...p
     4e2:	12 34 54 a0 a0 a0 40 02 44 54 90 90 f0 f0 02 44     .4T...@.DT.....D
     4f2:	54 90 60 60 90 01 45 55 90 90 50 20 40 02 44 54     T.``..EU..P @.DT
     502:	f0 20 40 f0 12 36 56 20 40 c0 40 40 20 22 16 56     . @..6V @.@@ ".V
     512:	80 80 80 80 80 80 12 36 56 80 40 60 40 40 80 06     .......6V.@`@@..
     522:	42 52 50 a0 ff ff ff ff ff ff ff ff ff ff ff ff     BRP.............
     532:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     542:	ff ff ff ff ff 08 00 50 22 16 56 80 00 80 80 80     .......P".V.....
     552:	80 01 46 56 20 70 a0 a0 70 20 02 45 55 30 40 e0     ..FV p..p .EU0@.
     562:	40 b0 02 55 55 88 70 50 70 88 12 36 56 a0 a0 40     @..UU.pPp..6V..@
     572:	e0 40 40 22 15 55 80 80 00 80 80 11 37 57 60 80     .@@".U......7W`.
     582:	c0 a0 60 20 c0 17 31 51 a0 01 57 57 70 88 a8 c8     ..` ..1Q..WWp...
     592:	a8 88 70 05 33 53 60 a0 60 03 53 53 48 90 48 03     ..p.3S`.`.SSH.H.
     5a2:	42 52 f0 10 14 31 51 e0 01 57 57 70 88 e8 c8 c8     BR...1Q..WWp....
     5b2:	88 70 07 41 51 f0 15 33 53 40 a0 40 02 56 56 20     .p.AQ..3S@.@.VV 
     5c2:	20 f8 20 20 f8 14 24 54 c0 40 80 c0 14 24 54 c0      .  ..$T.@...$T.
     5d2:	c0 40 c0 16 22 52 40 80 01 45 55 90 90 90 e0 80     .@.."R@..EU.....
     5e2:	02 46 56 70 d0 d0 50 50 50 14 22 52 c0 c0 11 22     .FVp..PPP."R..."
     5f2:	52 40 80 14 34 54 40 c0 40 e0 05 33 53 40 a0 40     R@..4T@.@..3S@.@
     602:	03 53 53 90 48 90 01 47 57 80 80 80 90 30 70 10     .SS.H..GW....0p.
     612:	01 47 57 80 80 80 b0 10 20 30 01 47 57 c0 c0 40     .GW..... 0.GW..@
     622:	d0 30 70 10 12 36 56 40 00 40 80 a0 40 02 46 56     .0p..6V@.@..@.FV
     632:	60 90 90 f0 90 90 02 46 56 60 90 90 f0 90 90 02     `......FV`......
     642:	46 56 60 90 90 f0 90 90 02 46 56 60 90 90 f0 90     FV`......FV`....
     652:	90 02 46 56 90 60 90 f0 90 90 02 46 56 60 60 90     ..FV.`.....FV``.
     662:	f0 90 90 02 46 56 70 a0 b0 e0 a0 b0 01 47 57 60     ....FVp......GW`
     672:	90 80 80 90 60 40 02 46 56 f0 80 e0 80 80 f0 02     ....`@.FV.......
     682:	46 56 f0 80 e0 80 80 f0 02 46 56 f0 80 e0 80 80     FV.......FV.....
     692:	f0 02 46 56 f0 80 e0 80 80 f0 12 36 56 e0 40 40     ..FV.......6V.@@
     6a2:	40 40 e0 12 36 56 e0 40 40 40 40 e0 12 36 56 e0     @@..6V.@@@@..6V.
     6b2:	40 40 40 40 e0 12 36 56 e0 40 40 40 40 e0 02 46     @@@@..6V.@@@@..F
     6c2:	56 e0 50 d0 50 50 e0 02 46 56 b0 90 d0 b0 b0 90     V.P.PP..FV......
     6d2:	02 46 56 60 90 90 90 90 60 02 46 56 60 90 90 90     .FV`....`.FV`...
     6e2:	90 60 02 46 56 60 90 90 90 90 60 02 46 56 60 90     .`.FV`....`.FV`.
     6f2:	90 90 90 60 02 46 56 90 60 90 90 90 60 02 44 54     ...`.FV.`...`.DT
     702:	90 60 60 90 02 46 56 70 b0 b0 d0 d0 e0 02 46 56     .``..FVp......FV
     712:	90 90 90 90 90 60 02 46 56 90 90 90 90 90 60 02     .....`.FV.....`.
     722:	46 56 90 90 90 90 90 60 02 46 56 90 00 90 90 90     FV.....`.FV.....
     732:	60 12 36 56 a0 a0 a0 40 40 40 02 46 56 80 e0 90     `.6V...@@@.FV...
     742:	e0 80 80 02 46 56 60 90 a0 90 90 a0 02 46 56 40     ....FV`......FV@
     752:	20 70 90 b0 50 02 46 56 20 40 70 90 b0 50 02 46      p..P.FV @p..P.F
     762:	56 20 50 70 90 b0 50 02 46 56 50 a0 70 90 b0 50     V Pp..P.FVP.p..P
     772:	02 46 56 50 00 70 90 b0 50 02 46 56 60 60 70 90     .FVP.p..P.FV``p.
     782:	b0 50 02 44 54 70 b0 a0 70 11 35 55 60 80 80 60     .P.DTp..p.5U`..`
     792:	40 02 46 56 40 20 60 b0 c0 60 02 46 56 20 40 60     @.FV@ `..`.FV @`
     7a2:	b0 c0 60 02 46 56 40 a0 60 b0 c0 60 02 46 56 a0     ..`.FV@.`..`.FV.
     7b2:	00 60 b0 c0 60 12 36 56 80 40 c0 40 40 e0 12 36     .`..`.6V.@.@@..6
     7c2:	56 40 80 c0 40 40 e0 12 36 56 40 a0 c0 40 40 e0     V@..@@..6V@..@@.
     7d2:	12 36 56 a0 00 c0 40 40 e0 02 46 56 40 30 60 90     .6V...@@..FV@0`.
     7e2:	90 60 02 46 56 50 a0 e0 90 90 90 02 46 56 40 20     .`.FVP......FV@ 
     7f2:	60 90 90 60 02 46 56 20 40 60 90 90 60 02 46 56     `..`.FV @`..`.FV
     802:	60 00 60 90 90 60 02 46 56 50 a0 60 90 90 60 02     `.`..`.FVP.`..`.
     812:	46 56 50 00 60 90 90 60 02 45 55 60 00 f0 00 60     FVP.`..`.EU`...`
     822:	02 44 54 70 b0 d0 e0 02 46 56 40 20 90 90 90 70     .DTp....FV@ ...p
     832:	02 46 56 20 40 90 90 90 70 02 46 56 60 00 90 90     .FV @...p.FV`...
     842:	90 70 02 46 56 50 00 90 90 90 70 01 47 57 20 40     .p.FVP....p.GW @
     852:	90 90 50 20 40 01 46 56 80 e0 90 90 e0 80 01 47     ..P @.FV.......G
     862:	57 50 00 90 90 50 20 40                             WP...P @

0000086a <__ctors_end>:
     86a:	11 24       	eor	r1, r1
     86c:	1f be       	out	0x3f, r1	; 63
     86e:	cf ef       	ldi	r28, 0xFF	; 255
     870:	d1 e2       	ldi	r29, 0x21	; 33
     872:	de bf       	out	0x3e, r29	; 62
     874:	cd bf       	out	0x3d, r28	; 61
     876:	00 e0       	ldi	r16, 0x00	; 0
     878:	0c bf       	out	0x3c, r16	; 60

0000087a <__do_copy_data>:
     87a:	12 e0       	ldi	r17, 0x02	; 2
     87c:	a0 e0       	ldi	r26, 0x00	; 0
     87e:	b2 e0       	ldi	r27, 0x02	; 2
     880:	e8 e5       	ldi	r30, 0x58	; 88
     882:	fc e2       	ldi	r31, 0x2C	; 44
     884:	00 e0       	ldi	r16, 0x00	; 0
     886:	0b bf       	out	0x3b, r16	; 59
     888:	02 c0       	rjmp	.+4      	; 0x88e <__do_copy_data+0x14>
     88a:	07 90       	elpm	r0, Z+
     88c:	0d 92       	st	X+, r0
     88e:	aa 33       	cpi	r26, 0x3A	; 58
     890:	b1 07       	cpc	r27, r17
     892:	d9 f7       	brne	.-10     	; 0x88a <__do_copy_data+0x10>

00000894 <__do_clear_bss>:
     894:	25 e0       	ldi	r18, 0x05	; 5
     896:	aa e3       	ldi	r26, 0x3A	; 58
     898:	b2 e0       	ldi	r27, 0x02	; 2
     89a:	01 c0       	rjmp	.+2      	; 0x89e <.do_clear_bss_start>

0000089c <.do_clear_bss_loop>:
     89c:	1d 92       	st	X+, r1

0000089e <.do_clear_bss_start>:
     89e:	a9 34       	cpi	r26, 0x49	; 73
     8a0:	b2 07       	cpc	r27, r18
     8a2:	e1 f7       	brne	.-8      	; 0x89c <.do_clear_bss_loop>
     8a4:	91 d4       	rcall	.+2338   	; 0x11c8 <main>
     8a6:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <_exit>

000008aa <__bad_interrupt>:
     8aa:	aa cb       	rjmp	.-2220   	; 0x0 <__vectors>

000008ac <adc_init>:
{
	// << NOTE >> : Use Masking and Shift Operators here
	
	// In ADCSRA, enable ADC and pre-scalar = 64 (ADEN = 1, ADPS2 = 1, ADPS1 = 1, ADPS0 = 0)
	//				and clear ADC start conversion bit, auto trigger enable bit, interrupt flag bit and interrupt enable bit
	ADCSRA_reg	|= ( (1 << ADEN_bit) | (1 << ADPS2_bit) | (1 << ADPS1_bit) );
     8ac:	ea e7       	ldi	r30, 0x7A	; 122
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 81       	ld	r24, Z
     8b2:	86 68       	ori	r24, 0x86	; 134
     8b4:	80 83       	st	Z, r24
	ADCSRA_reg	&= ~( (1 << ADSC_bit) | (1 << ADATE_bit) | (1 << ADIF_bit) | (1 << ADIE_bit) | (1 << ADPS0_bit) );
     8b6:	80 81       	ld	r24, Z
     8b8:	86 78       	andi	r24, 0x86	; 134
     8ba:	80 83       	st	Z, r24
	
	// In ADCSRB, disable Analog Comparator Multiplexer, MUX5 bit and ADC Auto Trigger Source bits
	ADCSRB_reg	&= ~( (1 << ACME_bit) | (1 << MUX5_bit) | (1 << ADTS2_bit) | (1 << ADTS1_bit) | (1 << ADTS0_bit) );
     8bc:	eb e7       	ldi	r30, 0x7B	; 123
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z
     8c2:	80 7b       	andi	r24, 0xB0	; 176
     8c4:	80 83       	st	Z, r24
	
	// In ADMUX, set the Reference Selection bits to use the AVCC as reference, and disable the channel selection bits MUX[4:0]
	ADMUX_reg	&= ~( (1 << REFS1_bit) | (1 << MUX4_bit) | (1 << MUX3_bit) | (1 << MUX2_bit) | (1 << MUX1_bit) | (1 << MUX0_bit) );
     8c6:	ec e7       	ldi	r30, 0x7C	; 124
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	80 76       	andi	r24, 0x60	; 96
     8ce:	80 83       	st	Z, r24
	ADMUX_reg	|= (1 << REFS0_bit);
     8d0:	80 81       	ld	r24, Z
     8d2:	80 64       	ori	r24, 0x40	; 64
     8d4:	80 83       	st	Z, r24
	
	// In ADMUX, enable the ADLAR bit for 8-bit ADC result
	ADMUX_reg	|= (1 << ADLAR_bit);
     8d6:	80 81       	ld	r24, Z
     8d8:	80 62       	ori	r24, 0x20	; 32
     8da:	80 83       	st	Z, r24
	
	// In ACSR, disable the Analog Comparator by writing 1 to ACD_bit
	ACSR_reg	|= ( 1 << ACD_bit );
     8dc:	80 b7       	in	r24, 0x30	; 48
     8de:	80 68       	ori	r24, 0x80	; 128
     8e0:	80 bf       	out	0x30, r24	; 48
     8e2:	08 95       	ret

000008e4 <select_adc_channel>:
void select_adc_channel( unsigned char channel_num )
{
	// << NOTE >> : Use Masking and Shift Operators here
	
	// set the MUX[5:0] bits to select the ADC channel number
	if ( channel_num > 7 )
     8e4:	88 30       	cpi	r24, 0x08	; 8
     8e6:	28 f0       	brcs	.+10     	; 0x8f2 <select_adc_channel+0xe>
	{
		ADCSRB_reg |= ( 1 << MUX5_bit );					// set the MUX5 bit for selecting channel if its greater than 7
     8e8:	eb e7       	ldi	r30, 0x7B	; 123
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	90 81       	ld	r25, Z
     8ee:	98 60       	ori	r25, 0x08	; 8
     8f0:	90 83       	st	Z, r25
	}
	
	channel_num	= channel_num & 0x07;						// retain the last 3 bits from the variable for MUX[2:0] bits
     8f2:	87 70       	andi	r24, 0x07	; 7
	
	//ADMUX_reg	= ( ( ADMUX_reg & 0xF8 ) | channel_num );
	ADMUX_reg	= ( ADMUX_reg | channel_num );
     8f4:	ec e7       	ldi	r30, 0x7C	; 124
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	90 81       	ld	r25, Z
     8fa:	89 2b       	or	r24, r25
     8fc:	80 83       	st	Z, r24
     8fe:	08 95       	ret

00000900 <start_adc>:
void start_adc(void)
{
	// << NOTE >> : Use Masking and Shift Operators here
	
	// set the ADSC bit in ADCSRA register
	ADCSRA_reg		|= ( 1 << ADSC_bit );
     900:	ea e7       	ldi	r30, 0x7A	; 122
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	80 64       	ori	r24, 0x40	; 64
     908:	80 83       	st	Z, r24
     90a:	08 95       	ret

0000090c <check_adc_conversion_complete>:
	/*
	<< TODO >> :
		1. Write an if-else statement with a condition which checks whether the ADC conversion for the selected channel is complete or not.
		2. If the ADC has completed its conversion for the selected channel return true, else return false
	*/
	if ( ( ADCSRA_reg & ( 1 << ADIF_bit ) ) == 0x10 )
     90c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     910:	84 ff       	sbrs	r24, 4
     912:	02 c0       	rjmp	.+4      	; 0x918 <check_adc_conversion_complete+0xc>
	{
		return true;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	08 95       	ret
	}
	else
	{
		return false;
     918:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     91a:	08 95       	ret

0000091c <read_adc_converted_data>:
	
	// read the appropriate ADC data register/s
	
	unsigned char adc_data_high_byte;
	
	adc_data_high_byte	= ADCH_reg;
     91c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	adc_8bit_data		= adc_data_high_byte;
	
	return adc_8bit_data;
}
     920:	08 95       	ret

00000922 <reset_adc_config_registers>:
 */
void reset_adc_config_registers(void)
{
	// << NOTE >> : Use Masking and Shift Operators here
	
	ADCSRA_reg		|= ( 1 << ADIF_bit );					// clear ADIF bit by writing 1 to it
     922:	ea e7       	ldi	r30, 0x7A	; 122
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	80 61       	ori	r24, 0x10	; 16
     92a:	80 83       	st	Z, r24
	
	ADCSRB_reg		&= ~( 1 << MUX5_bit );					// clear the MUX5 bit
     92c:	eb e7       	ldi	r30, 0x7B	; 123
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	87 7f       	andi	r24, 0xF7	; 247
     934:	80 83       	st	Z, r24
	
	// clear the MUX[4:0] bits
	ADMUX_reg		&= ~( (1 << MUX4_bit) | (1 << MUX3_bit) | (1 << MUX2_bit) | (1 << MUX1_bit) | (1 << MUX0_bit) );
     936:	ec e7       	ldi	r30, 0x7C	; 124
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	80 7e       	andi	r24, 0xE0	; 224
     93e:	80 83       	st	Z, r24
     940:	08 95       	ret

00000942 <convert_analog_channel_data>:
 * @param[in]  sensor_channel_number   ADC channel number of sensor
 *
 * @return     8-bit digital data from the input sensor ADC channel
 */
unsigned char convert_analog_channel_data( unsigned char sensor_channel_number )
{
     942:	cf 93       	push	r28
	
	unsigned char adc_8bit_data;
	
	select_adc_channel( sensor_channel_number );	
     944:	cf df       	rcall	.-98     	; 0x8e4 <select_adc_channel>
	start_adc();
     946:	dc df       	rcall	.-72     	; 0x900 <start_adc>

	while( !( check_adc_conversion_complete() ) );	// wait for ADC conversion to complete by polling ADIF bit in ADCSRA register
     948:	e1 df       	rcall	.-62     	; 0x90c <check_adc_conversion_complete>
     94a:	88 23       	and	r24, r24
     94c:	e9 f3       	breq	.-6      	; 0x948 <convert_analog_channel_data+0x6>
	adc_8bit_data = read_adc_converted_data();
     94e:	e6 df       	rcall	.-52     	; 0x91c <read_adc_converted_data>
     950:	c8 2f       	mov	r28, r24
     952:	e7 df       	rcall	.-50     	; 0x922 <reset_adc_config_registers>
	reset_adc_config_registers();
     954:	8c 2f       	mov	r24, r28
     956:	cf 91       	pop	r28
	
	return adc_8bit_data;
}
     958:	08 95       	ret

0000095a <dso_switches_input_channel_config>:
     95a:	8a b1       	in	r24, 0x0a	; 10
     95c:	81 7f       	andi	r24, 0xF1	; 241
{
	// << NOTE >> : Use Masking and Shift Operators here
	// << TODO >> : Complete the function as expected in the comment above.
	
	// Make **ONLY** three switches (DIV+, DIV- and HOLD) connected to div_hold_switch_port (PORTD) as input
	div_hold_switch_ddr_reg &= ~((1<<div_add_sw_pin)|(1<<div_sub_sw_pin)|(1<<hold_sw_pin));
     95e:	8a b9       	out	0x0a, r24	; 10
	
	// Activate pull-up for **ONLY** for three switches (DIV+, DIV- and HOLD) connected to div_hold_switch_port (PORTD)
	div_hold_switch_port_reg |= ((1<<div_add_sw_pin)|(1<<div_sub_sw_pin)|(1<<hold_sw_pin));
     960:	8b b1       	in	r24, 0x0b	; 11
     962:	8e 60       	ori	r24, 0x0E	; 14
     964:	8b b9       	out	0x0b, r24	; 11

	// Make **ONLY** two switches (UP and DOWN) connected to up_down_switch_port (PORTE) as input
	up_down_switch_ddr_reg &= ~((1<<up_sw_pin)|(1<<down_sw_pin));
     966:	8d b1       	in	r24, 0x0d	; 13
     968:	8f 7c       	andi	r24, 0xCF	; 207
     96a:	8d b9       	out	0x0d, r24	; 13

	// Activate pull-up for **ONLY** for two switches (UP and DOWN) connected to up_down_switch_port (PORTE)
	up_down_switch_port_reg |= ((1<<up_sw_pin)|(1<<down_sw_pin));
     96c:	8e b1       	in	r24, 0x0e	; 14
     96e:	80 63       	ori	r24, 0x30	; 48
     970:	8e b9       	out	0x0e, r24	; 14

	// Make **ONLY** the dso_input_channel pin connected to dso_input_channel_port (PORTK) as input
	dso_input_channel_ddr_reg &= ~(1<<dso_input_channel_pin);
     972:	e7 e0       	ldi	r30, 0x07	; 7
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	80 81       	ld	r24, Z
     978:	8e 7f       	andi	r24, 0xFE	; 254
     97a:	80 83       	st	Z, r24

	// Deactivate pull-up for **ONLY** dso_input_channel pin connected to dso_input_channel_port (PORTK)
	dso_input_channel_port_reg &= ~(1<<dso_input_channel_pin);
     97c:	e8 e0       	ldi	r30, 0x08	; 8
     97e:	f1 e0       	ldi	r31, 0x01	; 1
     980:	80 81       	ld	r24, Z
     982:	8e 7f       	andi	r24, 0xFE	; 254
     984:	80 83       	st	Z, r24
     986:	08 95       	ret

00000988 <dso_switches_interrupt_config>:
{
	// << NOTE >> : Use Masking and Shift Operators here
	// << TODO >> : Complete the function as expected in the comment above

	// All interrupts have to be disabled before configuring interrupts
	cli();	// Disable interrupts globally
     988:	f8 94       	cli

	// Configure falling edge detection on div_add_sw_pin_int (INT1) and div_sub_sw_pin_int (INT2)
	EICRA_reg |= ((1<<div_add_sw_ISC_bit1)|(1<<div_sub_sw_ISC_bit1));
     98a:	e9 e6       	ldi	r30, 0x69	; 105
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	88 62       	ori	r24, 0x28	; 40
     992:	80 83       	st	Z, r24
	EICRA_reg &= ~((1<<div_add_sw_ISC_bit0)|(1<<div_sub_sw_ISC_bit0));
     994:	80 81       	ld	r24, Z
     996:	8b 7e       	andi	r24, 0xEB	; 235
     998:	80 83       	st	Z, r24

	// Configure low level detection on hold_sw_pin_int (INT3)
	EICRA_reg &= ~((1<<hold_sw_ISC_bit0)|(1<<hold_sw_ISC_bit1));
     99a:	80 81       	ld	r24, Z
     99c:	8f 73       	andi	r24, 0x3F	; 63
     99e:	80 83       	st	Z, r24

	// Configure falling edge detection on up_sw_pin_int (INT4) and down_sw_pin_int (INT5)
	EICRB_reg |= ((1<<up_sw_ISC_bit1)|(1<<down_sw_ISC_bit1));
     9a0:	ea e6       	ldi	r30, 0x6A	; 106
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 81       	ld	r24, Z
     9a6:	8a 60       	ori	r24, 0x0A	; 10
     9a8:	80 83       	st	Z, r24
	EICRB_reg &= ~((1<<up_sw_ISC_bit0)|(1<<down_sw_ISC_bit0));
     9aa:	80 81       	ld	r24, Z
     9ac:	8a 7f       	andi	r24, 0xFA	; 250
     9ae:	80 83       	st	Z, r24

	// Enable INT1, INT2, INT3, INT4 and INT5 interrupts
	EIMSK_reg |= ((1<<div_add_sw_pin_int)|(1<<div_sub_sw_pin_int)|(1<<hold_sw_pin_int)|(1<<up_sw_pin_int)|(1<<down_sw_pin_int));
     9b0:	8d b3       	in	r24, 0x1d	; 29
     9b2:	8e 63       	ori	r24, 0x3E	; 62
     9b4:	8d bb       	out	0x1d, r24	; 29

	sei();	// Enable interrupts gloabally
     9b6:	78 94       	sei
     9b8:	08 95       	ret

000009ba <dso_init>:
 */
void dso_init(void)
{
	// << NOTE >> : You are not allowed to modify or change anything inside this function

	dso_switches_input_channel_config();
     9ba:	cf df       	rcall	.-98     	; 0x95a <dso_switches_input_channel_config>
	dso_switches_interrupt_config();
     9bc:	e5 df       	rcall	.-54     	; 0x988 <dso_switches_interrupt_config>
	adc_init();
     9be:	76 df       	rcall	.-276    	; 0x8ac <adc_init>
     9c0:	0d c4       	rjmp	.+2074   	; 0x11dc <glcd_setup>

	// maps the GLCD connections with Arduino Mega pins to the ATmega2560 pins
	// the function is defined in "u8glib.c" file
	glcd_setup();
     9c2:	08 95       	ret

000009c4 <__vector_2>:
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0

/**
 * @brief      Interrupt Service Routine for div_add_sw_pin_int (INT1)
 */
ISR(div_add_sw_pin_int_vect)
{
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
     9ce:	0b b6       	in	r0, 0x3b	; 59
     9d0:	0f 92       	push	r0
     9d2:	cf 92       	push	r12
     9d4:	df 92       	push	r13
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	2f 93       	push	r18
     9dc:	3f 93       	push	r19
     9de:	4f 93       	push	r20
     9e0:	5f 93       	push	r21
     9e2:	6f 93       	push	r22
     9e4:	7f 93       	push	r23
     9e6:	8f 93       	push	r24
     9e8:	9f 93       	push	r25
     9ea:	af 93       	push	r26
     9ec:	bf 93       	push	r27
     9ee:	ef 93       	push	r30
     9f0:	ff 93       	push	r31
	if(ms_per_div<2.0){
     9f2:	c0 90 04 02 	lds	r12, 0x0204	; 0x800204 <ms_per_div>
     9f6:	d0 90 05 02 	lds	r13, 0x0205	; 0x800205 <ms_per_div+0x1>
     9fa:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <ms_per_div+0x2>
     9fe:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <ms_per_div+0x3>
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	50 e4       	ldi	r21, 0x40	; 64
     a0a:	c7 01       	movw	r24, r14
     a0c:	b6 01       	movw	r22, r12
     a0e:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__cmpsf2>
     a12:	88 23       	and	r24, r24
     a14:	84 f4       	brge	.+32     	; 0xa36 <__vector_2+0x72>
		ms_per_div+=0.5;
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	c7 01       	movw	r24, r14
     a20:	b6 01       	movw	r22, r12
     a22:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__addsf3>
     a26:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <ms_per_div>
     a2a:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <ms_per_div+0x1>
     a2e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <ms_per_div+0x2>
     a32:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <ms_per_div+0x3>
	}
}
     a36:	ff 91       	pop	r31
     a38:	ef 91       	pop	r30
     a3a:	bf 91       	pop	r27
     a3c:	af 91       	pop	r26
     a3e:	9f 91       	pop	r25
     a40:	8f 91       	pop	r24
     a42:	7f 91       	pop	r23
     a44:	6f 91       	pop	r22
     a46:	5f 91       	pop	r21
     a48:	4f 91       	pop	r20
     a4a:	3f 91       	pop	r19
     a4c:	2f 91       	pop	r18
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	0f 90       	pop	r0
     a58:	0b be       	out	0x3b, r0	; 59
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <__vector_3>:

/**
 * @brief      Interrupt Service Routine for div_sub_sw_pin_int (INT2)
 */
ISR(div_sub_sw_pin_int_vect)
{
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	0b b6       	in	r0, 0x3b	; 59
     a70:	0f 92       	push	r0
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	2f 93       	push	r18
     a7c:	3f 93       	push	r19
     a7e:	4f 93       	push	r20
     a80:	5f 93       	push	r21
     a82:	6f 93       	push	r22
     a84:	7f 93       	push	r23
     a86:	8f 93       	push	r24
     a88:	9f 93       	push	r25
     a8a:	af 93       	push	r26
     a8c:	bf 93       	push	r27
     a8e:	ef 93       	push	r30
     a90:	ff 93       	push	r31
	if(ms_per_div-0.5>0.125){
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	5f e3       	ldi	r21, 0x3F	; 63
     a9a:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <ms_per_div>
     a9e:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <ms_per_div+0x1>
     aa2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <ms_per_div+0x2>
     aa6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <ms_per_div+0x3>
     aaa:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__subsf3>
     aae:	6b 01       	movw	r12, r22
     ab0:	7c 01       	movw	r14, r24
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	5e e3       	ldi	r21, 0x3E	; 62
     aba:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
     abe:	18 16       	cp	r1, r24
     ac0:	44 f4       	brge	.+16     	; 0xad2 <__vector_3+0x6e>
		ms_per_div-=0.5;
     ac2:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <ms_per_div>
     ac6:	d0 92 05 02 	sts	0x0205, r13	; 0x800205 <ms_per_div+0x1>
     aca:	e0 92 06 02 	sts	0x0206, r14	; 0x800206 <ms_per_div+0x2>
     ace:	f0 92 07 02 	sts	0x0207, r15	; 0x800207 <ms_per_div+0x3>
	}
}
     ad2:	ff 91       	pop	r31
     ad4:	ef 91       	pop	r30
     ad6:	bf 91       	pop	r27
     ad8:	af 91       	pop	r26
     ada:	9f 91       	pop	r25
     adc:	8f 91       	pop	r24
     ade:	7f 91       	pop	r23
     ae0:	6f 91       	pop	r22
     ae2:	5f 91       	pop	r21
     ae4:	4f 91       	pop	r20
     ae6:	3f 91       	pop	r19
     ae8:	2f 91       	pop	r18
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	0f 90       	pop	r0
     af4:	0b be       	out	0x3b, r0	; 59
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	0f 90       	pop	r0
     afc:	1f 90       	pop	r1
     afe:	18 95       	reti

00000b00 <__vector_4>:

/**
 * @brief      Interrupt Service Routine for hold_sw_pin_int (INT3)
 */
ISR(hold_sw_pin_int_vect)
{
     b00:	1f 92       	push	r1
     b02:	0f 92       	push	r0
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	0f 92       	push	r0
     b08:	11 24       	eor	r1, r1
     b0a:	2f 93       	push	r18
     b0c:	3f 93       	push	r19
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
	hold_flag=hold_flag==0?1:0;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <hold_flag>
     b1a:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <hold_flag+0x1>
     b1e:	23 2b       	or	r18, r19
     b20:	11 f0       	breq	.+4      	; 0xb26 <__vector_4+0x26>
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <hold_flag+0x1>
     b2a:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <hold_flag>
}
     b2e:	9f 91       	pop	r25
     b30:	8f 91       	pop	r24
     b32:	3f 91       	pop	r19
     b34:	2f 91       	pop	r18
     b36:	0f 90       	pop	r0
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	0f 90       	pop	r0
     b3c:	1f 90       	pop	r1
     b3e:	18 95       	reti

00000b40 <__vector_5>:

/**
 * @brief      Interrupt Service Routine for up_sw_pin_int (INT4)
 */
ISR(up_sw_pin_int_vect)
{
     b40:	1f 92       	push	r1
     b42:	0f 92       	push	r0
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	0f 92       	push	r0
     b48:	11 24       	eor	r1, r1
     b4a:	2f 93       	push	r18
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
	if(vert_disp>-31){
     b50:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <__data_end>
     b54:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <__data_end+0x1>
     b58:	82 3e       	cpi	r24, 0xE2	; 226
     b5a:	2f ef       	ldi	r18, 0xFF	; 255
     b5c:	92 07       	cpc	r25, r18
     b5e:	2c f0       	brlt	.+10     	; 0xb6a <__vector_5+0x2a>
		vert_disp--;
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <__data_end+0x1>
     b66:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <__data_end>
	}
}
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	2f 91       	pop	r18
     b70:	0f 90       	pop	r0
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	0f 90       	pop	r0
     b76:	1f 90       	pop	r1
     b78:	18 95       	reti

00000b7a <__vector_6>:

/**
 * @brief      Interrupt Service Routine for down_sw_pin_int (INT5)
 */
ISR(down_sw_pin_int_vect)
{
     b7a:	1f 92       	push	r1
     b7c:	0f 92       	push	r0
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
	if(vert_disp<31){
     b88:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <__data_end>
     b8c:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <__data_end+0x1>
     b90:	8f 31       	cpi	r24, 0x1F	; 31
     b92:	91 05       	cpc	r25, r1
     b94:	2c f4       	brge	.+10     	; 0xba0 <__vector_6+0x26>
		vert_disp++;
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <__data_end+0x1>
     b9c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <__data_end>
	}
}
     ba0:	9f 91       	pop	r25
     ba2:	8f 91       	pop	r24
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	1f 90       	pop	r1
     bac:	18 95       	reti

00000bae <dso_start_screen>:
/**
 * @brief      Display the Start Screen of DSO
 */
void dso_start_screen(void)
{
	setFont(u8g_font_5x7);
     bae:	82 e1       	ldi	r24, 0x12	; 18
     bb0:	92 e0       	ldi	r25, 0x02	; 2
     bb2:	6d d4       	rcall	.+2266   	; 0x148e <setFont>
	firstPage();
     bb4:	71 d4       	rcall	.+2274   	; 0x1498 <firstPage>
     bb6:	46 e1       	ldi	r20, 0x16	; 22

	// << NOTE >> : You can add your creativity over here!
	do
	{
		drawStr( 35, 20, "DSO START" );
     bb8:	52 e0       	ldi	r21, 0x02	; 2
     bba:	64 e1       	ldi	r22, 0x14	; 20
     bbc:	83 e2       	ldi	r24, 0x23	; 35
     bbe:	60 d4       	rcall	.+2240   	; 0x1480 <drawStr>
     bc0:	2e e1       	ldi	r18, 0x1E	; 30
		drawLine(35,30,75,30);
     bc2:	4b e4       	ldi	r20, 0x4B	; 75
     bc4:	6e e1       	ldi	r22, 0x1E	; 30
     bc6:	83 e2       	ldi	r24, 0x23	; 35
     bc8:	4b d4       	rcall	.+2198   	; 0x1460 <drawLine>
     bca:	2c e3       	ldi	r18, 0x3C	; 60
		drawLine(35,30,35,60);
     bcc:	43 e2       	ldi	r20, 0x23	; 35
     bce:	6e e1       	ldi	r22, 0x1E	; 30
     bd0:	83 e2       	ldi	r24, 0x23	; 35
     bd2:	46 d4       	rcall	.+2188   	; 0x1460 <drawLine>
     bd4:	2e e1       	ldi	r18, 0x1E	; 30
		drawLine(35,50,75,30);
     bd6:	4b e4       	ldi	r20, 0x4B	; 75
     bd8:	62 e3       	ldi	r22, 0x32	; 50
     bda:	83 e2       	ldi	r24, 0x23	; 35
     bdc:	41 d4       	rcall	.+2178   	; 0x1460 <drawLine>
     bde:	2c e3       	ldi	r18, 0x3C	; 60
		drawLine(35,60,75,60); // An attempt on the logo :')
     be0:	4b e4       	ldi	r20, 0x4B	; 75
     be2:	6c e3       	ldi	r22, 0x3C	; 60
     be4:	83 e2       	ldi	r24, 0x23	; 35
     be6:	3c d4       	rcall	.+2168   	; 0x1460 <drawLine>
     be8:	2f ef       	ldi	r18, 0xFF	; 255
     bea:	83 ed       	ldi	r24, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bec:	90 e3       	ldi	r25, 0x30	; 48
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	80 40       	sbci	r24, 0x00	; 0
     bf2:	90 40       	sbci	r25, 0x00	; 0
     bf4:	e1 f7       	brne	.-8      	; 0xbee <dso_start_screen+0x40>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <dso_start_screen+0x4a>
     bf8:	00 00       	nop
     bfa:	52 d4       	rcall	.+2212   	; 0x14a0 <nextPage>
		_delay_ms(1000);   //added delay so that the start message should stay for a while to read.
	}
	while( nextPage() );
     bfc:	81 11       	cpse	r24, r1
     bfe:	db cf       	rjmp	.-74     	; 0xbb6 <dso_start_screen+0x8>
     c00:	08 95       	ret

00000c02 <sample_input_wave>:
     c02:	cf 92       	push	r12
}
     c04:	df 92       	push	r13

/**
 * @brief      Sample the waveform from the DSO input channel and store the data in a buffer array.
 */
void sample_input_wave(void)
{
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
	// << TODO >> : Complete the logic in function as expected in the comment above.
	for (int i = 0; i < 192; i++)
     c0e:	c0 e0       	ldi	r28, 0x00	; 0
     c10:	d0 e0       	ldi	r29, 0x00	; 0
     c12:	45 c0       	rjmp	.+138    	; 0xc9e <sample_input_wave+0x9c>
		   should be at-least twice of the frequency that is given as the input. Now since the micro-controller used is operating at a greater frequency that we will
		   normally input to the oscilloscope so we don't need to worry about the aliasing problem. We make use of this information to increase or decrease the ms_per_div
		   We will simply add some delay in between the consecutive sampling, resulting in more closer waves displayed on the display. */
		
		/* I added these delays based on my experiments, for twice the ms_per_div value I needed to show twice the peaks that were displayed initially.*/
		if(ms_per_div==1.0) _delay_us(85);
     c14:	c0 90 04 02 	lds	r12, 0x0204	; 0x800204 <ms_per_div>
     c18:	d0 90 05 02 	lds	r13, 0x0205	; 0x800205 <ms_per_div+0x1>
     c1c:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <ms_per_div+0x2>
     c20:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <ms_per_div+0x3>
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e8       	ldi	r20, 0x80	; 128
     c2a:	5f e3       	ldi	r21, 0x3F	; 63
     c2c:	c7 01       	movw	r24, r14
     c2e:	b6 01       	movw	r22, r12
     c30:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__cmpsf2>
     c34:	81 11       	cpse	r24, r1
     c36:	07 c0       	rjmp	.+14     	; 0xc46 <sample_input_wave+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c38:	83 e5       	ldi	r24, 0x53	; 83
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <sample_input_wave+0x3a>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <sample_input_wave+0x40>
     c42:	00 00       	nop
     c44:	21 c0       	rjmp	.+66     	; 0xc88 <sample_input_wave+0x86>
		else if(ms_per_div==1.5) _delay_us(160);
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 ec       	ldi	r20, 0xC0	; 192
     c4c:	5f e3       	ldi	r21, 0x3F	; 63
     c4e:	c7 01       	movw	r24, r14
     c50:	b6 01       	movw	r22, r12
     c52:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__cmpsf2>
     c56:	81 11       	cpse	r24, r1
     c58:	07 c0       	rjmp	.+14     	; 0xc68 <sample_input_wave+0x66>
     c5a:	8f e7       	ldi	r24, 0x7F	; 127
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <sample_input_wave+0x5c>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <sample_input_wave+0x62>
     c64:	00 00       	nop
     c66:	10 c0       	rjmp	.+32     	; 0xc88 <sample_input_wave+0x86>
		else if(ms_per_div==2.0) _delay_us(210);
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	50 e4       	ldi	r21, 0x40	; 64
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__cmpsf2>
     c78:	81 11       	cpse	r24, r1
     c7a:	06 c0       	rjmp	.+12     	; 0xc88 <sample_input_wave+0x86>
     c7c:	87 e4       	ldi	r24, 0x47	; 71
     c7e:	93 e0       	ldi	r25, 0x03	; 3
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <sample_input_wave+0x7e>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <sample_input_wave+0x84>
     c86:	00 00       	nop
		// << HINT >> : You can make use of "ms_per_div" value and Nyquist criteria to determine the sampling frequency and
		// 				increase or decrease the waveform width	based on the status of DIV+ and DIV- switches.
		//				Although, this feature is "not mandatory" (optional) to have.
		// << NOTE >> : You can strive for accurately displaying the waveform based on "ms_per_div" value,
		//				but while evaluation the "ms_per_div" value won't be considered, so you may not pay much attention to it.
		buffer_input_data[i] = convert_analog_channel_data(dso_input_channel_pin);
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	5b de       	rcall	.-842    	; 0x942 <convert_analog_channel_data>
     c8c:	fe 01       	movw	r30, r28
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	e0 57       	subi	r30, 0x70	; 112
     c94:	fc 4f       	sbci	r31, 0xFC	; 252
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
 * @brief      Sample the waveform from the DSO input channel and store the data in a buffer array.
 */
void sample_input_wave(void)
{
	// << TODO >> : Complete the logic in function as expected in the comment above.
	for (int i = 0; i < 192; i++)
     c9c:	21 96       	adiw	r28, 0x01	; 1
     c9e:	c0 3c       	cpi	r28, 0xC0	; 192
     ca0:	d1 05       	cpc	r29, r1
     ca2:	0c f4       	brge	.+2      	; 0xca6 <sample_input_wave+0xa4>
     ca4:	b7 cf       	rjmp	.-146    	; 0xc14 <sample_input_wave+0x12>
		//				Although, this feature is "not mandatory" (optional) to have.
		// << NOTE >> : You can strive for accurately displaying the waveform based on "ms_per_div" value,
		//				but while evaluation the "ms_per_div" value won't be considered, so you may not pay much attention to it.
		buffer_input_data[i] = convert_analog_channel_data(dso_input_channel_pin);
	}
}
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	df 90       	pop	r13
     cb0:	cf 90       	pop	r12
     cb2:	08 95       	ret

00000cb4 <calc_vpp_vmid>:
 */
void calc_vpp_vmid(void)
{
	// << TODO >> : Complete the logic in function as expected in the comment above.

	V_max = 0;
     cb4:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <V_max+0x1>
     cb8:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <V_max>
	V_min = 255;   // I changed this value to 255 because the logic I used required this.
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <V_min+0x1>
     cc4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <V_min>
	// calculate these values:
	// V_max : value in buffer array that is maximum of the amplitude
	// V_min : value in buffer array that is minimum of the amplitude
	
	// Simple logic to find the maximum and minimum of the array by traversing it.
	for(int i=0;i<192;i++){
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	20 c0       	rjmp	.+64     	; 0xd0e <calc_vpp_vmid+0x5a>
		V_max=V_max>buffer_input_data[i]?V_max:buffer_input_data[i];
     cce:	fc 01       	movw	r30, r24
     cd0:	ee 0f       	add	r30, r30
     cd2:	ff 1f       	adc	r31, r31
     cd4:	e0 57       	subi	r30, 0x70	; 112
     cd6:	fc 4f       	sbci	r31, 0xFC	; 252
     cd8:	20 81       	ld	r18, Z
     cda:	31 81       	ldd	r19, Z+1	; 0x01
     cdc:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <V_max>
     ce0:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <V_max+0x1>
     ce4:	42 17       	cp	r20, r18
     ce6:	53 07       	cpc	r21, r19
     ce8:	0c f4       	brge	.+2      	; 0xcec <calc_vpp_vmid+0x38>
     cea:	a9 01       	movw	r20, r18
     cec:	50 93 8b 03 	sts	0x038B, r21	; 0x80038b <V_max+0x1>
     cf0:	40 93 8a 03 	sts	0x038A, r20	; 0x80038a <V_max>
		V_min=V_min<buffer_input_data[i]?V_min:buffer_input_data[i];
     cf4:	40 91 c4 02 	lds	r20, 0x02C4	; 0x8002c4 <V_min>
     cf8:	50 91 c5 02 	lds	r21, 0x02C5	; 0x8002c5 <V_min+0x1>
     cfc:	24 17       	cp	r18, r20
     cfe:	35 07       	cpc	r19, r21
     d00:	0c f4       	brge	.+2      	; 0xd04 <calc_vpp_vmid+0x50>
     d02:	a9 01       	movw	r20, r18
     d04:	50 93 c5 02 	sts	0x02C5, r21	; 0x8002c5 <V_min+0x1>
     d08:	40 93 c4 02 	sts	0x02C4, r20	; 0x8002c4 <V_min>
	// calculate these values:
	// V_max : value in buffer array that is maximum of the amplitude
	// V_min : value in buffer array that is minimum of the amplitude
	
	// Simple logic to find the maximum and minimum of the array by traversing it.
	for(int i=0;i<192;i++){
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	80 3c       	cpi	r24, 0xC0	; 192
     d10:	91 05       	cpc	r25, r1
     d12:	ec f2       	brlt	.-70     	; 0xcce <calc_vpp_vmid+0x1a>
		V_max=V_max>buffer_input_data[i]?V_max:buffer_input_data[i];
		V_min=V_min<buffer_input_data[i]?V_min:buffer_input_data[i];
	}

	// calculate V_mid : value in buffer array that is half of the amplitude
	V_mid = (V_max+V_min)/2;
     d14:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <V_max>
     d18:	70 91 8b 03 	lds	r23, 0x038B	; 0x80038b <V_max+0x1>
     d1c:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <V_min>
     d20:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <V_min+0x1>
     d24:	cb 01       	movw	r24, r22
     d26:	82 0f       	add	r24, r18
     d28:	93 1f       	adc	r25, r19
     d2a:	99 23       	and	r25, r25
     d2c:	0c f4       	brge	.+2      	; 0xd30 <calc_vpp_vmid+0x7c>
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	95 95       	asr	r25
     d32:	87 95       	ror	r24
     d34:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <V_mid+0x1>
     d38:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <V_mid>

	// calculate V_pp : value in Volts for the peak-to-peak amplitude of the input waveform
	V_pp = (V_max-V_min)*0.0196;     // 0.0196 is the conversion factor after calculating 5/255
     d3c:	62 1b       	sub	r22, r18
     d3e:	73 0b       	sbc	r23, r19
     d40:	07 2e       	mov	r0, r23
     d42:	00 0c       	add	r0, r0
     d44:	88 0b       	sbc	r24, r24
     d46:	99 0b       	sbc	r25, r25
     d48:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
     d4c:	2e e2       	ldi	r18, 0x2E	; 46
     d4e:	30 e9       	ldi	r19, 0x90	; 144
     d50:	40 ea       	ldi	r20, 0xA0	; 160
     d52:	5c e3       	ldi	r21, 0x3C	; 60
     d54:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     d58:	60 93 86 03 	sts	0x0386, r22	; 0x800386 <V_pp>
     d5c:	70 93 87 03 	sts	0x0387, r23	; 0x800387 <V_pp+0x1>
     d60:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <V_pp+0x2>
     d64:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <V_pp+0x3>
     d68:	08 95       	ret

00000d6a <calc_start_end_wave_idx>:

	// compute the values of start_wave_idx and end_wave_idx

	/* V_mid won't actually always be present in the array since we have calculated it so we search the two consecutive values in the array between which the
    the V_mid value lies. And we do it twice so that we can find the start and end index of a wave */
	for(int i=0;i<191;i++){
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	1f c0       	rjmp	.+62     	; 0xdae <calc_start_end_wave_idx+0x44>
		if(buffer_input_data[i]<V_mid && buffer_input_data[i+1]>=V_mid){
     d70:	fc 01       	movw	r30, r24
     d72:	ee 0f       	add	r30, r30
     d74:	ff 1f       	adc	r31, r31
     d76:	e0 57       	subi	r30, 0x70	; 112
     d78:	fc 4f       	sbci	r31, 0xFC	; 252
     d7a:	40 81       	ld	r20, Z
     d7c:	51 81       	ldd	r21, Z+1	; 0x01
     d7e:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <V_mid>
     d82:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <V_mid+0x1>
     d86:	42 17       	cp	r20, r18
     d88:	53 07       	cpc	r21, r19
     d8a:	84 f4       	brge	.+32     	; 0xdac <calc_start_end_wave_idx+0x42>
     d8c:	fc 01       	movw	r30, r24
     d8e:	31 96       	adiw	r30, 0x01	; 1
     d90:	ee 0f       	add	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	e0 57       	subi	r30, 0x70	; 112
     d96:	fc 4f       	sbci	r31, 0xFC	; 252
     d98:	40 81       	ld	r20, Z
     d9a:	51 81       	ldd	r21, Z+1	; 0x01
     d9c:	42 17       	cp	r20, r18
     d9e:	53 07       	cpc	r21, r19
     da0:	2c f0       	brlt	.+10     	; 0xdac <calc_start_end_wave_idx+0x42>
			start_wave_idx=i;
     da2:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <start_wave_idx+0x1>
     da6:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <start_wave_idx>
			break;
     daa:	04 c0       	rjmp	.+8      	; 0xdb4 <calc_start_end_wave_idx+0x4a>

	// compute the values of start_wave_idx and end_wave_idx

	/* V_mid won't actually always be present in the array since we have calculated it so we search the two consecutive values in the array between which the
    the V_mid value lies. And we do it twice so that we can find the start and end index of a wave */
	for(int i=0;i<191;i++){
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	8f 3b       	cpi	r24, 0xBF	; 191
     db0:	91 05       	cpc	r25, r1
     db2:	f4 f2       	brlt	.-68     	; 0xd70 <calc_start_end_wave_idx+0x6>
		if(buffer_input_data[i]<V_mid && buffer_input_data[i+1]>=V_mid){
			start_wave_idx=i;
			break;
		}
	}
	for(int j=start_wave_idx+1;j<191;j++){
     db4:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <start_wave_idx>
     db8:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <start_wave_idx+0x1>
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	1f c0       	rjmp	.+62     	; 0xdfe <calc_start_end_wave_idx+0x94>
		if(buffer_input_data[j]<V_mid && buffer_input_data[j+1]>=V_mid){
     dc0:	fc 01       	movw	r30, r24
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	e0 57       	subi	r30, 0x70	; 112
     dc8:	fc 4f       	sbci	r31, 0xFC	; 252
     dca:	40 81       	ld	r20, Z
     dcc:	51 81       	ldd	r21, Z+1	; 0x01
     dce:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <V_mid>
     dd2:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <V_mid+0x1>
     dd6:	42 17       	cp	r20, r18
     dd8:	53 07       	cpc	r21, r19
     dda:	84 f4       	brge	.+32     	; 0xdfc <calc_start_end_wave_idx+0x92>
     ddc:	fc 01       	movw	r30, r24
     dde:	31 96       	adiw	r30, 0x01	; 1
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	e0 57       	subi	r30, 0x70	; 112
     de6:	fc 4f       	sbci	r31, 0xFC	; 252
     de8:	40 81       	ld	r20, Z
     dea:	51 81       	ldd	r21, Z+1	; 0x01
     dec:	42 17       	cp	r20, r18
     dee:	53 07       	cpc	r21, r19
     df0:	2c f0       	brlt	.+10     	; 0xdfc <calc_start_end_wave_idx+0x92>
			end_wave_idx=j;
     df2:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <end_wave_idx+0x1>
     df6:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <end_wave_idx>
			break;
     dfa:	08 95       	ret
		if(buffer_input_data[i]<V_mid && buffer_input_data[i+1]>=V_mid){
			start_wave_idx=i;
			break;
		}
	}
	for(int j=start_wave_idx+1;j<191;j++){
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	8f 3b       	cpi	r24, 0xBF	; 191
     e00:	91 05       	cpc	r25, r1
     e02:	f4 f2       	brlt	.-68     	; 0xdc0 <calc_start_end_wave_idx+0x56>
     e04:	08 95       	ret

00000e06 <calc_frequency>:

/**
 * @brief      Find the frequency of input waveform
 */
void calc_frequency(void)
{
     e06:	cf 92       	push	r12
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
	
	/* now after adding some delay to when we increase or decrease the ms_per_div we need to add some factor to the frequency equation so that it doesn't change when
	we change the ms_per_div. Ideally these should be just factors 8 but on the simulation the frequencies displayed were not as desired so I added some more factors
	to counter that.
	Also these factors works really well most of the time for my laptop :)*/
	if(ms_per_div==0.5) freq = (8/((end_wave_idx-start_wave_idx)*ms_per_div))*0.875;
     e0e:	c0 90 04 02 	lds	r12, 0x0204	; 0x800204 <ms_per_div>
     e12:	d0 90 05 02 	lds	r13, 0x0205	; 0x800205 <ms_per_div+0x1>
     e16:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <ms_per_div+0x2>
     e1a:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <ms_per_div+0x3>
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	5f e3       	ldi	r21, 0x3F	; 63
     e26:	c7 01       	movw	r24, r14
     e28:	b6 01       	movw	r22, r12
     e2a:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__cmpsf2>
     e2e:	81 11       	cpse	r24, r1
     e30:	2b c0       	rjmp	.+86     	; 0xe88 <calc_frequency+0x82>
     e32:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <end_wave_idx>
     e36:	70 91 8d 03 	lds	r23, 0x038D	; 0x80038d <end_wave_idx+0x1>
     e3a:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <start_wave_idx>
     e3e:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <start_wave_idx+0x1>
     e42:	68 1b       	sub	r22, r24
     e44:	79 0b       	sbc	r23, r25
     e46:	07 2e       	mov	r0, r23
     e48:	00 0c       	add	r0, r0
     e4a:	88 0b       	sbc	r24, r24
     e4c:	99 0b       	sbc	r25, r25
     e4e:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
     e52:	a7 01       	movw	r20, r14
     e54:	96 01       	movw	r18, r12
     e56:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     e5a:	9b 01       	movw	r18, r22
     e5c:	ac 01       	movw	r20, r24
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	91 e4       	ldi	r25, 0x41	; 65
     e66:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__divsf3>
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e6       	ldi	r20, 0x60	; 96
     e70:	5f e3       	ldi	r21, 0x3F	; 63
     e72:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     e76:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <freq>
     e7a:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <freq+0x1>
     e7e:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <freq+0x2>
     e82:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <freq+0x3>
     e86:	9e c0       	rjmp	.+316    	; 0xfc4 <calc_frequency+0x1be>
	else if(ms_per_div==1.0) freq = (16/((end_wave_idx-start_wave_idx)*ms_per_div))*0.406;
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e8       	ldi	r20, 0x80	; 128
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	c7 01       	movw	r24, r14
     e92:	b6 01       	movw	r22, r12
     e94:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__cmpsf2>
     e98:	81 11       	cpse	r24, r1
     e9a:	2b c0       	rjmp	.+86     	; 0xef2 <calc_frequency+0xec>
     e9c:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <end_wave_idx>
     ea0:	70 91 8d 03 	lds	r23, 0x038D	; 0x80038d <end_wave_idx+0x1>
     ea4:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <start_wave_idx>
     ea8:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <start_wave_idx+0x1>
     eac:	68 1b       	sub	r22, r24
     eae:	79 0b       	sbc	r23, r25
     eb0:	07 2e       	mov	r0, r23
     eb2:	00 0c       	add	r0, r0
     eb4:	88 0b       	sbc	r24, r24
     eb6:	99 0b       	sbc	r25, r25
     eb8:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
     ebc:	a7 01       	movw	r20, r14
     ebe:	96 01       	movw	r18, r12
     ec0:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     ec4:	9b 01       	movw	r18, r22
     ec6:	ac 01       	movw	r20, r24
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	80 e8       	ldi	r24, 0x80	; 128
     ece:	91 e4       	ldi	r25, 0x41	; 65
     ed0:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__divsf3>
     ed4:	2b e3       	ldi	r18, 0x3B	; 59
     ed6:	3f ed       	ldi	r19, 0xDF	; 223
     ed8:	4f ec       	ldi	r20, 0xCF	; 207
     eda:	5e e3       	ldi	r21, 0x3E	; 62
     edc:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     ee0:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <freq>
     ee4:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <freq+0x1>
     ee8:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <freq+0x2>
     eec:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <freq+0x3>
     ef0:	69 c0       	rjmp	.+210    	; 0xfc4 <calc_frequency+0x1be>
	else if(ms_per_div==1.5) freq = (24/((end_wave_idx-start_wave_idx)*ms_per_div))*0.250;
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 ec       	ldi	r20, 0xC0	; 192
     ef8:	5f e3       	ldi	r21, 0x3F	; 63
     efa:	c7 01       	movw	r24, r14
     efc:	b6 01       	movw	r22, r12
     efe:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__cmpsf2>
     f02:	81 11       	cpse	r24, r1
     f04:	2b c0       	rjmp	.+86     	; 0xf5c <calc_frequency+0x156>
     f06:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <end_wave_idx>
     f0a:	70 91 8d 03 	lds	r23, 0x038D	; 0x80038d <end_wave_idx+0x1>
     f0e:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <start_wave_idx>
     f12:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <start_wave_idx+0x1>
     f16:	68 1b       	sub	r22, r24
     f18:	79 0b       	sbc	r23, r25
     f1a:	07 2e       	mov	r0, r23
     f1c:	00 0c       	add	r0, r0
     f1e:	88 0b       	sbc	r24, r24
     f20:	99 0b       	sbc	r25, r25
     f22:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
     f26:	a7 01       	movw	r20, r14
     f28:	96 01       	movw	r18, r12
     f2a:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     f2e:	9b 01       	movw	r18, r22
     f30:	ac 01       	movw	r20, r24
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	80 ec       	ldi	r24, 0xC0	; 192
     f38:	91 e4       	ldi	r25, 0x41	; 65
     f3a:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__divsf3>
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e8       	ldi	r20, 0x80	; 128
     f44:	5e e3       	ldi	r21, 0x3E	; 62
     f46:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     f4a:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <freq>
     f4e:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <freq+0x1>
     f52:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <freq+0x2>
     f56:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <freq+0x3>
     f5a:	34 c0       	rjmp	.+104    	; 0xfc4 <calc_frequency+0x1be>
	else if(ms_per_div==2.0) freq = (32/((end_wave_idx-start_wave_idx)*ms_per_div))*0.218;
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	50 e4       	ldi	r21, 0x40	; 64
     f64:	c7 01       	movw	r24, r14
     f66:	b6 01       	movw	r22, r12
     f68:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__cmpsf2>
     f6c:	81 11       	cpse	r24, r1
     f6e:	2a c0       	rjmp	.+84     	; 0xfc4 <calc_frequency+0x1be>
     f70:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <end_wave_idx>
     f74:	70 91 8d 03 	lds	r23, 0x038D	; 0x80038d <end_wave_idx+0x1>
     f78:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <start_wave_idx>
     f7c:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <start_wave_idx+0x1>
     f80:	68 1b       	sub	r22, r24
     f82:	79 0b       	sbc	r23, r25
     f84:	07 2e       	mov	r0, r23
     f86:	00 0c       	add	r0, r0
     f88:	88 0b       	sbc	r24, r24
     f8a:	99 0b       	sbc	r25, r25
     f8c:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
     f90:	a7 01       	movw	r20, r14
     f92:	96 01       	movw	r18, r12
     f94:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     f98:	9b 01       	movw	r18, r22
     f9a:	ac 01       	movw	r20, r24
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	92 e4       	ldi	r25, 0x42	; 66
     fa4:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__divsf3>
     fa8:	24 e6       	ldi	r18, 0x64	; 100
     faa:	3b e3       	ldi	r19, 0x3B	; 59
     fac:	4f e5       	ldi	r20, 0x5F	; 95
     fae:	5e e3       	ldi	r21, 0x3E	; 62
     fb0:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
     fb4:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <freq>
     fb8:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <freq+0x1>
     fbc:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <freq+0x2>
     fc0:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <freq+0x3>
	
}
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	08 95       	ret

00000fce <measure_parameters>:
void measure_parameters(void)
{
	// << NOTE >> : You are not allowed to modify or change anything inside this function

	// calculate the V_pp (peak-to-peak) voltage in Volts and the V_mid (value from buffer array which is half the amplitude)
	calc_vpp_vmid();
     fce:	72 de       	rcall	.-796    	; 0xcb4 <calc_vpp_vmid>

	// calculate the index values from buffer array where the "first" wave in given waveform starts (start_wave_idx) and ends (end_wave_idx) its cycle
	calc_start_end_wave_idx();
     fd0:	cc de       	rcall	.-616    	; 0xd6a <calc_start_end_wave_idx>

	// calculate the frequency of input waveform in kHz unit
	calc_frequency();
     fd2:	19 cf       	rjmp	.-462    	; 0xe06 <calc_frequency>
     fd4:	08 95       	ret

00000fd6 <translate_wave_to_pixels>:
     fd6:	20 e0       	ldi	r18, 0x00	; 0
{
	// << TODO >> : Complete the logic in function as expected in the comment above.
	// << NOTE >> : Make sure the computed pixel locations for the waveform are symmetric about the center horizontal line
	
	// Here we translate only the first half of the array since we have pixel data array size half of the input data buffer array.
	for(int i=0;i<96;i++){
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	23 c0       	rjmp	.+70     	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
		pixel_loc[i]=32-(buffer_input_data[i]-V_mid)/4;
     fdc:	f9 01       	movw	r30, r18
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	e0 57       	subi	r30, 0x70	; 112
     fe4:	fc 4f       	sbci	r31, 0xFC	; 252
     fe6:	40 81       	ld	r20, Z
     fe8:	51 81       	ldd	r21, Z+1	; 0x01
     fea:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <V_mid>
     fee:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <V_mid+0x1>
     ff2:	48 1b       	sub	r20, r24
     ff4:	59 0b       	sbc	r21, r25
     ff6:	ca 01       	movw	r24, r20
     ff8:	99 23       	and	r25, r25
     ffa:	0c f4       	brge	.+2      	; 0xffe <translate_wave_to_pixels+0x28>
     ffc:	03 96       	adiw	r24, 0x03	; 3
     ffe:	95 95       	asr	r25
    1000:	87 95       	ror	r24
    1002:	95 95       	asr	r25
    1004:	87 95       	ror	r24
    1006:	40 e2       	ldi	r20, 0x20	; 32
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	ba 01       	movw	r22, r20
    100c:	68 1b       	sub	r22, r24
    100e:	79 0b       	sbc	r23, r25
    1010:	f9 01       	movw	r30, r18
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	ea 53       	subi	r30, 0x3A	; 58
    1018:	fd 4f       	sbci	r31, 0xFD	; 253
    101a:	71 83       	std	Z+1, r23	; 0x01
    101c:	60 83       	st	Z, r22
{
	// << TODO >> : Complete the logic in function as expected in the comment above.
	// << NOTE >> : Make sure the computed pixel locations for the waveform are symmetric about the center horizontal line
	
	// Here we translate only the first half of the array since we have pixel data array size half of the input data buffer array.
	for(int i=0;i<96;i++){
    101e:	2f 5f       	subi	r18, 0xFF	; 255
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
    1022:	20 36       	cpi	r18, 0x60	; 96
    1024:	31 05       	cpc	r19, r1
    1026:	d4 f2       	brlt	.-76     	; 0xfdc <translate_wave_to_pixels+0x6>
		pixel_loc[i]=32-(buffer_input_data[i]-V_mid)/4;
	}
}
    1028:	08 95       	ret

0000102a <draw_ref_frame>:
/**
 * @brief      Draw the reference frame in "Display Waveform" Area for easy view of the input waveform
 * 			   with equal divisions for Time in msec (on X-axis) and Voltage level in Volts (on Y-axis)
 */
void draw_ref_frame(void)
{
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
	// << NOTE >> : You are not allowed to modify or change anything inside this function

	// drawing outer boundary or rectangle in the "Display Waveform" Area of 96 (columns) x 64 (rows)
	drawFrame(0, 0, 95, 63);
    1032:	2f e3       	ldi	r18, 0x3F	; 63
    1034:	4f e5       	ldi	r20, 0x5F	; 95
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	07 d2       	rcall	.+1038   	; 0x144a <drawFrame>

	// drawing the center horizontal and vertical line for reference and symmetricity
	drawLine(48, 0, 48, 63);
    103c:	2f e3       	ldi	r18, 0x3F	; 63
    103e:	40 e3       	ldi	r20, 0x30	; 48
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	80 e3       	ldi	r24, 0x30	; 48
    1044:	0d d2       	rcall	.+1050   	; 0x1460 <drawLine>
	drawLine(0, 32, 95, 32);
    1046:	20 e2       	ldi	r18, 0x20	; 32
    1048:	4f e5       	ldi	r20, 0x5F	; 95
    104a:	60 e2       	ldi	r22, 0x20	; 32
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	08 d2       	rcall	.+1040   	; 0x1460 <drawLine>

	// drawing short vertical lines or markings on center horizontal line with equal divisions for Time in msec
	for (int x = 0; x < 97; x += 8)
    1050:	c0 e0       	ldi	r28, 0x00	; 0
    1052:	d0 e0       	ldi	r29, 0x00	; 0
    1054:	06 c0       	rjmp	.+12     	; 0x1062 <draw_ref_frame+0x38>
		drawLine(x, 31, x, 33);
    1056:	21 e2       	ldi	r18, 0x21	; 33
    1058:	4c 2f       	mov	r20, r28
    105a:	6f e1       	ldi	r22, 0x1F	; 31
    105c:	8c 2f       	mov	r24, r28
    105e:	00 d2       	rcall	.+1024   	; 0x1460 <drawLine>
	// drawing the center horizontal and vertical line for reference and symmetricity
	drawLine(48, 0, 48, 63);
	drawLine(0, 32, 95, 32);

	// drawing short vertical lines or markings on center horizontal line with equal divisions for Time in msec
	for (int x = 0; x < 97; x += 8)
    1060:	28 96       	adiw	r28, 0x08	; 8
    1062:	c1 36       	cpi	r28, 0x61	; 97
    1064:	d1 05       	cpc	r29, r1
    1066:	bc f3       	brlt	.-18     	; 0x1056 <draw_ref_frame+0x2c>
    1068:	c0 e0       	ldi	r28, 0x00	; 0
    106a:	d0 e0       	ldi	r29, 0x00	; 0
    106c:	06 c0       	rjmp	.+12     	; 0x107a <draw_ref_frame+0x50>
		drawLine(x, 31, x, 33);
	
	// drawing short horizontal lines or markings on center vertical line with equal divisions for Voltage level in Volts
	for (int y = 0 ; y < 64; y += 8)
		drawLine(47, y, 49, y);
    106e:	2c 2f       	mov	r18, r28
    1070:	41 e3       	ldi	r20, 0x31	; 49
    1072:	6c 2f       	mov	r22, r28
    1074:	8f e2       	ldi	r24, 0x2F	; 47
    1076:	f4 d1       	rcall	.+1000   	; 0x1460 <drawLine>
	// drawing short vertical lines or markings on center horizontal line with equal divisions for Time in msec
	for (int x = 0; x < 97; x += 8)
		drawLine(x, 31, x, 33);
	
	// drawing short horizontal lines or markings on center vertical line with equal divisions for Voltage level in Volts
	for (int y = 0 ; y < 64; y += 8)
    1078:	28 96       	adiw	r28, 0x08	; 8
    107a:	c0 34       	cpi	r28, 0x40	; 64
    107c:	d1 05       	cpc	r29, r1
    107e:	bc f3       	brlt	.-18     	; 0x106e <draw_ref_frame+0x44>
    1080:	08 e0       	ldi	r16, 0x08	; 8
    1082:	10 e0       	ldi	r17, 0x00	; 0
	
	// plot small dots in all four quadrants for symmetricity in viewing the input waveform
	for (int x = 8; x < 96; x += 8)
	{
		for (int y=8; y < 64; y += 8)
			drawPixel(x,y);
    1084:	0c c0       	rjmp	.+24     	; 0x109e <draw_ref_frame+0x74>
    1086:	6c 2f       	mov	r22, r28
    1088:	80 2f       	mov	r24, r16
    108a:	f4 d1       	rcall	.+1000   	; 0x1474 <drawPixel>
		drawLine(47, y, 49, y);
	
	// plot small dots in all four quadrants for symmetricity in viewing the input waveform
	for (int x = 8; x < 96; x += 8)
	{
		for (int y=8; y < 64; y += 8)
    108c:	28 96       	adiw	r28, 0x08	; 8
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <draw_ref_frame+0x6a>
    1090:	c8 e0       	ldi	r28, 0x08	; 8
    1092:	d0 e0       	ldi	r29, 0x00	; 0
    1094:	c0 34       	cpi	r28, 0x40	; 64
    1096:	d1 05       	cpc	r29, r1
    1098:	b4 f3       	brlt	.-20     	; 0x1086 <draw_ref_frame+0x5c>
	// drawing short horizontal lines or markings on center vertical line with equal divisions for Voltage level in Volts
	for (int y = 0 ; y < 64; y += 8)
		drawLine(47, y, 49, y);
	
	// plot small dots in all four quadrants for symmetricity in viewing the input waveform
	for (int x = 8; x < 96; x += 8)
    109a:	08 5f       	subi	r16, 0xF8	; 248
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
    109e:	00 36       	cpi	r16, 0x60	; 96
    10a0:	11 05       	cpc	r17, r1
    10a2:	b4 f3       	brlt	.-20     	; 0x1090 <draw_ref_frame+0x66>
	{
		for (int y=8; y < 64; y += 8)
			drawPixel(x,y);
	}
}
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	08 95       	ret

000010ae <draw_waveform>:
/**
 * @brief      Draw the input waveform data points translated to pixel locations in "Display Waveform" area
 * 			   Make use of "drawLine" function from u8g library to connect the pixel dots or data points so the input waveform is visualized
 */
void draw_waveform(void)
{
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
	// << NOTE >> : Apply the vertical displacement to waveform based on the "vert_disp" value
	
	// we draw the waveform by drawing vertical lines joining consecutive points.
	// The if conditions ensure that once the wave reaches the upper limit of the display, then those vertical lines originating from the point of contact of the wave
	// and the upper limit of the display don't appear on the screen.
	for(int i=0;i<95;i++){
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	23 c0       	rjmp	.+70     	; 0x10fe <draw_waveform+0x50>
		int y1=pixel_loc[i]+vert_disp;
    10b8:	fc 01       	movw	r30, r24
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	ea 53       	subi	r30, 0x3A	; 58
    10c0:	fd 4f       	sbci	r31, 0xFD	; 253
    10c2:	60 81       	ld	r22, Z
    10c4:	71 81       	ldd	r23, Z+1	; 0x01
    10c6:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <__data_end>
    10ca:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <__data_end+0x1>
    10ce:	64 0f       	add	r22, r20
    10d0:	75 1f       	adc	r23, r21
		int y2=pixel_loc[i+1]+vert_disp;
    10d2:	ec 01       	movw	r28, r24
    10d4:	21 96       	adiw	r28, 0x01	; 1
    10d6:	fe 01       	movw	r30, r28
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	ea 53       	subi	r30, 0x3A	; 58
    10de:	fd 4f       	sbci	r31, 0xFD	; 253
    10e0:	20 81       	ld	r18, Z
    10e2:	31 81       	ldd	r19, Z+1	; 0x01
    10e4:	24 0f       	add	r18, r20
    10e6:	35 1f       	adc	r19, r21
		if(pixel_loc[i]+vert_disp<0) y1=0;
    10e8:	77 23       	and	r23, r23
    10ea:	14 f4       	brge	.+4      	; 0x10f0 <draw_waveform+0x42>
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
		if(pixel_loc[i+1]+vert_disp<0) y2=0;
    10f0:	33 23       	and	r19, r19
    10f2:	14 f4       	brge	.+4      	; 0x10f8 <draw_waveform+0x4a>
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
		drawLine(i,y1,i,y2);
    10f8:	48 2f       	mov	r20, r24
    10fa:	b2 d1       	rcall	.+868    	; 0x1460 <drawLine>
	// << NOTE >> : Apply the vertical displacement to waveform based on the "vert_disp" value
	
	// we draw the waveform by drawing vertical lines joining consecutive points.
	// The if conditions ensure that once the wave reaches the upper limit of the display, then those vertical lines originating from the point of contact of the wave
	// and the upper limit of the display don't appear on the screen.
	for(int i=0;i<95;i++){
    10fc:	ce 01       	movw	r24, r28
    10fe:	8f 35       	cpi	r24, 0x5F	; 95
    1100:	91 05       	cpc	r25, r1
    1102:	d4 f2       	brlt	.-76     	; 0x10b8 <draw_waveform+0xa>
		int y2=pixel_loc[i+1]+vert_disp;
		if(pixel_loc[i]+vert_disp<0) y1=0;
		if(pixel_loc[i+1]+vert_disp<0) y2=0;
		drawLine(i,y1,i,y2);
	}
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <display_wave_info_text_data>:
 */
void display_wave_info_text_data(void)
{
	// << NOTE >> : You are not allowed to modify or change anything inside this function

	drawStr(96, 7, "ms/div");
    110a:	40 e2       	ldi	r20, 0x20	; 32
    110c:	52 e0       	ldi	r21, 0x02	; 2
    110e:	67 e0       	ldi	r22, 0x07	; 7
    1110:	80 e6       	ldi	r24, 0x60	; 96
    1112:	b6 d1       	rcall	.+876    	; 0x1480 <drawStr>
	setPrintPos(96, 14);
    1114:	6e e0       	ldi	r22, 0x0E	; 14
    1116:	80 e6       	ldi	r24, 0x60	; 96
    1118:	ca d0       	rcall	.+404    	; 0x12ae <setPrintPos>
	print_float(ms_per_div, 3);
    111a:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <ms_per_div>
    111e:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <ms_per_div+0x1>
    1122:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <ms_per_div+0x2>
    1126:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <ms_per_div+0x3>
    112a:	43 e0       	ldi	r20, 0x03	; 3
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	69 d1       	rcall	.+722    	; 0x1402 <print_float>

	drawStr(96, 23, "V/div");
    1130:	47 e2       	ldi	r20, 0x27	; 39
    1132:	52 e0       	ldi	r21, 0x02	; 2
    1134:	67 e1       	ldi	r22, 0x17	; 23
    1136:	80 e6       	ldi	r24, 0x60	; 96
	setPrintPos(96, 30);
    1138:	a3 d1       	rcall	.+838    	; 0x1480 <drawStr>
    113a:	6e e1       	ldi	r22, 0x1E	; 30
    113c:	80 e6       	ldi	r24, 0x60	; 96
    113e:	b7 d0       	rcall	.+366    	; 0x12ae <setPrintPos>
	print_float(volts_per_div, 3);
    1140:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1144:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1148:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    114c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1150:	43 e0       	ldi	r20, 0x03	; 3
    1152:	50 e0       	ldi	r21, 0x00	; 0
	
	drawStr(96, 40, "Vpp");
    1154:	56 d1       	rcall	.+684    	; 0x1402 <print_float>
    1156:	4d e2       	ldi	r20, 0x2D	; 45
    1158:	52 e0       	ldi	r21, 0x02	; 2
    115a:	68 e2       	ldi	r22, 0x28	; 40
    115c:	80 e6       	ldi	r24, 0x60	; 96
	setPrintPos(96, 47);
    115e:	90 d1       	rcall	.+800    	; 0x1480 <drawStr>
    1160:	6f e2       	ldi	r22, 0x2F	; 47
    1162:	80 e6       	ldi	r24, 0x60	; 96
    1164:	a4 d0       	rcall	.+328    	; 0x12ae <setPrintPos>
	print_float(V_pp, 3);
    1166:	60 91 86 03 	lds	r22, 0x0386	; 0x800386 <V_pp>
    116a:	70 91 87 03 	lds	r23, 0x0387	; 0x800387 <V_pp+0x1>
    116e:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <V_pp+0x2>
    1172:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <V_pp+0x3>
    1176:	43 e0       	ldi	r20, 0x03	; 3
    1178:	50 e0       	ldi	r21, 0x00	; 0
	drawStr(123, 47, "V");
    117a:	43 d1       	rcall	.+646    	; 0x1402 <print_float>
    117c:	41 e3       	ldi	r20, 0x31	; 49
    117e:	52 e0       	ldi	r21, 0x02	; 2
    1180:	6f e2       	ldi	r22, 0x2F	; 47
	
	drawStr(96, 55, "f(kHz)");
    1182:	8b e7       	ldi	r24, 0x7B	; 123
    1184:	7d d1       	rcall	.+762    	; 0x1480 <drawStr>
    1186:	43 e3       	ldi	r20, 0x33	; 51
    1188:	52 e0       	ldi	r21, 0x02	; 2
    118a:	67 e3       	ldi	r22, 0x37	; 55
    118c:	80 e6       	ldi	r24, 0x60	; 96
	setPrintPos(96, 62);
    118e:	78 d1       	rcall	.+752    	; 0x1480 <drawStr>
    1190:	6e e3       	ldi	r22, 0x3E	; 62
    1192:	80 e6       	ldi	r24, 0x60	; 96
	print_float(freq, 3);
    1194:	8c d0       	rcall	.+280    	; 0x12ae <setPrintPos>
    1196:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <freq>
    119a:	70 91 c1 02 	lds	r23, 0x02C1	; 0x8002c1 <freq+0x1>
    119e:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <freq+0x2>
    11a2:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <freq+0x3>
    11a6:	43 e0       	ldi	r20, 0x03	; 3
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	2b c1       	rjmp	.+598    	; 0x1402 <print_float>
    11ac:	08 95       	ret

000011ae <dso_display_waveform_data>:
{
	// << NOTE >> : You are not allowed to modify or change the "do-while" loop
	// << TODO >> : You can although add a condition to hold the running wave on press of HOLD switch
	
	// I was confused what to add here since the hold switch works fine. So i decided not to add anything.
	firstPage();
    11ae:	74 d1       	rcall	.+744    	; 0x1498 <firstPage>
	do
	{
		// display the reference frame
		draw_ref_frame();
    11b0:	3c df       	rcall	.-392    	; 0x102a <draw_ref_frame>

		// display the waveform as close and identical as possible with the input waveform by Function Generator
		draw_waveform();
    11b2:	7d df       	rcall	.-262    	; 0x10ae <draw_waveform>

		// display the waveform info text and data of measured parameters
		display_wave_info_text_data();
    11b4:	aa df       	rcall	.-172    	; 0x110a <display_wave_info_text_data>
    11b6:	74 d1       	rcall	.+744    	; 0x14a0 <nextPage>
	}
	while( nextPage() );
    11b8:	81 11       	cpse	r24, r1
    11ba:	fa cf       	rjmp	.-12     	; 0x11b0 <dso_display_waveform_data+0x2>
    11bc:	08 95       	ret

000011be <start_dso_operation>:
    11be:	21 dd       	rcall	.-1470   	; 0xc02 <sample_input_wave>
}
    11c0:	06 df       	rcall	.-500    	; 0xfce <measure_parameters>

	// measure various parameters of the given waveform
	measure_parameters();

	// convert the waveform data points to pixel coordinates of the GLCD
	translate_wave_to_pixels();
    11c2:	09 df       	rcall	.-494    	; 0xfd6 <translate_wave_to_pixels>
    11c4:	f4 cf       	rjmp	.-24     	; 0x11ae <dso_display_waveform_data>

	// display the waveform and data of measured parameters
	dso_display_waveform_data();
    11c6:	08 95       	ret

000011c8 <main>:
    11c8:	f8 db       	rcall	.-2064   	; 0x9ba <dso_init>
    11ca:	f1 dc       	rcall	.-1566   	; 0xbae <dso_start_screen>
	dso_init();
	dso_start_screen();

	while(1)
	{
		start_dso_operation();
    11cc:	f8 df       	rcall	.-16     	; 0x11be <start_dso_operation>
    11ce:	fe cf       	rjmp	.-4      	; 0x11cc <main+0x4>

000011d0 <sys_init>:
    11d0:	e1 e6       	ldi	r30, 0x61	; 97
u8g_uint_t print_int(int num)
{
  char data[128];
  sprintf(data,"%d",num);
  return u8g_DrawStr(&u8g,tx,ty,data);
}
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 e8       	ldi	r24, 0x80	; 128
    11d6:	80 83       	st	Z, r24
    11d8:	10 82       	st	Z, r1
    11da:	08 95       	ret

000011dc <glcd_setup>:
    11dc:	7f 92       	push	r7
    11de:	8f 92       	push	r8
    11e0:	9f 92       	push	r9
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec df       	rcall	.-40     	; 0x11d0 <sys_init>
    11f8:	65 e0       	ldi	r22, 0x05	; 5
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	38 d3       	rcall	.+1648   	; 0x186e <u8g_Pin>
    11fe:	78 2e       	mov	r7, r24
    1200:	61 e0       	ldi	r22, 0x01	; 1
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	34 d3       	rcall	.+1640   	; 0x186e <u8g_Pin>
    1206:	98 2e       	mov	r9, r24
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	30 d3       	rcall	.+1632   	; 0x186e <u8g_Pin>
    120e:	b8 2e       	mov	r11, r24
    1210:	64 e0       	ldi	r22, 0x04	; 4
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	2c d3       	rcall	.+1624   	; 0x186e <u8g_Pin>
    1216:	d8 2e       	mov	r13, r24
    1218:	63 e0       	ldi	r22, 0x03	; 3
    121a:	82 e0       	ldi	r24, 0x02	; 2
    121c:	28 d3       	rcall	.+1616   	; 0x186e <u8g_Pin>
    121e:	f8 2e       	mov	r15, r24
    1220:	62 e0       	ldi	r22, 0x02	; 2
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	24 d3       	rcall	.+1608   	; 0x186e <u8g_Pin>
    1226:	18 2f       	mov	r17, r24
    1228:	67 e0       	ldi	r22, 0x07	; 7
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	20 d3       	rcall	.+1600   	; 0x186e <u8g_Pin>
    122e:	d8 2f       	mov	r29, r24
    1230:	66 e0       	ldi	r22, 0x06	; 6
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	1c d3       	rcall	.+1592   	; 0x186e <u8g_Pin>
    1236:	88 2e       	mov	r8, r24
    1238:	65 e0       	ldi	r22, 0x05	; 5
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	18 d3       	rcall	.+1584   	; 0x186e <u8g_Pin>
    123e:	a8 2e       	mov	r10, r24
    1240:	64 e0       	ldi	r22, 0x04	; 4
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	14 d3       	rcall	.+1576   	; 0x186e <u8g_Pin>
    1246:	c8 2e       	mov	r12, r24
    1248:	63 e0       	ldi	r22, 0x03	; 3
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	10 d3       	rcall	.+1568   	; 0x186e <u8g_Pin>
    124e:	e8 2e       	mov	r14, r24
    1250:	62 e0       	ldi	r22, 0x02	; 2
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	0c d3       	rcall	.+1560   	; 0x186e <u8g_Pin>
    1256:	08 2f       	mov	r16, r24
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	08 d3       	rcall	.+1552   	; 0x186e <u8g_Pin>
    125e:	c8 2f       	mov	r28, r24
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	04 d3       	rcall	.+1544   	; 0x186e <u8g_Pin>
    1266:	7f 92       	push	r7
    1268:	9f 92       	push	r9
    126a:	bf 92       	push	r11
    126c:	df 92       	push	r13
    126e:	ff 92       	push	r15
    1270:	1f 93       	push	r17
    1272:	df 93       	push	r29
    1274:	2c 2f       	mov	r18, r28
    1276:	48 2f       	mov	r20, r24
    1278:	68 e0       	ldi	r22, 0x08	; 8
    127a:	72 e0       	ldi	r23, 0x02	; 2
    127c:	80 e1       	ldi	r24, 0x10	; 16
    127e:	95 e0       	ldi	r25, 0x05	; 5
    1280:	51 d7       	rcall	.+3746   	; 0x2124 <u8g_Init8Bit>
    1282:	8d b7       	in	r24, 0x3d	; 61
    1284:	9e b7       	in	r25, 0x3e	; 62
    1286:	07 96       	adiw	r24, 0x07	; 7
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	9e bf       	out	0x3e, r25	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	8d bf       	out	0x3d, r24	; 61
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	bf 90       	pop	r11
    12a4:	af 90       	pop	r10
    12a6:	9f 90       	pop	r9
    12a8:	8f 90       	pop	r8
    12aa:	7f 90       	pop	r7
    12ac:	08 95       	ret

000012ae <setPrintPos>:
    12ae:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <tx>
    12b2:	60 93 48 05 	sts	0x0548, r22	; 0x800548 <ty>
    12b6:	08 95       	ret

000012b8 <reverse>:
    12b8:	61 50       	subi	r22, 0x01	; 1
    12ba:	71 09       	sbc	r23, r1
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	0e c0       	rjmp	.+28     	; 0x12de <reverse+0x26>
    12c2:	dc 01       	movw	r26, r24
    12c4:	a2 0f       	add	r26, r18
    12c6:	b3 1f       	adc	r27, r19
    12c8:	4c 91       	ld	r20, X
    12ca:	fc 01       	movw	r30, r24
    12cc:	e6 0f       	add	r30, r22
    12ce:	f7 1f       	adc	r31, r23
    12d0:	50 81       	ld	r21, Z
    12d2:	5c 93       	st	X, r21
    12d4:	40 83       	st	Z, r20
    12d6:	2f 5f       	subi	r18, 0xFF	; 255
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	61 50       	subi	r22, 0x01	; 1
    12dc:	71 09       	sbc	r23, r1
    12de:	26 17       	cp	r18, r22
    12e0:	37 07       	cpc	r19, r23
    12e2:	7c f3       	brlt	.-34     	; 0x12c2 <reverse+0xa>
    12e4:	08 95       	ret

000012e6 <intToStr>:
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	8b 01       	movw	r16, r22
    12f0:	9a 01       	movw	r18, r20
    12f2:	c0 e0       	ldi	r28, 0x00	; 0
    12f4:	d0 e0       	ldi	r29, 0x00	; 0
    12f6:	0c c0       	rjmp	.+24     	; 0x1310 <intToStr+0x2a>
    12f8:	f8 01       	movw	r30, r16
    12fa:	ec 0f       	add	r30, r28
    12fc:	fd 1f       	adc	r31, r29
    12fe:	6a e0       	ldi	r22, 0x0A	; 10
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__divmodhi4>
    1306:	80 5d       	subi	r24, 0xD0	; 208
    1308:	80 83       	st	Z, r24
    130a:	86 2f       	mov	r24, r22
    130c:	97 2f       	mov	r25, r23
    130e:	21 96       	adiw	r28, 0x01	; 1
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	91 f7       	brne	.-28     	; 0x12f8 <intToStr+0x12>
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <intToStr+0x3c>
    1316:	f8 01       	movw	r30, r16
    1318:	ec 0f       	add	r30, r28
    131a:	fd 1f       	adc	r31, r29
    131c:	80 e3       	ldi	r24, 0x30	; 48
    131e:	80 83       	st	Z, r24
    1320:	21 96       	adiw	r28, 0x01	; 1
    1322:	c2 17       	cp	r28, r18
    1324:	d3 07       	cpc	r29, r19
    1326:	bc f3       	brlt	.-18     	; 0x1316 <intToStr+0x30>
    1328:	be 01       	movw	r22, r28
    132a:	c8 01       	movw	r24, r16
    132c:	c5 df       	rcall	.-118    	; 0x12b8 <reverse>
    132e:	f8 01       	movw	r30, r16
    1330:	ec 0f       	add	r30, r28
    1332:	fd 1f       	adc	r31, r29
    1334:	10 82       	st	Z, r1
    1336:	ce 01       	movw	r24, r28
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	08 95       	ret

00001342 <ftoa>:
    1342:	4f 92       	push	r4
    1344:	5f 92       	push	r5
    1346:	6f 92       	push	r6
    1348:	7f 92       	push	r7
    134a:	8f 92       	push	r8
    134c:	9f 92       	push	r9
    134e:	af 92       	push	r10
    1350:	bf 92       	push	r11
    1352:	ef 92       	push	r14
    1354:	ff 92       	push	r15
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	2b 01       	movw	r4, r22
    1360:	3c 01       	movw	r6, r24
    1362:	7a 01       	movw	r14, r20
    1364:	89 01       	movw	r16, r18
    1366:	0e 94 43 13 	call	0x2686	; 0x2686 <__fixsfsi>
    136a:	4b 01       	movw	r8, r22
    136c:	5c 01       	movw	r10, r24
    136e:	07 2e       	mov	r0, r23
    1370:	00 0c       	add	r0, r0
    1372:	88 0b       	sbc	r24, r24
    1374:	99 0b       	sbc	r25, r25
    1376:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
    137a:	9b 01       	movw	r18, r22
    137c:	ac 01       	movw	r20, r24
    137e:	c3 01       	movw	r24, r6
    1380:	b2 01       	movw	r22, r4
    1382:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__subsf3>
    1386:	2b 01       	movw	r4, r22
    1388:	3c 01       	movw	r6, r24
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	b7 01       	movw	r22, r14
    1390:	c4 01       	movw	r24, r8
    1392:	a9 df       	rcall	.-174    	; 0x12e6 <intToStr>
    1394:	ec 01       	movw	r28, r24
    1396:	01 15       	cp	r16, r1
    1398:	11 05       	cpc	r17, r1
    139a:	21 f1       	breq	.+72     	; 0x13e4 <ftoa+0xa2>
    139c:	f7 01       	movw	r30, r14
    139e:	e8 0f       	add	r30, r24
    13a0:	f9 1f       	adc	r31, r25
    13a2:	8e e2       	ldi	r24, 0x2E	; 46
    13a4:	80 83       	st	Z, r24
    13a6:	b8 01       	movw	r22, r16
    13a8:	01 2e       	mov	r0, r17
    13aa:	00 0c       	add	r0, r0
    13ac:	88 0b       	sbc	r24, r24
    13ae:	99 0b       	sbc	r25, r25
    13b0:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
    13b4:	9b 01       	movw	r18, r22
    13b6:	ac 01       	movw	r20, r24
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	80 e2       	ldi	r24, 0x20	; 32
    13be:	91 e4       	ldi	r25, 0x41	; 65
    13c0:	0e 94 8d 14 	call	0x291a	; 0x291a <pow>
    13c4:	9b 01       	movw	r18, r22
    13c6:	ac 01       	movw	r20, r24
    13c8:	c3 01       	movw	r24, r6
    13ca:	b2 01       	movw	r22, r4
    13cc:	0e 94 2a 14 	call	0x2854	; 0x2854 <__mulsf3>
    13d0:	21 96       	adiw	r28, 0x01	; 1
    13d2:	ce 0d       	add	r28, r14
    13d4:	df 1d       	adc	r29, r15
    13d6:	0e 94 43 13 	call	0x2686	; 0x2686 <__fixsfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	a8 01       	movw	r20, r16
    13e0:	be 01       	movw	r22, r28
    13e2:	81 df       	rcall	.-254    	; 0x12e6 <intToStr>
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	bf 90       	pop	r11
    13f2:	af 90       	pop	r10
    13f4:	9f 90       	pop	r9
    13f6:	8f 90       	pop	r8
    13f8:	7f 90       	pop	r7
    13fa:	6f 90       	pop	r6
    13fc:	5f 90       	pop	r5
    13fe:	4f 90       	pop	r4
    1400:	08 95       	ret

00001402 <print_float>:

u8g_uint_t print_float(double num, int afterpoint)
{
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	c0 58       	subi	r28, 0x80	; 128
    140c:	d1 09       	sbc	r29, r1
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	9a 01       	movw	r18, r20
  char data[128];
  ftoa(num,data,afterpoint);
    141a:	ae 01       	movw	r20, r28
    141c:	4f 5f       	subi	r20, 0xFF	; 255
    141e:	5f 4f       	sbci	r21, 0xFF	; 255
    1420:	90 df       	rcall	.-224    	; 0x1342 <ftoa>
  return u8g_DrawStr(&u8g,tx,ty,data);
    1422:	9e 01       	movw	r18, r28
    1424:	2f 5f       	subi	r18, 0xFF	; 255
    1426:	3f 4f       	sbci	r19, 0xFF	; 255
    1428:	40 91 48 05 	lds	r20, 0x0548	; 0x800548 <ty>
    142c:	60 91 47 05 	lds	r22, 0x0547	; 0x800547 <tx>
    1430:	80 e1       	ldi	r24, 0x10	; 16
    1432:	95 e0       	ldi	r25, 0x05	; 5
    1434:	6f d4       	rcall	.+2270   	; 0x1d14 <u8g_DrawStr>
}
    1436:	c0 58       	subi	r28, 0x80	; 128
    1438:	df 4f       	sbci	r29, 0xFF	; 255
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <drawFrame>:

void drawFrame(u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    144a:	0f 93       	push	r16
	u8g_DrawFrame(&u8g,x,y,w,h);
    144c:	02 2f       	mov	r16, r18
    144e:	24 2f       	mov	r18, r20
    1450:	46 2f       	mov	r20, r22
    1452:	68 2f       	mov	r22, r24
    1454:	80 e1       	ldi	r24, 0x10	; 16
    1456:	95 e0       	ldi	r25, 0x05	; 5
    1458:	0e 94 43 12 	call	0x2486	; 0x2486 <u8g_DrawFrame>
}
    145c:	0f 91       	pop	r16
    145e:	08 95       	ret

00001460 <drawLine>:

void drawLine(u8g_uint_t x1, u8g_uint_t y1, u8g_uint_t x2, u8g_uint_t y2)
{
    1460:	0f 93       	push	r16
	u8g_DrawLine(&u8g,x1,y1,x2,y2);
    1462:	02 2f       	mov	r16, r18
    1464:	24 2f       	mov	r18, r20
    1466:	46 2f       	mov	r20, r22
    1468:	68 2f       	mov	r22, r24
    146a:	80 e1       	ldi	r24, 0x10	; 16
    146c:	95 e0       	ldi	r25, 0x05	; 5
    146e:	cd d4       	rcall	.+2458   	; 0x1e0a <u8g_DrawLine>
}
    1470:	0f 91       	pop	r16
    1472:	08 95       	ret

00001474 <drawPixel>:

void drawPixel(u8g_uint_t x, u8g_uint_t y)
{
    1474:	46 2f       	mov	r20, r22
	u8g_DrawPixel(&u8g,x,y);
    1476:	68 2f       	mov	r22, r24
    1478:	80 e1       	ldi	r24, 0x10	; 16
    147a:	95 e0       	ldi	r25, 0x05	; 5
    147c:	0f c6       	rjmp	.+3102   	; 0x209c <u8g_DrawPixel>
    147e:	08 95       	ret

00001480 <drawStr>:
}

u8g_uint_t drawStr(u8g_uint_t x, u8g_uint_t y, const char *s)
{
    1480:	9a 01       	movw	r18, r20
	return u8g_DrawStr(&u8g,x,y, s);
    1482:	46 2f       	mov	r20, r22
    1484:	68 2f       	mov	r22, r24
    1486:	80 e1       	ldi	r24, 0x10	; 16
    1488:	95 e0       	ldi	r25, 0x05	; 5
    148a:	44 c4       	rjmp	.+2184   	; 0x1d14 <u8g_DrawStr>
}
    148c:	08 95       	ret

0000148e <setFont>:

void setFont(const u8g_fntpgm_uint8_t  *font)
{
	u8g_SetFont(&u8g, font);
    148e:	bc 01       	movw	r22, r24
    1490:	80 e1       	ldi	r24, 0x10	; 16
    1492:	95 e0       	ldi	r25, 0x05	; 5
    1494:	a9 c4       	rjmp	.+2386   	; 0x1de8 <u8g_SetFont>
    1496:	08 95       	ret

00001498 <firstPage>:
}

void firstPage(void)
{
	u8g_FirstPage(&u8g);
    1498:	80 e1       	ldi	r24, 0x10	; 16
    149a:	95 e0       	ldi	r25, 0x05	; 5
    149c:	eb c5       	rjmp	.+3030   	; 0x2074 <u8g_FirstPage>
    149e:	08 95       	ret

000014a0 <nextPage>:
}

uint8_t nextPage(void)
{
	return u8g_NextPage(&u8g);
    14a0:	80 e1       	ldi	r24, 0x10	; 16
    14a2:	95 e0       	ldi	r25, 0x05	; 5
    14a4:	ec c5       	rjmp	.+3032   	; 0x207e <u8g_NextPage>
}
    14a6:	08 95       	ret

000014a8 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    14a8:	0f 93       	push	r16
    14aa:	fc 01       	movw	r30, r24
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
    14ac:	04 0f       	add	r16, r20
  tmp--;
    14ae:	01 50       	subi	r16, 0x01	; 1
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    14b0:	96 a9       	ldd	r25, Z+54	; 0x36
    14b2:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    14b4:	94 17       	cp	r25, r20
    14b6:	30 f0       	brcs	.+12     	; 0x14c4 <u8g_IsBBXIntersection+0x1c>
  {
    if ( v1 >= a0 )
    14b8:	08 17       	cp	r16, r24
    14ba:	50 f4       	brcc	.+20     	; 0x14d0 <u8g_IsBBXIntersection+0x28>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    14bc:	04 17       	cp	r16, r20
    14be:	50 f4       	brcc	.+20     	; 0x14d4 <u8g_IsBBXIntersection+0x2c>
      {
	return 1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	0d c0       	rjmp	.+26     	; 0x14de <u8g_IsBBXIntersection+0x36>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    14c4:	08 17       	cp	r16, r24
    14c6:	40 f0       	brcs	.+16     	; 0x14d8 <u8g_IsBBXIntersection+0x30>
    {
      if ( v0 > v1 )
    14c8:	04 17       	cp	r16, r20
    14ca:	40 f4       	brcc	.+16     	; 0x14dc <u8g_IsBBXIntersection+0x34>
      {
	return 1;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	07 c0       	rjmp	.+14     	; 0x14de <u8g_IsBBXIntersection+0x36>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <u8g_IsBBXIntersection+0x36>
      {
	return 1;
      }
      else
      {
	return 0;
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	03 c0       	rjmp	.+6      	; 0x14de <u8g_IsBBXIntersection+0x36>
	return 0;
      }
    }
    else
    {
      return 0;
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	01 c0       	rjmp	.+2      	; 0x14de <u8g_IsBBXIntersection+0x36>
      {
	return 1;
      }
      else
      {
	return 0;
    14dc:	80 e0       	ldi	r24, 0x00	; 0
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    14de:	88 23       	and	r24, r24
    14e0:	c9 f0       	breq	.+50     	; 0x1514 <u8g_IsBBXIntersection+0x6c>
    return 0; 
  
  tmp = x;
  tmp += w;
    14e2:	26 0f       	add	r18, r22
  tmp--;
    14e4:	21 50       	subi	r18, 0x01	; 1
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    14e6:	95 a9       	ldd	r25, Z+53	; 0x35
    14e8:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    14ea:	96 17       	cp	r25, r22
    14ec:	30 f0       	brcs	.+12     	; 0x14fa <u8g_IsBBXIntersection+0x52>
  {
    if ( v1 >= a0 )
    14ee:	28 17       	cp	r18, r24
    14f0:	50 f4       	brcc	.+20     	; 0x1506 <u8g_IsBBXIntersection+0x5e>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    14f2:	26 17       	cp	r18, r22
    14f4:	50 f4       	brcc	.+20     	; 0x150a <u8g_IsBBXIntersection+0x62>
      {
	return 1;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	0d c0       	rjmp	.+26     	; 0x1514 <u8g_IsBBXIntersection+0x6c>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    14fa:	28 17       	cp	r18, r24
    14fc:	40 f0       	brcs	.+16     	; 0x150e <u8g_IsBBXIntersection+0x66>
    {
      if ( v0 > v1 )
    14fe:	26 17       	cp	r18, r22
    1500:	40 f4       	brcc	.+16     	; 0x1512 <u8g_IsBBXIntersection+0x6a>
      {
	return 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	07 c0       	rjmp	.+14     	; 0x1514 <u8g_IsBBXIntersection+0x6c>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	05 c0       	rjmp	.+10     	; 0x1514 <u8g_IsBBXIntersection+0x6c>
      {
	return 1;
      }
      else
      {
	return 0;
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <u8g_IsBBXIntersection+0x6c>
	return 0;
      }
    }
    else
    {
      return 0;
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	01 c0       	rjmp	.+2      	; 0x1514 <u8g_IsBBXIntersection+0x6c>
      {
	return 1;
      }
      else
      {
	return 0;
    1512:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    1514:	0f 91       	pop	r16
    1516:	08 95       	ret

00001518 <u8g_InitCom>:
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
}
    1518:	db 01       	movw	r26, r22
    151a:	14 96       	adiw	r26, 0x04	; 4
    151c:	ed 91       	ld	r30, X+
    151e:	fc 91       	ld	r31, X
    1520:	15 97       	sbiw	r26, 0x05	; 5
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	61 e0       	ldi	r22, 0x01	; 1
    1528:	19 95       	eicall
    152a:	08 95       	ret

0000152c <u8g_SetChipSelect>:
    152c:	db 01       	movw	r26, r22
    152e:	14 96       	adiw	r26, 0x04	; 4
    1530:	ed 91       	ld	r30, X+
    1532:	fc 91       	ld	r31, X
    1534:	15 97       	sbiw	r26, 0x05	; 5
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	63 e0       	ldi	r22, 0x03	; 3
    153c:	19 95       	eicall
    153e:	08 95       	ret

00001540 <u8g_SetResetLow>:
    1540:	db 01       	movw	r26, r22
    1542:	14 96       	adiw	r26, 0x04	; 4
    1544:	ed 91       	ld	r30, X+
    1546:	fc 91       	ld	r31, X
    1548:	15 97       	sbiw	r26, 0x05	; 5
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	64 e0       	ldi	r22, 0x04	; 4
    1552:	19 95       	eicall
    1554:	08 95       	ret

00001556 <u8g_SetResetHigh>:
    1556:	db 01       	movw	r26, r22
    1558:	14 96       	adiw	r26, 0x04	; 4
    155a:	ed 91       	ld	r30, X+
    155c:	fc 91       	ld	r31, X
    155e:	15 97       	sbiw	r26, 0x05	; 5
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	64 e0       	ldi	r22, 0x04	; 4
    1568:	19 95       	eicall
    156a:	08 95       	ret

0000156c <u8g_SetAddress>:
    156c:	db 01       	movw	r26, r22
    156e:	14 96       	adiw	r26, 0x04	; 4
    1570:	ed 91       	ld	r30, X+
    1572:	fc 91       	ld	r31, X
    1574:	15 97       	sbiw	r26, 0x05	; 5
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	62 e0       	ldi	r22, 0x02	; 2
    157c:	19 95       	eicall
    157e:	08 95       	ret

00001580 <u8g_WriteByte>:
    1580:	db 01       	movw	r26, r22
    1582:	14 96       	adiw	r26, 0x04	; 4
    1584:	ed 91       	ld	r30, X+
    1586:	fc 91       	ld	r31, X
    1588:	15 97       	sbiw	r26, 0x05	; 5
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	65 e0       	ldi	r22, 0x05	; 5
    1590:	19 95       	eicall
    1592:	08 95       	ret

00001594 <u8g_WriteSequence>:
    1594:	db 01       	movw	r26, r22
    1596:	14 96       	adiw	r26, 0x04	; 4
    1598:	ed 91       	ld	r30, X+
    159a:	fc 91       	ld	r31, X
    159c:	15 97       	sbiw	r26, 0x05	; 5
    159e:	66 e0       	ldi	r22, 0x06	; 6
    15a0:	19 95       	eicall
    15a2:	08 95       	ret

000015a4 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    15a4:	cf 92       	push	r12
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	6c 01       	movw	r12, r24
    15b6:	7b 01       	movw	r14, r22
    15b8:	8a 01       	movw	r16, r20
  uint8_t is_escape = 0;
    15ba:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    15bc:	f8 01       	movw	r30, r16
    15be:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    15c0:	d1 11       	cpse	r29, r1
    15c2:	0a c0       	rjmp	.+20     	; 0x15d8 <u8g_WriteEscSeqP+0x34>
    {
      if ( value != 255 )
    15c4:	cf 3f       	cpi	r28, 0xFF	; 255
    15c6:	09 f4       	brne	.+2      	; 0x15ca <u8g_WriteEscSeqP+0x26>
    15c8:	44 c0       	rjmp	.+136    	; 0x1652 <u8g_WriteEscSeqP+0xae>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    15ca:	4c 2f       	mov	r20, r28
    15cc:	b7 01       	movw	r22, r14
    15ce:	c6 01       	movw	r24, r12
    15d0:	d7 df       	rcall	.-82     	; 0x1580 <u8g_WriteByte>
    15d2:	81 11       	cpse	r24, r1
    15d4:	45 c0       	rjmp	.+138    	; 0x1660 <u8g_WriteEscSeqP+0xbc>
    15d6:	48 c0       	rjmp	.+144    	; 0x1668 <u8g_WriteEscSeqP+0xc4>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    15d8:	cf 3f       	cpi	r28, 0xFF	; 255
    15da:	49 f4       	brne	.+18     	; 0x15ee <u8g_WriteEscSeqP+0x4a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    15dc:	4c 2f       	mov	r20, r28
    15de:	b7 01       	movw	r22, r14
    15e0:	c6 01       	movw	r24, r12
    15e2:	ce df       	rcall	.-100    	; 0x1580 <u8g_WriteByte>
    15e4:	88 23       	and	r24, r24
    15e6:	09 f4       	brne	.+2      	; 0x15ea <u8g_WriteEscSeqP+0x46>
    15e8:	3f c0       	rjmp	.+126    	; 0x1668 <u8g_WriteEscSeqP+0xc4>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    15ea:	d0 e0       	ldi	r29, 0x00	; 0
    15ec:	39 c0       	rjmp	.+114    	; 0x1660 <u8g_WriteEscSeqP+0xbc>
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    15ee:	ce 3f       	cpi	r28, 0xFE	; 254
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <u8g_WriteEscSeqP+0x50>
    15f2:	39 c0       	rjmp	.+114    	; 0x1666 <u8g_WriteEscSeqP+0xc2>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    15f4:	c0 3f       	cpi	r28, 0xF0	; 240
    15f6:	78 f5       	brcc	.+94     	; 0x1656 <u8g_WriteEscSeqP+0xb2>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    15f8:	c0 3e       	cpi	r28, 0xE0	; 224
    15fa:	38 f0       	brcs	.+14     	; 0x160a <u8g_WriteEscSeqP+0x66>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    15fc:	4c 2f       	mov	r20, r28
    15fe:	4f 70       	andi	r20, 0x0F	; 15
    1600:	b7 01       	movw	r22, r14
    1602:	c6 01       	movw	r24, r12
    1604:	b3 df       	rcall	.-154    	; 0x156c <u8g_SetAddress>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1606:	d0 e0       	ldi	r29, 0x00	; 0
    1608:	2b c0       	rjmp	.+86     	; 0x1660 <u8g_WriteEscSeqP+0xbc>
      }
      else if ( value >= 0xe0  )
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xd0 )
    160a:	c0 3d       	cpi	r28, 0xD0	; 208
    160c:	38 f0       	brcs	.+14     	; 0x161c <u8g_WriteEscSeqP+0x78>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    160e:	4c 2f       	mov	r20, r28
    1610:	4f 70       	andi	r20, 0x0F	; 15
    1612:	b7 01       	movw	r22, r14
    1614:	c6 01       	movw	r24, r12
    1616:	8a df       	rcall	.-236    	; 0x152c <u8g_SetChipSelect>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1618:	d0 e0       	ldi	r29, 0x00	; 0
    161a:	22 c0       	rjmp	.+68     	; 0x1660 <u8g_WriteEscSeqP+0xbc>
      }
      else if ( value >= 0xd0 )
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xc0 )
    161c:	c0 3c       	cpi	r28, 0xC0	; 192
      {
        u8g_SetResetLow(u8g, dev);
    161e:	80 f0       	brcs	.+32     	; 0x1640 <u8g_WriteEscSeqP+0x9c>
    1620:	b7 01       	movw	r22, r14
    1622:	c6 01       	movw	r24, r12
    1624:	8d df       	rcall	.-230    	; 0x1540 <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    1626:	c2 95       	swap	r28
        value+=2;
    1628:	c0 7f       	andi	r28, 0xF0	; 240
        u8g_Delay(value);
    162a:	ce 5f       	subi	r28, 0xFE	; 254
    162c:	d0 e0       	ldi	r29, 0x00	; 0
        u8g_SetResetHigh(u8g, dev);
    162e:	ce 01       	movw	r24, r28
    1630:	7b d1       	rcall	.+758    	; 0x1928 <u8g_Delay>
    1632:	b7 01       	movw	r22, r14
    1634:	c6 01       	movw	r24, r12
        u8g_Delay(value);
    1636:	8f df       	rcall	.-226    	; 0x1556 <u8g_SetResetHigh>
    1638:	ce 01       	movw	r24, r28
    163a:	76 d1       	rcall	.+748    	; 0x1928 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    163c:	d0 e0       	ldi	r29, 0x00	; 0
        value+=2;
        u8g_Delay(value);
        u8g_SetResetHigh(u8g, dev);
        u8g_Delay(value);
      }
      else if ( value >= 0xbe )
    163e:	10 c0       	rjmp	.+32     	; 0x1660 <u8g_WriteEscSeqP+0xbc>
    1640:	ce 3b       	cpi	r28, 0xBE	; 190
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    1642:	58 f4       	brcc	.+22     	; 0x165a <u8g_WriteEscSeqP+0xb6>
    1644:	cc 23       	and	r28, r28
      {
        u8g_Delay(value);
    1646:	5c f0       	brlt	.+22     	; 0x165e <u8g_WriteEscSeqP+0xba>
    1648:	8c 2f       	mov	r24, r28
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	6d d1       	rcall	.+730    	; 0x1928 <u8g_Delay>
      }
      is_escape = 0;
    164e:	d0 e0       	ldi	r29, 0x00	; 0
    1650:	07 c0       	rjmp	.+14     	; 0x1660 <u8g_WriteEscSeqP+0xbc>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    1652:	d1 e0       	ldi	r29, 0x01	; 1
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <u8g_WriteEscSeqP+0xbc>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1656:	d0 e0       	ldi	r29, 0x00	; 0
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <u8g_WriteEscSeqP+0xbc>
    165a:	d0 e0       	ldi	r29, 0x00	; 0
    165c:	01 c0       	rjmp	.+2      	; 0x1660 <u8g_WriteEscSeqP+0xbc>
    165e:	d0 e0       	ldi	r29, 0x00	; 0
    }
    esc_seq++;
    1660:	0f 5f       	subi	r16, 0xFF	; 255
    1662:	1f 4f       	sbci	r17, 0xFF	; 255
  }
    1664:	ab cf       	rjmp	.-170    	; 0x15bc <u8g_WriteEscSeqP+0x18>
  return 1;
    1666:	81 e0       	ldi	r24, 0x01	; 1
}
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	08 95       	ret

0000167a <u8g_com_atmega_parallel_write>:

#if defined(__AVR__)

static void u8g_com_atmega_parallel_write(u8g_t *u8g, uint8_t val) U8G_NOINLINE;
static void u8g_com_atmega_parallel_write(u8g_t *u8g, uint8_t val)
{
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	8c 01       	movw	r16, r24
    1682:	c6 2f       	mov	r28, r22

  u8g_SetPILevel(u8g, U8G_PI_D0, val&1);
    1684:	46 2f       	mov	r20, r22
    1686:	41 70       	andi	r20, 0x01	; 1
    1688:	65 e0       	ldi	r22, 0x05	; 5
    168a:	45 d1       	rcall	.+650    	; 0x1916 <u8g_SetPILevel>
  val >>= 1;
    168c:	c6 95       	lsr	r28
  u8g_SetPILevel(u8g, U8G_PI_D1, val&1);
    168e:	4c 2f       	mov	r20, r28
    1690:	41 70       	andi	r20, 0x01	; 1
    1692:	66 e0       	ldi	r22, 0x06	; 6
    1694:	c8 01       	movw	r24, r16
    1696:	3f d1       	rcall	.+638    	; 0x1916 <u8g_SetPILevel>
  val >>= 1;
    1698:	c6 95       	lsr	r28
  u8g_SetPILevel(u8g, U8G_PI_D2, val&1);
    169a:	4c 2f       	mov	r20, r28
    169c:	41 70       	andi	r20, 0x01	; 1
    169e:	67 e0       	ldi	r22, 0x07	; 7
    16a0:	c8 01       	movw	r24, r16
    16a2:	39 d1       	rcall	.+626    	; 0x1916 <u8g_SetPILevel>
  val >>= 1;
    16a4:	c6 95       	lsr	r28
  u8g_SetPILevel(u8g, U8G_PI_D3, val&1);
    16a6:	4c 2f       	mov	r20, r28
    16a8:	41 70       	andi	r20, 0x01	; 1
    16aa:	68 e0       	ldi	r22, 0x08	; 8
    16ac:	c8 01       	movw	r24, r16
    16ae:	33 d1       	rcall	.+614    	; 0x1916 <u8g_SetPILevel>
  val >>= 1;
    16b0:	c6 95       	lsr	r28
  u8g_SetPILevel(u8g, U8G_PI_D4, val&1);
    16b2:	4c 2f       	mov	r20, r28
    16b4:	41 70       	andi	r20, 0x01	; 1
    16b6:	69 e0       	ldi	r22, 0x09	; 9
    16b8:	c8 01       	movw	r24, r16
    16ba:	2d d1       	rcall	.+602    	; 0x1916 <u8g_SetPILevel>
  val >>= 1;
  u8g_SetPILevel(u8g, U8G_PI_D5, val&1);
    16bc:	c6 95       	lsr	r28
    16be:	4c 2f       	mov	r20, r28
    16c0:	41 70       	andi	r20, 0x01	; 1
    16c2:	6a e0       	ldi	r22, 0x0A	; 10
    16c4:	c8 01       	movw	r24, r16
  val >>= 1;
    16c6:	27 d1       	rcall	.+590    	; 0x1916 <u8g_SetPILevel>
  u8g_SetPILevel(u8g, U8G_PI_D6, val&1);
    16c8:	c6 95       	lsr	r28
    16ca:	4c 2f       	mov	r20, r28
    16cc:	41 70       	andi	r20, 0x01	; 1
    16ce:	6b e0       	ldi	r22, 0x0B	; 11
    16d0:	c8 01       	movw	r24, r16
  val >>= 1;
  u8g_SetPILevel(u8g, U8G_PI_D7, val&1);
    16d2:	21 d1       	rcall	.+578    	; 0x1916 <u8g_SetPILevel>
    16d4:	4c 2f       	mov	r20, r28
    16d6:	46 95       	lsr	r20
    16d8:	6c e0       	ldi	r22, 0x0C	; 12
  
  /* EN cycle time must be 1 micro second  */
  u8g_SetPILevel(u8g, U8G_PI_EN, 1);
    16da:	c8 01       	movw	r24, r16
    16dc:	1c d1       	rcall	.+568    	; 0x1916 <u8g_SetPILevel>
  u8g_MicroDelay(); /* delay by 1000ns, reference: ST7920: 140ns, SBN1661: 100ns */
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	64 e0       	ldi	r22, 0x04	; 4
  u8g_SetPILevel(u8g, U8G_PI_EN, 0);
    16e2:	c8 01       	movw	r24, r16
    16e4:	18 d1       	rcall	.+560    	; 0x1916 <u8g_SetPILevel>
    16e6:	29 d1       	rcall	.+594    	; 0x193a <u8g_MicroDelay>
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	64 e0       	ldi	r22, 0x04	; 4
  u8g_10MicroDelay(); /* ST7920 commands: 72us */
    16ec:	c8 01       	movw	r24, r16
    16ee:	13 d1       	rcall	.+550    	; 0x1916 <u8g_SetPILevel>
  u8g_10MicroDelay(); /* ST7920 commands: 72us */
    16f0:	25 d1       	rcall	.+586    	; 0x193c <u8g_10MicroDelay>
    16f2:	24 d1       	rcall	.+584    	; 0x193c <u8g_10MicroDelay>
}
    16f4:	cf 91       	pop	r28
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	08 95       	ret

000016fc <u8g_com_atmega_parallel_fn>:


uint8_t u8g_com_atmega_parallel_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    16fc:	cf 92       	push	r12
    16fe:	df 92       	push	r13
    1700:	ef 92       	push	r14
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	7c 01       	movw	r14, r24
    170c:	c4 2f       	mov	r28, r20
    170e:	89 01       	movw	r16, r18
  switch(msg)
    1710:	86 2f       	mov	r24, r22
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	fc 01       	movw	r30, r24
    1716:	31 97       	sbiw	r30, 0x01	; 1
    1718:	e7 30       	cpi	r30, 0x07	; 7
    171a:	f1 05       	cpc	r31, r1
    171c:	08 f0       	brcs	.+2      	; 0x1720 <u8g_com_atmega_parallel_fn+0x24>
    171e:	86 c0       	rjmp	.+268    	; 0x182c <u8g_com_atmega_parallel_fn+0x130>
    1720:	88 27       	eor	r24, r24
    1722:	ee 58       	subi	r30, 0x8E	; 142
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	8f 4f       	sbci	r24, 0xFF	; 255
    1728:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__tablejump2__>
  {
    case U8G_COM_MSG_INIT:
      /* setup the RW pin as output and force it to low */
      u8g_SetPIOutput(u8g, U8G_PI_RW);
    172c:	6d e0       	ldi	r22, 0x0D	; 13
    172e:	c7 01       	movw	r24, r14
    1730:	ea d0       	rcall	.+468    	; 0x1906 <u8g_SetPIOutput>
      u8g_SetPILevel(u8g, U8G_PI_RW, 0);
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	6d e0       	ldi	r22, 0x0D	; 13
    1736:	c7 01       	movw	r24, r14
    1738:	ee d0       	rcall	.+476    	; 0x1916 <u8g_SetPILevel>

      u8g_SetPIOutput(u8g, U8G_PI_D0);
    173a:	65 e0       	ldi	r22, 0x05	; 5
    173c:	c7 01       	movw	r24, r14
    173e:	e3 d0       	rcall	.+454    	; 0x1906 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D1);
    1740:	66 e0       	ldi	r22, 0x06	; 6
    1742:	c7 01       	movw	r24, r14
    1744:	e0 d0       	rcall	.+448    	; 0x1906 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D2);
    1746:	67 e0       	ldi	r22, 0x07	; 7
    1748:	c7 01       	movw	r24, r14
    174a:	dd d0       	rcall	.+442    	; 0x1906 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D3);
    174c:	68 e0       	ldi	r22, 0x08	; 8
    174e:	c7 01       	movw	r24, r14
    1750:	da d0       	rcall	.+436    	; 0x1906 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D4);
    1752:	69 e0       	ldi	r22, 0x09	; 9
    1754:	c7 01       	movw	r24, r14
    1756:	d7 d0       	rcall	.+430    	; 0x1906 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D5);
    1758:	6a e0       	ldi	r22, 0x0A	; 10
    175a:	c7 01       	movw	r24, r14
    175c:	d4 d0       	rcall	.+424    	; 0x1906 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D6);
    175e:	6b e0       	ldi	r22, 0x0B	; 11
    1760:	c7 01       	movw	r24, r14
    1762:	d1 d0       	rcall	.+418    	; 0x1906 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D7);
    1764:	6c e0       	ldi	r22, 0x0C	; 12
    1766:	c7 01       	movw	r24, r14
    1768:	ce d0       	rcall	.+412    	; 0x1906 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_EN);
    176a:	64 e0       	ldi	r22, 0x04	; 4
    176c:	c7 01       	movw	r24, r14
    176e:	cb d0       	rcall	.+406    	; 0x1906 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_CS1);
    1770:	62 e0       	ldi	r22, 0x02	; 2
    1772:	c7 01       	movw	r24, r14
    1774:	c8 d0       	rcall	.+400    	; 0x1906 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_CS2);
    1776:	63 e0       	ldi	r22, 0x03	; 3
    1778:	c7 01       	movw	r24, r14
    177a:	c5 d0       	rcall	.+394    	; 0x1906 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_DI);
    177c:	61 e0       	ldi	r22, 0x01	; 1
    177e:	c7 01       	movw	r24, r14
    1780:	c2 d0       	rcall	.+388    	; 0x1906 <u8g_SetPIOutput>
    1782:	41 e0       	ldi	r20, 0x01	; 1
      u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
    1784:	62 e0       	ldi	r22, 0x02	; 2
    1786:	c7 01       	movw	r24, r14
    1788:	c6 d0       	rcall	.+396    	; 0x1916 <u8g_SetPILevel>
    178a:	41 e0       	ldi	r20, 0x01	; 1
      u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
    178c:	63 e0       	ldi	r22, 0x03	; 3
    178e:	c7 01       	movw	r24, r14
    1790:	c2 d0       	rcall	.+388    	; 0x1916 <u8g_SetPILevel>
    1792:	4c c0       	rjmp	.+152    	; 0x182c <u8g_com_atmega_parallel_fn+0x130>
    1794:	41 11       	cpse	r20, r1

      break;
    1796:	09 c0       	rjmp	.+18     	; 0x17aa <u8g_com_atmega_parallel_fn+0xae>
    case U8G_COM_MSG_STOP:
      break;
    case U8G_COM_MSG_CHIP_SELECT:
      if ( arg_val == 0 )
    1798:	41 e0       	ldi	r20, 0x01	; 1
      {
        /* disable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
    179a:	62 e0       	ldi	r22, 0x02	; 2
    179c:	c7 01       	movw	r24, r14
    179e:	bb d0       	rcall	.+374    	; 0x1916 <u8g_SetPILevel>
    17a0:	41 e0       	ldi	r20, 0x01	; 1
        u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
    17a2:	63 e0       	ldi	r22, 0x03	; 3
    17a4:	c7 01       	movw	r24, r14
    17a6:	b7 d0       	rcall	.+366    	; 0x1916 <u8g_SetPILevel>
    17a8:	41 c0       	rjmp	.+130    	; 0x182c <u8g_com_atmega_parallel_fn+0x130>
    17aa:	41 30       	cpi	r20, 0x01	; 1
      }
      else if ( arg_val == 1 )
    17ac:	49 f4       	brne	.+18     	; 0x17c0 <u8g_com_atmega_parallel_fn+0xc4>
    17ae:	40 e0       	ldi	r20, 0x00	; 0
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 0);
    17b0:	62 e0       	ldi	r22, 0x02	; 2
    17b2:	c7 01       	movw	r24, r14
    17b4:	b0 d0       	rcall	.+352    	; 0x1916 <u8g_SetPILevel>
    17b6:	41 e0       	ldi	r20, 0x01	; 1
        u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
    17b8:	63 e0       	ldi	r22, 0x03	; 3
    17ba:	c7 01       	movw	r24, r14
    17bc:	ac d0       	rcall	.+344    	; 0x1916 <u8g_SetPILevel>
    17be:	36 c0       	rjmp	.+108    	; 0x182c <u8g_com_atmega_parallel_fn+0x130>
      }
      else if ( arg_val == 2 )
    17c0:	42 30       	cpi	r20, 0x02	; 2
    17c2:	49 f4       	brne	.+18     	; 0x17d6 <u8g_com_atmega_parallel_fn+0xda>
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	62 e0       	ldi	r22, 0x02	; 2
    17c8:	c7 01       	movw	r24, r14
    17ca:	a5 d0       	rcall	.+330    	; 0x1916 <u8g_SetPILevel>
        u8g_SetPILevel(u8g, U8G_PI_CS2, 0);
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	63 e0       	ldi	r22, 0x03	; 3
    17d0:	c7 01       	movw	r24, r14
    17d2:	a1 d0       	rcall	.+322    	; 0x1916 <u8g_SetPILevel>
    17d4:	2b c0       	rjmp	.+86     	; 0x182c <u8g_com_atmega_parallel_fn+0x130>
      }
      else
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 0);
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	62 e0       	ldi	r22, 0x02	; 2
    17da:	c7 01       	movw	r24, r14
    17dc:	9c d0       	rcall	.+312    	; 0x1916 <u8g_SetPILevel>
    17de:	40 e0       	ldi	r20, 0x00	; 0
        u8g_SetPILevel(u8g, U8G_PI_CS2, 0);
    17e0:	63 e0       	ldi	r22, 0x03	; 3
    17e2:	c7 01       	movw	r24, r14
    17e4:	98 d0       	rcall	.+304    	; 0x1916 <u8g_SetPILevel>
    17e6:	22 c0       	rjmp	.+68     	; 0x182c <u8g_com_atmega_parallel_fn+0x130>
    17e8:	64 2f       	mov	r22, r20
      }
      break;
    case U8G_COM_MSG_WRITE_BYTE:
      u8g_com_atmega_parallel_write(u8g, arg_val);
    17ea:	c7 01       	movw	r24, r14
    17ec:	46 df       	rcall	.-372    	; 0x167a <u8g_com_atmega_parallel_write>
    17ee:	1e c0       	rjmp	.+60     	; 0x182c <u8g_com_atmega_parallel_fn+0x130>
    17f0:	68 01       	movw	r12, r16
      break;
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
          u8g_com_atmega_parallel_write(u8g, *ptr++);
    17f4:	c8 1a       	sub	r12, r24
    17f6:	d8 0a       	sbc	r13, r24
    17f8:	f8 01       	movw	r30, r16
    17fa:	60 81       	ld	r22, Z
    17fc:	c7 01       	movw	r24, r14
    17fe:	3d df       	rcall	.-390    	; 0x167a <u8g_com_atmega_parallel_write>
    1800:	c1 50       	subi	r28, 0x01	; 1
          arg_val--;
    1802:	86 01       	movw	r16, r12
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
          u8g_com_atmega_parallel_write(u8g, *ptr++);
    1804:	c1 11       	cpse	r28, r1
      u8g_com_atmega_parallel_write(u8g, arg_val);
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1806:	f4 cf       	rjmp	.-24     	; 0x17f0 <u8g_com_atmega_parallel_fn+0xf4>
    1808:	11 c0       	rjmp	.+34     	; 0x182c <u8g_com_atmega_parallel_fn+0x130>
    180a:	f8 01       	movw	r30, r16
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
          u8g_com_atmega_parallel_write(u8g, u8g_pgm_read(ptr));
    180c:	64 91       	lpm	r22, Z
    180e:	c7 01       	movw	r24, r14
    1810:	34 df       	rcall	.-408    	; 0x167a <u8g_com_atmega_parallel_write>
    1812:	0f 5f       	subi	r16, 0xFF	; 255
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
          ptr++;
    1816:	c1 50       	subi	r28, 0x01	; 1
    1818:	c1 11       	cpse	r28, r1
          arg_val--;
    181a:	f7 cf       	rjmp	.-18     	; 0x180a <u8g_com_atmega_parallel_fn+0x10e>
      }
      break;
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    181c:	07 c0       	rjmp	.+14     	; 0x182c <u8g_com_atmega_parallel_fn+0x130>
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	c7 01       	movw	r24, r14
          arg_val--;
        }
      }
      break;
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g_SetPILevel(u8g, U8G_PI_DI, arg_val);
    1822:	79 d0       	rcall	.+242    	; 0x1916 <u8g_SetPILevel>
    1824:	03 c0       	rjmp	.+6      	; 0x182c <u8g_com_atmega_parallel_fn+0x130>
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	c7 01       	movw	r24, r14
      break;
    182a:	75 d0       	rcall	.+234    	; 0x1916 <u8g_SetPILevel>
    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
      break;
  }
  return 1;
}
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	df 90       	pop	r13
    183a:	cf 90       	pop	r12
    183c:	08 95       	ret

0000183e <u8g_get_avr_io_ptr>:
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	1f 92       	push	r1
    1844:	1f 92       	push	r1
{
  volatile uint8_t * tmp = u8g_get_avr_io_ptr(u8g_avr_pin_P, internal_pin_number>>3);
  if ( ((*tmp) & _BV(internal_pin_number&7))  != 0 )
    return 1;
  return 0;
}
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	66 0f       	add	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	68 0f       	add	r22, r24
    1852:	79 1f       	adc	r23, r25
    1854:	42 e0       	ldi	r20, 0x02	; 2
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	ce 01       	movw	r24, r28
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	0e 94 21 16 	call	0x2c42	; 0x2c42 <memcpy_P>
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	08 95       	ret

0000186e <u8g_Pin>:
    186e:	88 0f       	add	r24, r24
    1870:	88 0f       	add	r24, r24
    1872:	88 0f       	add	r24, r24
    1874:	86 0f       	add	r24, r22
    1876:	08 95       	ret

00001878 <u8g_SetPinOutput>:
    1878:	cf 93       	push	r28
    187a:	c8 2f       	mov	r28, r24
    187c:	68 2f       	mov	r22, r24
    187e:	66 95       	lsr	r22
    1880:	66 95       	lsr	r22
    1882:	66 95       	lsr	r22
    1884:	8c ee       	ldi	r24, 0xEC	; 236
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	da df       	rcall	.-76     	; 0x183e <u8g_get_avr_io_ptr>
    188a:	fc 01       	movw	r30, r24
    188c:	40 81       	ld	r20, Z
    188e:	c7 70       	andi	r28, 0x07	; 7
    1890:	21 e0       	ldi	r18, 0x01	; 1
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	02 c0       	rjmp	.+4      	; 0x189a <u8g_SetPinOutput+0x22>
    1896:	22 0f       	add	r18, r18
    1898:	33 1f       	adc	r19, r19
    189a:	ca 95       	dec	r28
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <u8g_SetPinOutput+0x1e>
    189e:	24 2b       	or	r18, r20
    18a0:	20 83       	st	Z, r18
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <u8g_SetPinLevel>:
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	c8 2f       	mov	r28, r24
    18ac:	d6 2f       	mov	r29, r22
    18ae:	68 2f       	mov	r22, r24
    18b0:	66 95       	lsr	r22
    18b2:	66 95       	lsr	r22
    18b4:	66 95       	lsr	r22
    18b6:	8c ed       	ldi	r24, 0xDC	; 220
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	c1 df       	rcall	.-126    	; 0x183e <u8g_get_avr_io_ptr>
    18bc:	d1 11       	cpse	r29, r1
    18be:	11 c0       	rjmp	.+34     	; 0x18e2 <u8g_SetPinLevel+0x3c>
    18c0:	5f b7       	in	r21, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	fc 01       	movw	r30, r24
    18c6:	40 81       	ld	r20, Z
    18c8:	c7 70       	andi	r28, 0x07	; 7
    18ca:	21 e0       	ldi	r18, 0x01	; 1
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <u8g_SetPinLevel+0x2e>
    18d0:	22 0f       	add	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	ca 95       	dec	r28
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <u8g_SetPinLevel+0x2a>
    18d8:	20 95       	com	r18
    18da:	24 23       	and	r18, r20
    18dc:	20 83       	st	Z, r18
    18de:	5f bf       	out	0x3f, r21	; 63
    18e0:	0f c0       	rjmp	.+30     	; 0x1900 <u8g_SetPinLevel+0x5a>
    18e2:	4f b7       	in	r20, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	fc 01       	movw	r30, r24
    18e8:	50 81       	ld	r21, Z
    18ea:	c7 70       	andi	r28, 0x07	; 7
    18ec:	21 e0       	ldi	r18, 0x01	; 1
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <u8g_SetPinLevel+0x50>
    18f2:	22 0f       	add	r18, r18
    18f4:	33 1f       	adc	r19, r19
    18f6:	ca 95       	dec	r28
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <u8g_SetPinLevel+0x4c>
    18fa:	25 2b       	or	r18, r21
    18fc:	20 83       	st	Z, r18
    18fe:	4f bf       	out	0x3f, r20	; 63
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <u8g_SetPIOutput>:
#if defined(U8G_WITH_PINLIST)

void u8g_SetPIOutput(u8g_t *u8g, uint8_t pi)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    1906:	86 0f       	add	r24, r22
    1908:	91 1d       	adc	r25, r1
    190a:	fc 01       	movw	r30, r24
    190c:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    190e:	8f 3f       	cpi	r24, 0xFF	; 255
    1910:	09 f0       	breq	.+2      	; 0x1914 <u8g_SetPIOutput+0xe>
    u8g_SetPinOutput(pin);
    1912:	b2 cf       	rjmp	.-156    	; 0x1878 <u8g_SetPinOutput>
    1914:	08 95       	ret

00001916 <u8g_SetPILevel>:
}

void u8g_SetPILevel(u8g_t *u8g, uint8_t pi, uint8_t level)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    1916:	86 0f       	add	r24, r22
    1918:	91 1d       	adc	r25, r1
    191a:	fc 01       	movw	r30, r24
    191c:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    191e:	8f 3f       	cpi	r24, 0xFF	; 255
    1920:	11 f0       	breq	.+4      	; 0x1926 <u8g_SetPILevel+0x10>
    1922:	64 2f       	mov	r22, r20
    u8g_SetPinLevel(pin, level);
    1924:	c0 cf       	rjmp	.-128    	; 0x18a6 <u8g_SetPinLevel>
    1926:	08 95       	ret

00001928 <u8g_Delay>:
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <u8g_Delay+0xc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    192a:	e8 ef       	ldi	r30, 0xF8	; 248
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	31 97       	sbiw	r30, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <u8g_Delay+0x6>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    1932:	01 97       	sbiw	r24, 0x01	; 1
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	c9 f7       	brne	.-14     	; 0x192a <u8g_Delay+0x2>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
  }
}
    1938:	08 95       	ret

0000193a <u8g_MicroDelay>:

/* delay by one micro second */
void u8g_MicroDelay(void)
{
    193a:	08 95       	ret

0000193c <u8g_10MicroDelay>:
    193c:	82 e0       	ldi	r24, 0x02	; 2
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <u8g_10MicroDelay+0x4>
    1944:	08 95       	ret

00001946 <u8g_dev_ks0108_128x64_fn>:
  U8G_ESC_END                /* end of sequence */
};


uint8_t u8g_dev_ks0108_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    1946:	af 92       	push	r10
    1948:	bf 92       	push	r11
    194a:	cf 92       	push	r12
    194c:	df 92       	push	r13
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	8c 01       	movw	r16, r24
    195a:	eb 01       	movw	r28, r22
    195c:	f4 2e       	mov	r15, r20
    195e:	69 01       	movw	r12, r18
  
  switch(msg)
    1960:	8a e0       	ldi	r24, 0x0A	; 10
    1962:	48 17       	cp	r20, r24
    1964:	21 f0       	breq	.+8      	; 0x196e <u8g_dev_ks0108_128x64_fn+0x28>
    1966:	e5 e1       	ldi	r30, 0x15	; 21
    1968:	4e 17       	cp	r20, r30
    196a:	51 f0       	breq	.+20     	; 0x1980 <u8g_dev_ks0108_128x64_fn+0x3a>
    196c:	4e c0       	rjmp	.+156    	; 0x1a0a <u8g_dev_ks0108_128x64_fn+0xc4>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
    196e:	4f ef       	ldi	r20, 0xFF	; 255
    1970:	c8 01       	movw	r24, r16
    1972:	d2 dd       	rcall	.-1116   	; 0x1518 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ks0108_128x64_init_seq);
    1974:	4c ef       	ldi	r20, 0xFC	; 252
    1976:	51 e0       	ldi	r21, 0x01	; 1
    1978:	be 01       	movw	r22, r28
    197a:	c8 01       	movw	r24, r16
    197c:	13 de       	rcall	.-986    	; 0x15a4 <u8g_WriteEscSeqP>
      break;
    197e:	45 c0       	rjmp	.+138    	; 0x1a0a <u8g_dev_ks0108_128x64_fn+0xc4>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    1980:	aa 80       	ldd	r10, Y+2	; 0x02
    1982:	bb 80       	ldd	r11, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	c8 01       	movw	r24, r16
    1988:	f1 dd       	rcall	.-1054   	; 0x156c <u8g_SetAddress>
        u8g_SetChipSelect(u8g, dev, 2);
    198a:	42 e0       	ldi	r20, 0x02	; 2
    198c:	be 01       	movw	r22, r28
    198e:	c8 01       	movw	r24, r16
    1990:	cd dd       	rcall	.-1126   	; 0x152c <u8g_SetChipSelect>
        u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (KS0108b) */
    1992:	f5 01       	movw	r30, r10
    1994:	44 81       	ldd	r20, Z+4	; 0x04
    1996:	48 6b       	ori	r20, 0xB8	; 184
    1998:	be 01       	movw	r22, r28
    199a:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x040 );		/* set address 0 */
    199c:	f1 dd       	rcall	.-1054   	; 0x1580 <u8g_WriteByte>
    199e:	40 e4       	ldi	r20, 0x40	; 64
    19a0:	be 01       	movw	r22, r28
    19a2:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    19a4:	ed dd       	rcall	.-1062   	; 0x1580 <u8g_WriteByte>
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	be 01       	movw	r22, r28
    19aa:	c8 01       	movw	r24, r16
        u8g_WriteSequence(u8g, dev, 64, pb->buf);
    19ac:	df dd       	rcall	.-1090   	; 0x156c <u8g_SetAddress>
    19ae:	f5 01       	movw	r30, r10
    19b0:	26 81       	ldd	r18, Z+6	; 0x06
    19b2:	37 81       	ldd	r19, Z+7	; 0x07
    19b4:	40 e4       	ldi	r20, 0x40	; 64
    19b6:	be 01       	movw	r22, r28
    19b8:	c8 01       	movw	r24, r16
        u8g_SetChipSelect(u8g, dev, 0);
    19ba:	ec dd       	rcall	.-1064   	; 0x1594 <u8g_WriteSequence>
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	be 01       	movw	r22, r28
    19c0:	c8 01       	movw	r24, r16
        
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
    19c2:	b4 dd       	rcall	.-1176   	; 0x152c <u8g_SetChipSelect>
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	be 01       	movw	r22, r28
    19c8:	c8 01       	movw	r24, r16
        u8g_SetChipSelect(u8g, dev, 1);
    19ca:	d0 dd       	rcall	.-1120   	; 0x156c <u8g_SetAddress>
    19cc:	41 e0       	ldi	r20, 0x01	; 1
    19ce:	be 01       	movw	r22, r28
    19d0:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (KS0108b) */
    19d2:	ac dd       	rcall	.-1192   	; 0x152c <u8g_SetChipSelect>
    19d4:	f5 01       	movw	r30, r10
    19d6:	44 81       	ldd	r20, Z+4	; 0x04
    19d8:	48 6b       	ori	r20, 0xB8	; 184
    19da:	be 01       	movw	r22, r28
    19dc:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x040 );		/* set address 0 */
    19de:	d0 dd       	rcall	.-1120   	; 0x1580 <u8g_WriteByte>
    19e0:	40 e4       	ldi	r20, 0x40	; 64
    19e2:	be 01       	movw	r22, r28
    19e4:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    19e6:	cc dd       	rcall	.-1128   	; 0x1580 <u8g_WriteByte>
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	be 01       	movw	r22, r28
    19ec:	c8 01       	movw	r24, r16
        u8g_WriteSequence(u8g, dev, 64, 64+(uint8_t *)pb->buf);
    19ee:	be dd       	rcall	.-1156   	; 0x156c <u8g_SetAddress>
    19f0:	f5 01       	movw	r30, r10
    19f2:	26 81       	ldd	r18, Z+6	; 0x06
    19f4:	37 81       	ldd	r19, Z+7	; 0x07
    19f6:	20 5c       	subi	r18, 0xC0	; 192
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	40 e4       	ldi	r20, 0x40	; 64
    19fc:	be 01       	movw	r22, r28
    19fe:	c8 01       	movw	r24, r16
        u8g_SetChipSelect(u8g, dev, 0);
    1a00:	c9 dd       	rcall	.-1134   	; 0x1594 <u8g_WriteSequence>
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	be 01       	movw	r22, r28
    1a06:	c8 01       	movw	r24, r16
    1a08:	91 dd       	rcall	.-1246   	; 0x152c <u8g_SetChipSelect>
        
      }
      break;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    1a0a:	96 01       	movw	r18, r12
    1a0c:	4f 2d       	mov	r20, r15
    1a0e:	be 01       	movw	r22, r28
    1a10:	c8 01       	movw	r24, r16
    1a12:	94 d4       	rcall	.+2344   	; 0x233c <u8g_dev_pb8v1_base_fn>
    1a14:	df 91       	pop	r29
}
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	df 90       	pop	r13
    1a20:	cf 90       	pop	r12
    1a22:	bf 90       	pop	r11
    1a24:	af 90       	pop	r10
    1a26:	08 95       	ret

00001a28 <u8g_font_get_byte>:
    1a28:	86 0f       	add	r24, r22
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	84 91       	lpm	r24, Z
    1a30:	08 95       	ret

00001a32 <u8g_font_get_word>:
    1a32:	fc 01       	movw	r30, r24
    1a34:	e6 0f       	add	r30, r22
    1a36:	f1 1d       	adc	r31, r1
    1a38:	84 91       	lpm	r24, Z
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	31 96       	adiw	r30, 0x01	; 1
    1a3e:	98 2f       	mov	r25, r24
    1a40:	88 27       	eor	r24, r24
    1a42:	e4 91       	lpm	r30, Z
    1a44:	8e 0f       	add	r24, r30
    1a46:	91 1d       	adc	r25, r1
    1a48:	08 95       	ret

00001a4a <u8g_font_GetFormat>:
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	ed cf       	rjmp	.-38     	; 0x1a28 <u8g_font_get_byte>
    1a4e:	08 95       	ret

00001a50 <u8g_font_GetFontGlyphStructureSize>:
    1a50:	fc df       	rcall	.-8      	; 0x1a4a <u8g_font_GetFormat>
    1a52:	88 23       	and	r24, r24
    1a54:	11 f0       	breq	.+4      	; 0x1a5a <u8g_font_GetFontGlyphStructureSize+0xa>
    1a56:	82 30       	cpi	r24, 0x02	; 2
    1a58:	11 f4       	brne	.+4      	; 0x1a5e <u8g_font_GetFontGlyphStructureSize+0xe>
    1a5a:	86 e0       	ldi	r24, 0x06	; 6
    1a5c:	08 95       	ret
    1a5e:	83 e0       	ldi	r24, 0x03	; 3
    1a60:	08 95       	ret

00001a62 <u8g_font_GetGlyphDataStart>:
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	eb 01       	movw	r28, r22
    1a68:	f3 df       	rcall	.-26     	; 0x1a50 <u8g_font_GetFontGlyphStructureSize>
    1a6a:	9e 01       	movw	r18, r28
    1a6c:	28 0f       	add	r18, r24
    1a6e:	31 1d       	adc	r19, r1
    1a70:	c9 01       	movw	r24, r18
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	08 95       	ret

00001a78 <u8g_CopyGlyphDataToCache>:
    1a78:	0f 93       	push	r16
    1a7a:	1f 93       	push	r17
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
    1a80:	8c 01       	movw	r16, r24
    1a82:	eb 01       	movw	r28, r22
    1a84:	dc 01       	movw	r26, r24
    1a86:	14 96       	adiw	r26, 0x04	; 4
    1a88:	8d 91       	ld	r24, X+
    1a8a:	9c 91       	ld	r25, X
    1a8c:	15 97       	sbiw	r26, 0x05	; 5
    1a8e:	dd df       	rcall	.-70     	; 0x1a4a <u8g_font_GetFormat>
    1a90:	88 23       	and	r24, r24
    1a92:	11 f0       	breq	.+4      	; 0x1a98 <u8g_CopyGlyphDataToCache+0x20>
    1a94:	82 30       	cpi	r24, 0x02	; 2
    1a96:	e9 f4       	brne	.+58     	; 0x1ad2 <u8g_CopyGlyphDataToCache+0x5a>
    1a98:	fe 01       	movw	r30, r28
    1a9a:	84 91       	lpm	r24, Z
    1a9c:	d8 01       	movw	r26, r16
    1a9e:	53 96       	adiw	r26, 0x13	; 19
    1aa0:	8c 93       	st	X, r24
    1aa2:	53 97       	sbiw	r26, 0x13	; 19
    1aa4:	31 96       	adiw	r30, 0x01	; 1
    1aa6:	e4 91       	lpm	r30, Z
    1aa8:	54 96       	adiw	r26, 0x14	; 20
    1aaa:	ec 93       	st	X, r30
    1aac:	54 97       	sbiw	r26, 0x14	; 20
    1aae:	fe 01       	movw	r30, r28
    1ab0:	33 96       	adiw	r30, 0x03	; 3
    1ab2:	e4 91       	lpm	r30, Z
    1ab4:	50 96       	adiw	r26, 0x10	; 16
    1ab6:	ec 93       	st	X, r30
    1ab8:	50 97       	sbiw	r26, 0x10	; 16
    1aba:	fe 01       	movw	r30, r28
    1abc:	34 96       	adiw	r30, 0x04	; 4
    1abe:	e4 91       	lpm	r30, Z
    1ac0:	51 96       	adiw	r26, 0x11	; 17
    1ac2:	ec 93       	st	X, r30
    1ac4:	51 97       	sbiw	r26, 0x11	; 17
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	35 96       	adiw	r30, 0x05	; 5
    1aca:	e4 91       	lpm	r30, Z
    1acc:	52 96       	adiw	r26, 0x12	; 18
    1ace:	ec 93       	st	X, r30
    1ad0:	21 c0       	rjmp	.+66     	; 0x1b14 <u8g_CopyGlyphDataToCache+0x9c>
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	84 91       	lpm	r24, Z
    1ad6:	98 2f       	mov	r25, r24
    1ad8:	9f 70       	andi	r25, 0x0F	; 15
    1ada:	92 50       	subi	r25, 0x02	; 2
    1adc:	d8 01       	movw	r26, r16
    1ade:	52 96       	adiw	r26, 0x12	; 18
    1ae0:	9c 93       	st	X, r25
    1ae2:	52 97       	sbiw	r26, 0x12	; 18
    1ae4:	82 95       	swap	r24
    1ae6:	8f 70       	andi	r24, 0x0F	; 15
    1ae8:	51 96       	adiw	r26, 0x11	; 17
    1aea:	8c 93       	st	X, r24
    1aec:	51 97       	sbiw	r26, 0x11	; 17
    1aee:	31 96       	adiw	r30, 0x01	; 1
    1af0:	e4 91       	lpm	r30, Z
    1af2:	8e 2f       	mov	r24, r30
    1af4:	8f 70       	andi	r24, 0x0F	; 15
    1af6:	54 96       	adiw	r26, 0x14	; 20
    1af8:	8c 93       	st	X, r24
    1afa:	54 97       	sbiw	r26, 0x14	; 20
    1afc:	e2 95       	swap	r30
    1afe:	ef 70       	andi	r30, 0x0F	; 15
    1b00:	53 96       	adiw	r26, 0x13	; 19
    1b02:	ec 93       	st	X, r30
    1b04:	53 97       	sbiw	r26, 0x13	; 19
    1b06:	fe 01       	movw	r30, r28
    1b08:	32 96       	adiw	r30, 0x02	; 2
    1b0a:	e4 91       	lpm	r30, Z
    1b0c:	e2 95       	swap	r30
    1b0e:	ef 70       	andi	r30, 0x0F	; 15
    1b10:	50 96       	adiw	r26, 0x10	; 16
    1b12:	ec 93       	st	X, r30
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	08 95       	ret

00001b1e <u8g_FillEmptyGlyphCache>:
    1b1e:	fc 01       	movw	r30, r24
    1b20:	10 8a       	std	Z+16, r1	; 0x10
    1b22:	13 8a       	std	Z+19, r1	; 0x13
    1b24:	14 8a       	std	Z+20, r1	; 0x14
    1b26:	11 8a       	std	Z+17, r1	; 0x11
    1b28:	12 8a       	std	Z+18, r1	; 0x12
    1b2a:	08 95       	ret

00001b2c <u8g_font_calc_vref_font>:
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	08 95       	ret

00001b30 <u8g_font_GetCapitalAHeight>:
    1b30:	65 e0       	ldi	r22, 0x05	; 5
    1b32:	7a cf       	rjmp	.-268    	; 0x1a28 <u8g_font_get_byte>
    1b34:	08 95       	ret

00001b36 <u8g_font_GetEncoding65Pos>:
    1b36:	66 e0       	ldi	r22, 0x06	; 6
    1b38:	7c cf       	rjmp	.-264    	; 0x1a32 <u8g_font_get_word>
    1b3a:	08 95       	ret

00001b3c <u8g_font_GetEncoding97Pos>:
    1b3c:	68 e0       	ldi	r22, 0x08	; 8
    1b3e:	79 cf       	rjmp	.-270    	; 0x1a32 <u8g_font_get_word>
    1b40:	08 95       	ret

00001b42 <u8g_font_GetFontStartEncoding>:
    1b42:	6a e0       	ldi	r22, 0x0A	; 10
    1b44:	71 cf       	rjmp	.-286    	; 0x1a28 <u8g_font_get_byte>
    1b46:	08 95       	ret

00001b48 <u8g_font_GetFontEndEncoding>:
    1b48:	6b e0       	ldi	r22, 0x0B	; 11
    1b4a:	6e cf       	rjmp	.-292    	; 0x1a28 <u8g_font_get_byte>
    1b4c:	08 95       	ret

00001b4e <u8g_font_GetLowerGDescent>:
    1b4e:	6c e0       	ldi	r22, 0x0C	; 12
    1b50:	6b cf       	rjmp	.-298    	; 0x1a28 <u8g_font_get_byte>
    1b52:	08 95       	ret

00001b54 <u8g_font_GetFontAscent>:
    1b54:	6d e0       	ldi	r22, 0x0D	; 13
    1b56:	68 cf       	rjmp	.-304    	; 0x1a28 <u8g_font_get_byte>
    1b58:	08 95       	ret

00001b5a <u8g_font_GetFontDescent>:
    1b5a:	6e e0       	ldi	r22, 0x0E	; 14
    1b5c:	65 cf       	rjmp	.-310    	; 0x1a28 <u8g_font_get_byte>
    1b5e:	08 95       	ret

00001b60 <u8g_font_GetFontXAscent>:
    1b60:	6f e0       	ldi	r22, 0x0F	; 15
    1b62:	62 cf       	rjmp	.-316    	; 0x1a28 <u8g_font_get_byte>
    1b64:	08 95       	ret

00001b66 <u8g_font_GetFontXDescent>:
    1b66:	60 e1       	ldi	r22, 0x10	; 16
    1b68:	5f cf       	rjmp	.-322    	; 0x1a28 <u8g_font_get_byte>
    1b6a:	08 95       	ret

00001b6c <u8g_GetGlyph>:
    1b6c:	bf 92       	push	r11
    1b6e:	cf 92       	push	r12
    1b70:	df 92       	push	r13
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	7c 01       	movw	r14, r24
    1b80:	d6 2e       	mov	r13, r22
    1b82:	fc 01       	movw	r30, r24
    1b84:	c4 81       	ldd	r28, Z+4	; 0x04
    1b86:	d5 81       	ldd	r29, Z+5	; 0x05
    1b88:	ce 01       	movw	r24, r28
    1b8a:	5f df       	rcall	.-322    	; 0x1a4a <u8g_font_GetFormat>
    1b8c:	18 2f       	mov	r17, r24
    1b8e:	f7 01       	movw	r30, r14
    1b90:	84 81       	ldd	r24, Z+4	; 0x04
    1b92:	95 81       	ldd	r25, Z+5	; 0x05
    1b94:	5d df       	rcall	.-326    	; 0x1a50 <u8g_font_GetFontGlyphStructureSize>
    1b96:	c8 2e       	mov	r12, r24
    1b98:	11 30       	cpi	r17, 0x01	; 1
    1b9a:	19 f0       	breq	.+6      	; 0x1ba2 <u8g_GetGlyph+0x36>
    1b9c:	bb 24       	eor	r11, r11
    1b9e:	ba 94       	dec	r11
    1ba0:	04 c0       	rjmp	.+8      	; 0x1baa <u8g_GetGlyph+0x3e>
    1ba2:	0f 2e       	mov	r0, r31
    1ba4:	ff e0       	ldi	r31, 0x0F	; 15
    1ba6:	bf 2e       	mov	r11, r31
    1ba8:	f0 2d       	mov	r31, r0
    1baa:	f7 01       	movw	r30, r14
    1bac:	84 81       	ldd	r24, Z+4	; 0x04
    1bae:	95 81       	ldd	r25, Z+5	; 0x05
    1bb0:	c8 df       	rcall	.-112    	; 0x1b42 <u8g_font_GetFontStartEncoding>
    1bb2:	18 2f       	mov	r17, r24
    1bb4:	f7 01       	movw	r30, r14
    1bb6:	84 81       	ldd	r24, Z+4	; 0x04
    1bb8:	95 81       	ldd	r25, Z+5	; 0x05
    1bba:	c6 df       	rcall	.-116    	; 0x1b48 <u8g_font_GetFontEndEncoding>
    1bbc:	08 2f       	mov	r16, r24
    1bbe:	f7 01       	movw	r30, r14
    1bc0:	84 81       	ldd	r24, Z+4	; 0x04
    1bc2:	95 81       	ldd	r25, Z+5	; 0x05
    1bc4:	bb df       	rcall	.-138    	; 0x1b3c <u8g_font_GetEncoding97Pos>
    1bc6:	f0 e6       	ldi	r31, 0x60	; 96
    1bc8:	fd 15       	cp	r31, r13
    1bca:	30 f4       	brcc	.+12     	; 0x1bd8 <u8g_GetGlyph+0x6c>
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	21 f0       	breq	.+8      	; 0x1bd8 <u8g_GetGlyph+0x6c>
    1bd0:	c8 0f       	add	r28, r24
    1bd2:	d9 1f       	adc	r29, r25
    1bd4:	11 e6       	ldi	r17, 0x61	; 97
    1bd6:	0e c0       	rjmp	.+28     	; 0x1bf4 <u8g_GetGlyph+0x88>
    1bd8:	f7 01       	movw	r30, r14
    1bda:	84 81       	ldd	r24, Z+4	; 0x04
    1bdc:	95 81       	ldd	r25, Z+5	; 0x05
    1bde:	ab df       	rcall	.-170    	; 0x1b36 <u8g_font_GetEncoding65Pos>
    1be0:	f0 e4       	ldi	r31, 0x40	; 64
    1be2:	fd 15       	cp	r31, r13
    1be4:	30 f4       	brcc	.+12     	; 0x1bf2 <u8g_GetGlyph+0x86>
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	21 f0       	breq	.+8      	; 0x1bf2 <u8g_GetGlyph+0x86>
    1bea:	c8 0f       	add	r28, r24
    1bec:	d9 1f       	adc	r29, r25
    1bee:	11 e4       	ldi	r17, 0x41	; 65
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <u8g_GetGlyph+0x88>
    1bf2:	61 96       	adiw	r28, 0x11	; 17
    1bf4:	0d 15       	cp	r16, r13
    1bf6:	28 f4       	brcc	.+10     	; 0x1c02 <u8g_GetGlyph+0x96>
    1bf8:	c7 01       	movw	r24, r14
    1bfa:	91 df       	rcall	.-222    	; 0x1b1e <u8g_FillEmptyGlyphCache>
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	22 c0       	rjmp	.+68     	; 0x1c46 <u8g_GetGlyph+0xda>
    1c02:	01 17       	cp	r16, r17
    1c04:	e0 f0       	brcs	.+56     	; 0x1c3e <u8g_GetGlyph+0xd2>
    1c06:	fe 01       	movw	r30, r28
    1c08:	84 91       	lpm	r24, Z
    1c0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c0c:	11 f4       	brne	.+4      	; 0x1c12 <u8g_GetGlyph+0xa6>
    1c0e:	21 96       	adiw	r28, 0x01	; 1
    1c10:	12 c0       	rjmp	.+36     	; 0x1c36 <u8g_GetGlyph+0xca>
    1c12:	1d 11       	cpse	r17, r13
    1c14:	06 c0       	rjmp	.+12     	; 0x1c22 <u8g_GetGlyph+0xb6>
    1c16:	be 01       	movw	r22, r28
    1c18:	c7 01       	movw	r24, r14
    1c1a:	2e df       	rcall	.-420    	; 0x1a78 <u8g_CopyGlyphDataToCache>
    1c1c:	8c 2f       	mov	r24, r28
    1c1e:	9d 2f       	mov	r25, r29
    1c20:	12 c0       	rjmp	.+36     	; 0x1c46 <u8g_GetGlyph+0xda>
    1c22:	fe 01       	movw	r30, r28
    1c24:	32 96       	adiw	r30, 0x02	; 2
    1c26:	e4 91       	lpm	r30, Z
    1c28:	eb 21       	and	r30, r11
    1c2a:	8c 2d       	mov	r24, r12
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	8e 0f       	add	r24, r30
    1c30:	91 1d       	adc	r25, r1
    1c32:	c8 0f       	add	r28, r24
    1c34:	d9 1f       	adc	r29, r25
    1c36:	10 17       	cp	r17, r16
    1c38:	11 f0       	breq	.+4      	; 0x1c3e <u8g_GetGlyph+0xd2>
    1c3a:	1f 5f       	subi	r17, 0xFF	; 255
    1c3c:	e4 cf       	rjmp	.-56     	; 0x1c06 <u8g_GetGlyph+0x9a>
    1c3e:	c7 01       	movw	r24, r14
    1c40:	6e df       	rcall	.-292    	; 0x1b1e <u8g_FillEmptyGlyphCache>
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	df 90       	pop	r13
    1c54:	cf 90       	pop	r12
    1c56:	bf 90       	pop	r11
    1c58:	08 95       	ret

00001c5a <u8g_draw_glyph>:
    1c5a:	8f 92       	push	r8
    1c5c:	9f 92       	push	r9
    1c5e:	af 92       	push	r10
    1c60:	bf 92       	push	r11
    1c62:	cf 92       	push	r12
    1c64:	df 92       	push	r13
    1c66:	ef 92       	push	r14
    1c68:	ff 92       	push	r15
    1c6a:	0f 93       	push	r16
    1c6c:	1f 93       	push	r17
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	6c 01       	movw	r12, r24
    1c74:	16 2f       	mov	r17, r22
    1c76:	c4 2f       	mov	r28, r20
    1c78:	62 2f       	mov	r22, r18
    1c7a:	78 df       	rcall	.-272    	; 0x1b6c <u8g_GetGlyph>
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <u8g_draw_glyph+0x28>
    1c80:	3b c0       	rjmp	.+118    	; 0x1cf8 <u8g_draw_glyph+0x9e>
    1c82:	bc 01       	movw	r22, r24
    1c84:	f6 01       	movw	r30, r12
    1c86:	84 81       	ldd	r24, Z+4	; 0x04
    1c88:	95 81       	ldd	r25, Z+5	; 0x05
    1c8a:	eb de       	rcall	.-554    	; 0x1a62 <u8g_font_GetGlyphDataStart>
    1c8c:	7c 01       	movw	r14, r24
    1c8e:	f6 01       	movw	r30, r12
    1c90:	d3 89       	ldd	r29, Z+19	; 0x13
    1c92:	94 88       	ldd	r9, Z+20	; 0x14
    1c94:	a1 88       	ldd	r10, Z+17	; 0x11
    1c96:	a1 0e       	add	r10, r17
    1c98:	82 89       	ldd	r24, Z+18	; 0x12
    1c9a:	1c 2f       	mov	r17, r28
    1c9c:	18 1b       	sub	r17, r24
    1c9e:	11 50       	subi	r17, 0x01	; 1
    1ca0:	19 19       	sub	r17, r9
    1ca2:	1f 5f       	subi	r17, 0xFF	; 255
    1ca4:	09 2d       	mov	r16, r9
    1ca6:	2d 2f       	mov	r18, r29
    1ca8:	41 2f       	mov	r20, r17
    1caa:	6a 2d       	mov	r22, r10
    1cac:	c6 01       	movw	r24, r12
    1cae:	fc db       	rcall	.-2056   	; 0x14a8 <u8g_IsBBXIntersection>
    1cb0:	81 11       	cpse	r24, r1
    1cb2:	03 c0       	rjmp	.+6      	; 0x1cba <u8g_draw_glyph+0x60>
    1cb4:	f6 01       	movw	r30, r12
    1cb6:	80 89       	ldd	r24, Z+16	; 0x10
    1cb8:	20 c0       	rjmp	.+64     	; 0x1cfa <u8g_draw_glyph+0xa0>
    1cba:	d9 5f       	subi	r29, 0xF9	; 249
    1cbc:	bd 2e       	mov	r11, r29
    1cbe:	b6 94       	lsr	r11
    1cc0:	b6 94       	lsr	r11
    1cc2:	b6 94       	lsr	r11
    1cc4:	81 2c       	mov	r8, r1
    1cc6:	13 c0       	rjmp	.+38     	; 0x1cee <u8g_draw_glyph+0x94>
    1cc8:	f7 01       	movw	r30, r14
    1cca:	04 91       	lpm	r16, Z
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	41 2f       	mov	r20, r17
    1cd0:	6d 2f       	mov	r22, r29
    1cd2:	c6 01       	movw	r24, r12
    1cd4:	eb d1       	rcall	.+982    	; 0x20ac <u8g_Draw8Pixel>
    1cd6:	ff ef       	ldi	r31, 0xFF	; 255
    1cd8:	ef 1a       	sub	r14, r31
    1cda:	ff 0a       	sbc	r15, r31
    1cdc:	d8 5f       	subi	r29, 0xF8	; 248
    1cde:	cf 5f       	subi	r28, 0xFF	; 255
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <u8g_draw_glyph+0x8c>
    1ce2:	da 2d       	mov	r29, r10
    1ce4:	c0 e0       	ldi	r28, 0x00	; 0
    1ce6:	cb 15       	cp	r28, r11
    1ce8:	78 f3       	brcs	.-34     	; 0x1cc8 <u8g_draw_glyph+0x6e>
    1cea:	1f 5f       	subi	r17, 0xFF	; 255
    1cec:	83 94       	inc	r8
    1cee:	89 14       	cp	r8, r9
    1cf0:	c0 f3       	brcs	.-16     	; 0x1ce2 <u8g_draw_glyph+0x88>
    1cf2:	f6 01       	movw	r30, r12
    1cf4:	80 89       	ldd	r24, Z+16	; 0x10
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <u8g_draw_glyph+0xa0>
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	ff 90       	pop	r15
    1d04:	ef 90       	pop	r14
    1d06:	df 90       	pop	r13
    1d08:	cf 90       	pop	r12
    1d0a:	bf 90       	pop	r11
    1d0c:	af 90       	pop	r10
    1d0e:	9f 90       	pop	r9
    1d10:	8f 90       	pop	r8
    1d12:	08 95       	ret

00001d14 <u8g_DrawStr>:
    1d14:	cf 92       	push	r12
    1d16:	df 92       	push	r13
    1d18:	ff 92       	push	r15
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	6c 01       	movw	r12, r24
    1d24:	16 2f       	mov	r17, r22
    1d26:	f4 2e       	mov	r15, r20
    1d28:	e9 01       	movw	r28, r18
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	55 96       	adiw	r26, 0x15	; 21
    1d2e:	ed 91       	ld	r30, X+
    1d30:	fc 91       	ld	r31, X
    1d32:	56 97       	sbiw	r26, 0x16	; 22
    1d34:	19 95       	eicall
    1d36:	f8 0e       	add	r15, r24
    1d38:	00 e0       	ldi	r16, 0x00	; 0
    1d3a:	07 c0       	rjmp	.+14     	; 0x1d4a <u8g_DrawStr+0x36>
    1d3c:	4f 2d       	mov	r20, r15
    1d3e:	61 2f       	mov	r22, r17
    1d40:	c6 01       	movw	r24, r12
    1d42:	8b df       	rcall	.-234    	; 0x1c5a <u8g_draw_glyph>
    1d44:	18 0f       	add	r17, r24
    1d46:	08 0f       	add	r16, r24
    1d48:	21 96       	adiw	r28, 0x01	; 1
    1d4a:	28 81       	ld	r18, Y
    1d4c:	21 11       	cpse	r18, r1
    1d4e:	f6 cf       	rjmp	.-20     	; 0x1d3c <u8g_DrawStr+0x28>
    1d50:	80 2f       	mov	r24, r16
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	ff 90       	pop	r15
    1d5c:	df 90       	pop	r13
    1d5e:	cf 90       	pop	r12
    1d60:	08 95       	ret

00001d62 <u8g_UpdateRefHeight>:
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	ec 01       	movw	r28, r24
    1d68:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	99 f1       	breq	.+102    	; 0x1dd6 <u8g_UpdateRefHeight+0x74>
    1d70:	2f 89       	ldd	r18, Y+23	; 0x17
    1d72:	21 11       	cpse	r18, r1
    1d74:	07 c0       	rjmp	.+14     	; 0x1d84 <u8g_UpdateRefHeight+0x22>
    1d76:	dc de       	rcall	.-584    	; 0x1b30 <u8g_font_GetCapitalAHeight>
    1d78:	88 8f       	std	Y+24, r24	; 0x18
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7e:	e7 de       	rcall	.-562    	; 0x1b4e <u8g_font_GetLowerGDescent>
    1d80:	89 8f       	std	Y+25, r24	; 0x19
    1d82:	0f c0       	rjmp	.+30     	; 0x1da2 <u8g_UpdateRefHeight+0x40>
    1d84:	21 30       	cpi	r18, 0x01	; 1
    1d86:	39 f4       	brne	.+14     	; 0x1d96 <u8g_UpdateRefHeight+0x34>
    1d88:	eb de       	rcall	.-554    	; 0x1b60 <u8g_font_GetFontXAscent>
    1d8a:	88 8f       	std	Y+24, r24	; 0x18
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d90:	ea de       	rcall	.-556    	; 0x1b66 <u8g_font_GetFontXDescent>
    1d92:	89 8f       	std	Y+25, r24	; 0x19
    1d94:	06 c0       	rjmp	.+12     	; 0x1da2 <u8g_UpdateRefHeight+0x40>
    1d96:	de de       	rcall	.-580    	; 0x1b54 <u8g_font_GetFontAscent>
    1d98:	88 8f       	std	Y+24, r24	; 0x18
    1d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9e:	dd de       	rcall	.-582    	; 0x1b5a <u8g_font_GetFontDescent>
    1da0:	89 8f       	std	Y+25, r24	; 0x19
    1da2:	88 8d       	ldd	r24, Y+24	; 0x18
    1da4:	29 8d       	ldd	r18, Y+25	; 0x19
    1da6:	08 2e       	mov	r0, r24
    1da8:	00 0c       	add	r0, r0
    1daa:	99 0b       	sbc	r25, r25
    1dac:	82 1b       	sub	r24, r18
    1dae:	91 09       	sbc	r25, r1
    1db0:	27 fd       	sbrc	r18, 7
    1db2:	93 95       	inc	r25
    1db4:	9c 01       	movw	r18, r24
    1db6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1db8:	40 34       	cpi	r20, 0x40	; 64
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <u8g_UpdateRefHeight+0x72>
    1dbc:	84 9f       	mul	r24, r20
    1dbe:	90 01       	movw	r18, r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	00 24       	eor	r0, r0
    1dc4:	22 0f       	add	r18, r18
    1dc6:	33 1f       	adc	r19, r19
    1dc8:	00 1c       	adc	r0, r0
    1dca:	22 0f       	add	r18, r18
    1dcc:	33 1f       	adc	r19, r19
    1dce:	00 1c       	adc	r0, r0
    1dd0:	23 2f       	mov	r18, r19
    1dd2:	30 2d       	mov	r19, r0
    1dd4:	2b 8f       	std	Y+27, r18	; 0x1b
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	08 95       	ret

00001ddc <u8g_SetFontPosBaseline>:
    1ddc:	26 e9       	ldi	r18, 0x96	; 150
    1dde:	3d e0       	ldi	r19, 0x0D	; 13
    1de0:	fc 01       	movw	r30, r24
    1de2:	36 8b       	std	Z+22, r19	; 0x16
    1de4:	25 8b       	std	Z+21, r18	; 0x15
    1de6:	08 95       	ret

00001de8 <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
  if ( u8g->font != font )
    1dec:	fc 01       	movw	r30, r24
    1dee:	24 81       	ldd	r18, Z+4	; 0x04
    1df0:	35 81       	ldd	r19, Z+5	; 0x05
    1df2:	26 17       	cp	r18, r22
    1df4:	37 07       	cpc	r19, r23
    1df6:	31 f0       	breq	.+12     	; 0x1e04 <u8g_SetFont+0x1c>
    1df8:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    1dfa:	75 83       	std	Z+5, r23	; 0x05
    1dfc:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    1dfe:	b1 df       	rcall	.-158    	; 0x1d62 <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
    1e00:	ce 01       	movw	r24, r28
    1e02:	ec df       	rcall	.-40     	; 0x1ddc <u8g_SetFontPosBaseline>
  }
}
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	08 95       	ret

00001e0a <u8g_DrawLine>:
*/

#include "u8g.h"

void u8g_DrawLine(u8g_t *u8g, u8g_uint_t x1, u8g_uint_t y1, u8g_uint_t x2, u8g_uint_t y2)
{
    1e0a:	af 92       	push	r10
    1e0c:	bf 92       	push	r11
    1e0e:	cf 92       	push	r12
    1e10:	df 92       	push	r13
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	5c 01       	movw	r10, r24
    1e20:	c6 2f       	mov	r28, r22
    1e22:	14 2f       	mov	r17, r20
    1e24:	f2 2e       	mov	r15, r18

  uint8_t swapxy = 0;
  
  /* no BBX intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    1e26:	26 17       	cp	r18, r22
    1e28:	18 f4       	brcc	.+6      	; 0x1e30 <u8g_DrawLine+0x26>
    1e2a:	e6 2e       	mov	r14, r22
    1e2c:	e2 1a       	sub	r14, r18
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <u8g_DrawLine+0x2a>
    1e30:	e2 2e       	mov	r14, r18
    1e32:	e6 1a       	sub	r14, r22
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    1e34:	01 17       	cp	r16, r17
    1e36:	18 f4       	brcc	.+6      	; 0x1e3e <u8g_DrawLine+0x34>
    1e38:	c1 2e       	mov	r12, r17
    1e3a:	c0 1a       	sub	r12, r16
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <u8g_DrawLine+0x38>
    1e3e:	c0 2e       	mov	r12, r16
    1e40:	c1 1a       	sub	r12, r17

  if ( dy > dx ) 
    1e42:	ec 14       	cp	r14, r12
    1e44:	28 f0       	brcs	.+10     	; 0x1e50 <u8g_DrawLine+0x46>
    1e46:	8c 2d       	mov	r24, r12
    1e48:	ce 2c       	mov	r12, r14
    1e4a:	e8 2e       	mov	r14, r24
  u8g_uint_t x,y;
  u8g_uint_t dx, dy;
  u8g_int_t err;
  u8g_int_t ystep;

  uint8_t swapxy = 0;
    1e4c:	d1 2c       	mov	r13, r1
    1e4e:	08 c0       	rjmp	.+16     	; 0x1e60 <u8g_DrawLine+0x56>
    1e50:	8f 2d       	mov	r24, r15
  if ( dy > dx ) 
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
    1e52:	f0 2e       	mov	r15, r16
    1e54:	08 2f       	mov	r16, r24
    1e56:	8c 2f       	mov	r24, r28

  if ( dy > dx ) 
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    1e58:	c1 2f       	mov	r28, r17
    1e5a:	18 2f       	mov	r17, r24
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
  {
    swapxy = 1;
    1e5c:	dd 24       	eor	r13, r13
    1e5e:	d3 94       	inc	r13
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    1e60:	fc 16       	cp	r15, r28
    1e62:	30 f4       	brcc	.+12     	; 0x1e70 <u8g_DrawLine+0x66>
    1e64:	81 2f       	mov	r24, r17
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
    1e66:	10 2f       	mov	r17, r16
    1e68:	08 2f       	mov	r16, r24
    1e6a:	8c 2f       	mov	r24, r28
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    1e6c:	cf 2d       	mov	r28, r15
    1e6e:	f8 2e       	mov	r15, r24
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    1e70:	dc 2d       	mov	r29, r12
    1e72:	d6 95       	lsr	r29
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    1e74:	10 17       	cp	r17, r16
    1e76:	10 f4       	brcc	.+4      	; 0x1e7c <u8g_DrawLine+0x72>
    1e78:	01 e0       	ldi	r16, 0x01	; 1
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <u8g_DrawLine+0x74>
    1e7c:	0f ef       	ldi	r16, 0xFF	; 255
  y = y1;

#ifndef  U8G_16BIT
  if ( x2 == 255 )
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	f8 12       	cpse	r15, r24
    1e82:	12 c0       	rjmp	.+36     	; 0x1ea8 <u8g_DrawLine+0x9e>
    x2--;
    1e84:	fa 94       	dec	r15
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    1e86:	10 c0       	rjmp	.+32     	; 0x1ea8 <u8g_DrawLine+0x9e>
  {
    if ( swapxy == 0 ) 
    1e88:	d1 10       	cpse	r13, r1
    1e8a:	05 c0       	rjmp	.+10     	; 0x1e96 <u8g_DrawLine+0x8c>
      u8g_DrawPixel(u8g, x, y); 
    1e8c:	41 2f       	mov	r20, r17
    1e8e:	6c 2f       	mov	r22, r28
    1e90:	c5 01       	movw	r24, r10
    1e92:	04 d1       	rcall	.+520    	; 0x209c <u8g_DrawPixel>
    1e94:	04 c0       	rjmp	.+8      	; 0x1e9e <u8g_DrawLine+0x94>
    else 
      u8g_DrawPixel(u8g, y, x); 
    1e96:	4c 2f       	mov	r20, r28
    1e98:	61 2f       	mov	r22, r17
    1e9a:	c5 01       	movw	r24, r10
    1e9c:	ff d0       	rcall	.+510    	; 0x209c <u8g_DrawPixel>
    err -= (uint8_t)dy;
    1e9e:	de 19       	sub	r29, r14
    if ( err < 0 ) 
    1ea0:	12 f4       	brpl	.+4      	; 0x1ea6 <u8g_DrawLine+0x9c>
    {
      y += (u8g_uint_t)ystep;
    1ea2:	10 0f       	add	r17, r16
      err += (u8g_uint_t)dx;
    1ea4:	dc 0d       	add	r29, r12
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    1ea6:	cf 5f       	subi	r28, 0xFF	; 255
    1ea8:	fc 16       	cp	r15, r28
    1eaa:	70 f7       	brcc	.-36     	; 0x1e88 <u8g_DrawLine+0x7e>
    {
      y += (u8g_uint_t)ystep;
      err += (u8g_uint_t)dx;
    }
  }
}
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	ff 90       	pop	r15
    1eb6:	ef 90       	pop	r14
    1eb8:	df 90       	pop	r13
    1eba:	cf 90       	pop	r12
    1ebc:	bf 90       	pop	r11
    1ebe:	af 90       	pop	r10
    1ec0:	08 95       	ret

00001ec2 <u8g_call_dev_fn>:
  u8g->pin_list[U8G_PI_DI] = di;
  u8g->pin_list[U8G_PI_RW] = rw;
  u8g->pin_list[U8G_PI_RESET] = reset;

  return u8g_Begin(u8g);
}
    1ec2:	db 01       	movw	r26, r22
    1ec4:	ed 91       	ld	r30, X+
    1ec6:	fc 91       	ld	r31, X
    1ec8:	19 95       	eicall
    1eca:	08 95       	ret

00001ecc <u8g_InitLL>:
    1ecc:	0f 93       	push	r16
    1ece:	1f 93       	push	r17
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	ec 01       	movw	r28, r24
    1ed6:	8b 01       	movw	r16, r22
    1ed8:	e9 a9       	ldd	r30, Y+49	; 0x31
    1eda:	fa a9       	ldd	r31, Y+50	; 0x32
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	19 95       	eicall
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4a e0       	ldi	r20, 0x0A	; 10
    1ee6:	b8 01       	movw	r22, r16
    1ee8:	ce 01       	movw	r24, r28
    1eea:	eb df       	rcall	.-42     	; 0x1ec2 <u8g_call_dev_fn>
    1eec:	18 2f       	mov	r17, r24
    1eee:	e9 a9       	ldd	r30, Y+49	; 0x31
    1ef0:	fa a9       	ldd	r31, Y+50	; 0x32
    1ef2:	83 e0       	ldi	r24, 0x03	; 3
    1ef4:	19 95       	eicall
    1ef6:	e9 a9       	ldd	r30, Y+49	; 0x31
    1ef8:	fa a9       	ldd	r31, Y+50	; 0x32
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	19 95       	eicall
    1efe:	81 2f       	mov	r24, r17
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	08 95       	ret

00001f0a <u8g_FirstPageLL>:
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	ec 01       	movw	r28, r24
    1f14:	8b 01       	movw	r16, r22
    1f16:	e9 a9       	ldd	r30, Y+49	; 0x31
    1f18:	fa a9       	ldd	r31, Y+50	; 0x32
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	19 95       	eicall
    1f1e:	e9 a9       	ldd	r30, Y+49	; 0x31
    1f20:	fa a9       	ldd	r31, Y+50	; 0x32
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	19 95       	eicall
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	44 e1       	ldi	r20, 0x14	; 20
    1f2c:	b8 01       	movw	r22, r16
    1f2e:	ce 01       	movw	r24, r28
    1f30:	c8 df       	rcall	.-112    	; 0x1ec2 <u8g_call_dev_fn>
    1f32:	9e 01       	movw	r18, r28
    1f34:	2d 5c       	subi	r18, 0xCD	; 205
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	47 e1       	ldi	r20, 0x17	; 23
    1f3a:	b8 01       	movw	r22, r16
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	c1 df       	rcall	.-126    	; 0x1ec2 <u8g_call_dev_fn>
    1f40:	e9 a9       	ldd	r30, Y+49	; 0x31
    1f42:	fa a9       	ldd	r31, Y+50	; 0x32
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	19 95       	eicall
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	08 95       	ret

00001f52 <u8g_NextPageLL>:
    1f52:	ef 92       	push	r14
    1f54:	ff 92       	push	r15
    1f56:	1f 93       	push	r17
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	ec 01       	movw	r28, r24
    1f5e:	7b 01       	movw	r14, r22
    1f60:	e9 a9       	ldd	r30, Y+49	; 0x31
    1f62:	fa a9       	ldd	r31, Y+50	; 0x32
    1f64:	82 e0       	ldi	r24, 0x02	; 2
    1f66:	19 95       	eicall
    1f68:	e9 a9       	ldd	r30, Y+49	; 0x31
    1f6a:	fa a9       	ldd	r31, Y+50	; 0x32
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	19 95       	eicall
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	45 e1       	ldi	r20, 0x15	; 21
    1f76:	b7 01       	movw	r22, r14
    1f78:	ce 01       	movw	r24, r28
    1f7a:	a3 df       	rcall	.-186    	; 0x1ec2 <u8g_call_dev_fn>
    1f7c:	18 2f       	mov	r17, r24
    1f7e:	88 23       	and	r24, r24
    1f80:	39 f0       	breq	.+14     	; 0x1f90 <u8g_NextPageLL+0x3e>
    1f82:	9e 01       	movw	r18, r28
    1f84:	2d 5c       	subi	r18, 0xCD	; 205
    1f86:	3f 4f       	sbci	r19, 0xFF	; 255
    1f88:	47 e1       	ldi	r20, 0x17	; 23
    1f8a:	b7 01       	movw	r22, r14
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	99 df       	rcall	.-206    	; 0x1ec2 <u8g_call_dev_fn>
    1f90:	e9 a9       	ldd	r30, Y+49	; 0x31
    1f92:	fa a9       	ldd	r31, Y+50	; 0x32
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	19 95       	eicall
    1f98:	81 2f       	mov	r24, r17
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	ff 90       	pop	r15
    1fa2:	ef 90       	pop	r14
    1fa4:	08 95       	ret

00001fa6 <u8g_DrawPixelLL>:
    1fa6:	52 2f       	mov	r21, r18
    1fa8:	9c 01       	movw	r18, r24
    1faa:	24 5e       	subi	r18, 0xE4	; 228
    1fac:	3f 4f       	sbci	r19, 0xFF	; 255
    1fae:	fc 01       	movw	r30, r24
    1fb0:	44 8f       	std	Z+28, r20	; 0x1c
    1fb2:	55 8f       	std	Z+29, r21	; 0x1d
    1fb4:	42 e3       	ldi	r20, 0x32	; 50
    1fb6:	85 cf       	rjmp	.-246    	; 0x1ec2 <u8g_call_dev_fn>
    1fb8:	08 95       	ret

00001fba <u8g_Draw8PixelLL>:
    1fba:	ef 92       	push	r14
    1fbc:	0f 93       	push	r16
    1fbe:	52 2f       	mov	r21, r18
    1fc0:	9c 01       	movw	r18, r24
    1fc2:	24 5e       	subi	r18, 0xE4	; 228
    1fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	44 8f       	std	Z+28, r20	; 0x1c
    1fca:	55 8f       	std	Z+29, r21	; 0x1d
    1fcc:	07 8f       	std	Z+31, r16	; 0x1f
    1fce:	e6 8e       	std	Z+30, r14	; 0x1e
    1fd0:	4b e3       	ldi	r20, 0x3B	; 59
    1fd2:	77 df       	rcall	.-274    	; 0x1ec2 <u8g_call_dev_fn>
    1fd4:	0f 91       	pop	r16
    1fd6:	ef 90       	pop	r14
    1fd8:	08 95       	ret

00001fda <u8g_GetWidthLL>:
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	1f 92       	push	r1
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	9e 01       	movw	r18, r28
    1fe6:	2f 5f       	subi	r18, 0xFF	; 255
    1fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fea:	46 e4       	ldi	r20, 0x46	; 70
    1fec:	6a df       	rcall	.-300    	; 0x1ec2 <u8g_call_dev_fn>
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	0f 90       	pop	r0
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	08 95       	ret

00001ff8 <u8g_GetHeightLL>:
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	1f 92       	push	r1
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	9e 01       	movw	r18, r28
    2004:	2f 5f       	subi	r18, 0xFF	; 255
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	47 e4       	ldi	r20, 0x47	; 71
    200a:	5b df       	rcall	.-330    	; 0x1ec2 <u8g_call_dev_fn>
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	0f 90       	pop	r0
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	08 95       	ret

00002016 <u8g_GetModeLL>:
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	48 e4       	ldi	r20, 0x48	; 72
    201c:	52 cf       	rjmp	.-348    	; 0x1ec2 <u8g_call_dev_fn>
    201e:	08 95       	ret

00002020 <u8g_UpdateDimension>:
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	ec 01       	movw	r28, r24
    2026:	6a 81       	ldd	r22, Y+2	; 0x02
    2028:	7b 81       	ldd	r23, Y+3	; 0x03
    202a:	d7 df       	rcall	.-82     	; 0x1fda <u8g_GetWidthLL>
    202c:	88 83       	st	Y, r24
    202e:	6a 81       	ldd	r22, Y+2	; 0x02
    2030:	7b 81       	ldd	r23, Y+3	; 0x03
    2032:	ce 01       	movw	r24, r28
    2034:	e1 df       	rcall	.-62     	; 0x1ff8 <u8g_GetHeightLL>
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	6a 81       	ldd	r22, Y+2	; 0x02
    203a:	7b 81       	ldd	r23, Y+3	; 0x03
    203c:	ce 01       	movw	r24, r28
    203e:	eb df       	rcall	.-42     	; 0x2016 <u8g_GetModeLL>
    2040:	8b 87       	std	Y+11, r24	; 0x0b
    2042:	9e 01       	movw	r18, r28
    2044:	2d 5c       	subi	r18, 0xCD	; 205
    2046:	3f 4f       	sbci	r19, 0xFF	; 255
    2048:	6a 81       	ldd	r22, Y+2	; 0x02
    204a:	7b 81       	ldd	r23, Y+3	; 0x03
    204c:	47 e1       	ldi	r20, 0x17	; 23
    204e:	ce 01       	movw	r24, r28
    2050:	38 df       	rcall	.-400    	; 0x1ec2 <u8g_call_dev_fn>
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	08 95       	ret

00002058 <u8g_Begin>:
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	ec 01       	movw	r28, r24
    205e:	6a 81       	ldd	r22, Y+2	; 0x02
    2060:	7b 81       	ldd	r23, Y+3	; 0x03
    2062:	34 df       	rcall	.-408    	; 0x1ecc <u8g_InitLL>
    2064:	88 23       	and	r24, r24
    2066:	19 f0       	breq	.+6      	; 0x206e <u8g_Begin+0x16>
    2068:	ce 01       	movw	r24, r28
    206a:	da df       	rcall	.-76     	; 0x2020 <u8g_UpdateDimension>
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	08 95       	ret

00002074 <u8g_FirstPage>:
    2074:	fc 01       	movw	r30, r24
    2076:	62 81       	ldd	r22, Z+2	; 0x02
    2078:	73 81       	ldd	r23, Z+3	; 0x03
    207a:	47 cf       	rjmp	.-370    	; 0x1f0a <u8g_FirstPageLL>
    207c:	08 95       	ret

0000207e <u8g_NextPage>:
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	ec 01       	movw	r28, r24
    2084:	ee 85       	ldd	r30, Y+14	; 0x0e
    2086:	ff 85       	ldd	r31, Y+15	; 0x0f
    2088:	30 97       	sbiw	r30, 0x00	; 0
    208a:	09 f0       	breq	.+2      	; 0x208e <u8g_NextPage+0x10>
    208c:	19 95       	eicall
    208e:	6a 81       	ldd	r22, Y+2	; 0x02
    2090:	7b 81       	ldd	r23, Y+3	; 0x03
    2092:	ce 01       	movw	r24, r28
    2094:	5e df       	rcall	.-324    	; 0x1f52 <u8g_NextPageLL>
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	08 95       	ret

0000209c <u8g_DrawPixel>:
    209c:	36 2f       	mov	r19, r22
    209e:	24 2f       	mov	r18, r20
    20a0:	fc 01       	movw	r30, r24
    20a2:	62 81       	ldd	r22, Z+2	; 0x02
    20a4:	73 81       	ldd	r23, Z+3	; 0x03
    20a6:	43 2f       	mov	r20, r19
    20a8:	7e cf       	rjmp	.-260    	; 0x1fa6 <u8g_DrawPixelLL>
    20aa:	08 95       	ret

000020ac <u8g_Draw8Pixel>:
    20ac:	ef 92       	push	r14
    20ae:	0f 93       	push	r16
    20b0:	36 2f       	mov	r19, r22
    20b2:	fc 01       	movw	r30, r24
    20b4:	62 81       	ldd	r22, Z+2	; 0x02
    20b6:	73 81       	ldd	r23, Z+3	; 0x03
    20b8:	e0 2e       	mov	r14, r16
    20ba:	02 2f       	mov	r16, r18
    20bc:	24 2f       	mov	r18, r20
    20be:	43 2f       	mov	r20, r19
    20c0:	7c df       	rcall	.-264    	; 0x1fba <u8g_Draw8PixelLL>
    20c2:	0f 91       	pop	r16
    20c4:	ef 90       	pop	r14
    20c6:	08 95       	ret

000020c8 <u8g_SetColorIndex>:
    20c8:	fc 01       	movw	r30, r24
    20ca:	60 a3       	std	Z+32, r22	; 0x20
    20cc:	08 95       	ret

000020ce <u8g_init_data>:
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	ec 01       	movw	r28, r24
    20d4:	1d 82       	std	Y+5, r1	; 0x05
    20d6:	1c 82       	std	Y+4, r1	; 0x04
    20d8:	1f 82       	std	Y+7, r1	; 0x07
    20da:	1e 82       	std	Y+6, r1	; 0x06
    20dc:	19 86       	std	Y+9, r1	; 0x09
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	88 87       	std	Y+8, r24	; 0x08
    20e2:	82 e2       	ldi	r24, 0x22	; 34
    20e4:	8a 87       	std	Y+10, r24	; 0x0a
    20e6:	1f 86       	std	Y+15, r1	; 0x0f
    20e8:	1e 86       	std	Y+14, r1	; 0x0e
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	06 c0       	rjmp	.+12     	; 0x20fa <u8g_init_data+0x2c>
    20ee:	fe 01       	movw	r30, r28
    20f0:	e8 0f       	add	r30, r24
    20f2:	f1 1d       	adc	r31, r1
    20f4:	9f ef       	ldi	r25, 0xFF	; 255
    20f6:	93 a3       	std	Z+35, r25	; 0x23
    20f8:	8f 5f       	subi	r24, 0xFF	; 255
    20fa:	8e 30       	cpi	r24, 0x0E	; 14
    20fc:	c0 f3       	brcs	.-16     	; 0x20ee <u8g_init_data+0x20>
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	ce 01       	movw	r24, r28
    2102:	e2 df       	rcall	.-60     	; 0x20c8 <u8g_SetColorIndex>
    2104:	ce 01       	movw	r24, r28
    2106:	6a de       	rcall	.-812    	; 0x1ddc <u8g_SetFontPosBaseline>
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	8f 8b       	std	Y+23, r24	; 0x17
    210c:	18 8e       	std	Y+24, r1	; 0x18
    210e:	19 8e       	std	Y+25, r1	; 0x19
    2110:	80 e4       	ldi	r24, 0x40	; 64
    2112:	8a 8f       	std	Y+26, r24	; 0x1a
    2114:	1b 8e       	std	Y+27, r1	; 0x1b
    2116:	81 e7       	ldi	r24, 0x71	; 113
    2118:	92 e1       	ldi	r25, 0x12	; 18
    211a:	9a ab       	std	Y+50, r25	; 0x32
    211c:	89 ab       	std	Y+49, r24	; 0x31
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	08 95       	ret

00002124 <u8g_Init8Bit>:

uint8_t u8g_Init8Bit(u8g_t *u8g, u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, 
  uint8_t en, uint8_t cs1, uint8_t cs2, uint8_t di, uint8_t rw, uint8_t reset)
{
    2124:	4f 92       	push	r4
    2126:	5f 92       	push	r5
    2128:	6f 92       	push	r6
    212a:	7f 92       	push	r7
    212c:	8f 92       	push	r8
    212e:	af 92       	push	r10
    2130:	cf 92       	push	r12
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	3c 01       	movw	r6, r24
    2144:	2b 01       	movw	r4, r22
    2146:	f4 2e       	mov	r15, r20
    2148:	12 2f       	mov	r17, r18
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
    214a:	c1 df       	rcall	.-126    	; 0x20ce <u8g_init_data>
  u8g->dev = dev;
    214c:	f3 01       	movw	r30, r6
    214e:	53 82       	std	Z+3, r5	; 0x03
    2150:	42 82       	std	Z+2, r4	; 0x02
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
    2152:	f0 a6       	std	Z+40, r15	; 0x28
  u8g->pin_list[U8G_PI_D1] = d1;
    2154:	11 a7       	std	Z+41, r17	; 0x29
  u8g->pin_list[U8G_PI_D2] = d2;
    2156:	02 a7       	std	Z+42, r16	; 0x2a
  u8g->pin_list[U8G_PI_D3] = d3;
    2158:	e3 a6       	std	Z+43, r14	; 0x2b
  u8g->pin_list[U8G_PI_D4] = d4;
    215a:	c4 a6       	std	Z+44, r12	; 0x2c
  u8g->pin_list[U8G_PI_D5] = d5;
    215c:	a5 a6       	std	Z+45, r10	; 0x2d
  u8g->pin_list[U8G_PI_D6] = d6;
    215e:	86 a6       	std	Z+46, r8	; 0x2e
  u8g->pin_list[U8G_PI_D7] = d7;
    2160:	89 89       	ldd	r24, Y+17	; 0x11
    2162:	87 a7       	std	Z+47, r24	; 0x2f

  u8g->pin_list[U8G_PI_EN] = en;
    2164:	8a 89       	ldd	r24, Y+18	; 0x12
    2166:	87 a3       	std	Z+39, r24	; 0x27
  u8g->pin_list[U8G_PI_CS1] = cs1;
    2168:	8b 89       	ldd	r24, Y+19	; 0x13
    216a:	85 a3       	std	Z+37, r24	; 0x25
  u8g->pin_list[U8G_PI_CS2] = cs2;
    216c:	8c 89       	ldd	r24, Y+20	; 0x14
    216e:	86 a3       	std	Z+38, r24	; 0x26
  u8g->pin_list[U8G_PI_DI] = di;
    2170:	8d 89       	ldd	r24, Y+21	; 0x15
    2172:	84 a3       	std	Z+36, r24	; 0x24
  u8g->pin_list[U8G_PI_RW] = rw;
    2174:	8e 89       	ldd	r24, Y+22	; 0x16
    2176:	80 ab       	std	Z+48, r24	; 0x30
  u8g->pin_list[U8G_PI_RESET] = reset;
    2178:	8f 89       	ldd	r24, Y+23	; 0x17
    217a:	83 a3       	std	Z+35, r24	; 0x23
  
  return u8g_Begin(u8g);
    217c:	c3 01       	movw	r24, r6
    217e:	6c df       	rcall	.-296    	; 0x2058 <u8g_Begin>
}
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	1f 91       	pop	r17
    2186:	0f 91       	pop	r16
    2188:	ff 90       	pop	r15
    218a:	ef 90       	pop	r14
    218c:	cf 90       	pop	r12
    218e:	af 90       	pop	r10
    2190:	8f 90       	pop	r8
    2192:	7f 90       	pop	r7
    2194:	6f 90       	pop	r6
    2196:	5f 90       	pop	r5
    2198:	4f 90       	pop	r4
    219a:	08 95       	ret

0000219c <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    219c:	fc 01       	movw	r30, r24
    219e:	12 82       	std	Z+2, r1	; 0x02
    21a0:	80 81       	ld	r24, Z
    21a2:	81 50       	subi	r24, 0x01	; 1
    21a4:	83 83       	std	Z+3, r24	; 0x03
    21a6:	14 82       	std	Z+4, r1	; 0x04
    21a8:	08 95       	ret

000021aa <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    21aa:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    21ac:	20 81       	ld	r18, Z
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	82 0f       	add	r24, r18
    21b2:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	89 17       	cp	r24, r25
    21b8:	60 f4       	brcc	.+24     	; 0x21d2 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    21ba:	84 81       	ldd	r24, Z+4	; 0x04
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    21c0:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    21c2:	82 0f       	add	r24, r18
  if ( y1 >= p->total_height )
    21c4:	89 17       	cp	r24, r25
    21c6:	10 f0       	brcs	.+4      	; 0x21cc <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	89 0f       	add	r24, r25
  }
  p->page_y1 = y1;
    21cc:	83 83       	std	Z+3, r24	; 0x03
  
  return 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    21d4:	08 95       	ret

000021d6 <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    21d6:	dc 01       	movw	r26, r24
    21d8:	16 96       	adiw	r26, 0x06	; 6
    21da:	ed 91       	ld	r30, X+
    21dc:	fc 91       	ld	r31, X
    21de:	17 97       	sbiw	r26, 0x07	; 7
    21e0:	15 96       	adiw	r26, 0x05	; 5
    21e2:	8c 91       	ld	r24, X
    21e4:	9f 01       	movw	r18, r30
    21e6:	28 0f       	add	r18, r24
    21e8:	31 1d       	adc	r19, r1
    21ea:	c9 01       	movw	r24, r18
    21ec:	10 82       	st	Z, r1
    21ee:	31 96       	adiw	r30, 0x01	; 1
    21f0:	8e 17       	cp	r24, r30
    21f2:	9f 07       	cpc	r25, r31
    21f4:	d9 f7       	brne	.-10     	; 0x21ec <u8g_pb_Clear+0x16>
    21f6:	08 95       	ret

000021f8 <u8g_pb_IsYIntersection>:
    21f8:	fc 01       	movw	r30, r24
    21fa:	23 81       	ldd	r18, Z+3	; 0x03
    21fc:	31 e0       	ldi	r19, 0x01	; 1
    21fe:	26 17       	cp	r18, r22
    2200:	08 f4       	brcc	.+2      	; 0x2204 <__stack+0x5>
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	fc 01       	movw	r30, r24
    2206:	82 81       	ldd	r24, Z+2	; 0x02
    2208:	91 e0       	ldi	r25, 0x01	; 1
    220a:	48 17       	cp	r20, r24
    220c:	08 f4       	brcc	.+2      	; 0x2210 <__stack+0x11>
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	21 e0       	ldi	r18, 0x01	; 1
    2212:	46 17       	cp	r20, r22
    2214:	08 f0       	brcs	.+2      	; 0x2218 <__stack+0x19>
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	83 2f       	mov	r24, r19
    221a:	89 23       	and	r24, r25
    221c:	92 23       	and	r25, r18
    221e:	98 2b       	or	r25, r24
    2220:	83 2f       	mov	r24, r19
    2222:	82 23       	and	r24, r18
    2224:	89 2b       	or	r24, r25
    2226:	08 95       	ret

00002228 <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    2228:	dc 01       	movw	r26, r24
    222a:	fb 01       	movw	r30, r22
  box->x0 = 0;
    222c:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    222e:	12 96       	adiw	r26, 0x02	; 2
    2230:	8c 91       	ld	r24, X
    2232:	12 97       	sbiw	r26, 0x02	; 2
    2234:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
    2236:	15 96       	adiw	r26, 0x05	; 5
    2238:	8c 91       	ld	r24, X
    223a:	15 97       	sbiw	r26, 0x05	; 5
  box->x1--;
    223c:	81 50       	subi	r24, 0x01	; 1
    223e:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    2240:	13 96       	adiw	r26, 0x03	; 3
    2242:	8c 91       	ld	r24, X
    2244:	83 83       	std	Z+3, r24	; 0x03
    2246:	08 95       	ret

00002248 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    2248:	fb 01       	movw	r30, r22
    224a:	31 81       	ldd	r19, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    224c:	23 81       	ldd	r18, Z+3	; 0x03
    224e:	21 30       	cpi	r18, 0x01	; 1
    2250:	19 f0       	breq	.+6      	; 0x2258 <u8g_pb_Is8PixelVisible+0x10>
    2252:	23 30       	cpi	r18, 0x03	; 3
    2254:	21 f0       	breq	.+8      	; 0x225e <u8g_pb_Is8PixelVisible+0x16>
    2256:	06 c0       	rjmp	.+12     	; 0x2264 <u8g_pb_Is8PixelVisible+0x1c>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    2258:	48 e0       	ldi	r20, 0x08	; 8
    225a:	43 0f       	add	r20, r19
      break;
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    225e:	43 2f       	mov	r20, r19
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    2260:	38 50       	subi	r19, 0x08	; 8
      break;
    2262:	01 c0       	rjmp	.+2      	; 0x2266 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    2264:	43 2f       	mov	r20, r19
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    2266:	63 2f       	mov	r22, r19
    2268:	c7 cf       	rjmp	.-114    	; 0x21f8 <u8g_pb_IsYIntersection>
}
    226a:	08 95       	ret

0000226c <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    226c:	dc 01       	movw	r26, r24
    226e:	16 96       	adiw	r26, 0x06	; 6
    2270:	ed 91       	ld	r30, X+
    2272:	fc 91       	ld	r31, X
    2274:	17 97       	sbiw	r26, 0x07	; 7
    2276:	12 96       	adiw	r26, 0x02	; 2
    2278:	8c 91       	ld	r24, X
    227a:	48 1b       	sub	r20, r24
    227c:	47 70       	andi	r20, 0x07	; 7
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <u8g_pb8v1_set_pixel+0x1c>
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	4a 95       	dec	r20
    228a:	e2 f7       	brpl	.-8      	; 0x2284 <u8g_pb8v1_set_pixel+0x18>
    228c:	e6 0f       	add	r30, r22
    228e:	f1 1d       	adc	r31, r1
    2290:	22 23       	and	r18, r18
    2292:	21 f0       	breq	.+8      	; 0x229c <u8g_pb8v1_set_pixel+0x30>
    2294:	90 81       	ld	r25, Z
    2296:	89 2b       	or	r24, r25
    2298:	80 83       	st	Z, r24
    229a:	08 95       	ret
    229c:	80 95       	com	r24
    229e:	90 81       	ld	r25, Z
    22a0:	89 23       	and	r24, r25
    22a2:	80 83       	st	Z, r24
    22a4:	08 95       	ret

000022a6 <u8g_pb8v1_SetPixel>:
    22a6:	fb 01       	movw	r30, r22
    22a8:	41 81       	ldd	r20, Z+1	; 0x01
    22aa:	fc 01       	movw	r30, r24
    22ac:	22 81       	ldd	r18, Z+2	; 0x02
    22ae:	42 17       	cp	r20, r18
    22b0:	68 f0       	brcs	.+26     	; 0x22cc <u8g_pb8v1_SetPixel+0x26>
    22b2:	23 81       	ldd	r18, Z+3	; 0x03
    22b4:	24 17       	cp	r18, r20
    22b6:	50 f0       	brcs	.+20     	; 0x22cc <u8g_pb8v1_SetPixel+0x26>
    22b8:	fb 01       	movw	r30, r22
    22ba:	30 81       	ld	r19, Z
    22bc:	fc 01       	movw	r30, r24
    22be:	25 81       	ldd	r18, Z+5	; 0x05
    22c0:	32 17       	cp	r19, r18
    22c2:	20 f4       	brcc	.+8      	; 0x22cc <u8g_pb8v1_SetPixel+0x26>
    22c4:	fb 01       	movw	r30, r22
    22c6:	24 81       	ldd	r18, Z+4	; 0x04
    22c8:	63 2f       	mov	r22, r19
    22ca:	d0 cf       	rjmp	.-96     	; 0x226c <u8g_pb8v1_set_pixel>
    22cc:	08 95       	ret

000022ce <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    22ce:	df 92       	push	r13
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	7c 01       	movw	r14, r24
    22de:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    22e0:	1a 81       	ldd	r17, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	41 f0       	breq	.+16     	; 0x22f8 <u8g_pb8v1_Set8PixelOpt2+0x2a>
    22e8:	90 f0       	brcs	.+36     	; 0x230e <u8g_pb8v1_Set8PixelOpt2+0x40>
    22ea:	82 30       	cpi	r24, 0x02	; 2
    22ec:	49 f0       	breq	.+18     	; 0x2300 <u8g_pb8v1_Set8PixelOpt2+0x32>
    22ee:	83 30       	cpi	r24, 0x03	; 3
    22f0:	51 f0       	breq	.+20     	; 0x2306 <u8g_pb8v1_Set8PixelOpt2+0x38>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    22f2:	d1 2c       	mov	r13, r1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    22f4:	00 e0       	ldi	r16, 0x00	; 0
    22f6:	0d c0       	rjmp	.+26     	; 0x2312 <u8g_pb8v1_Set8PixelOpt2+0x44>
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    22f8:	dd 24       	eor	r13, r13
    22fa:	d3 94       	inc	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    22fc:	00 e0       	ldi	r16, 0x00	; 0
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    22fe:	09 c0       	rjmp	.+18     	; 0x2312 <u8g_pb8v1_Set8PixelOpt2+0x44>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2300:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    2302:	0f ef       	ldi	r16, 0xFF	; 255
    2304:	06 c0       	rjmp	.+12     	; 0x2312 <u8g_pb8v1_Set8PixelOpt2+0x44>
    case 3: dy--; break;
    2306:	dd 24       	eor	r13, r13
    2308:	da 94       	dec	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    230a:	00 e0       	ldi	r16, 0x00	; 0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <u8g_pb8v1_Set8PixelOpt2+0x44>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    230e:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    2310:	01 e0       	ldi	r16, 0x01	; 1
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    2312:	11 23       	and	r17, r17
    2314:	1c f4       	brge	.+6      	; 0x231c <u8g_pb8v1_Set8PixelOpt2+0x4e>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    2316:	be 01       	movw	r22, r28
    2318:	c7 01       	movw	r24, r14
    231a:	c5 df       	rcall	.-118    	; 0x22a6 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    231c:	88 81       	ld	r24, Y
    231e:	80 0f       	add	r24, r16
    2320:	88 83       	st	Y, r24
    arg_pixel->y += dy;
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	8d 0d       	add	r24, r13
    2326:	89 83       	std	Y+1, r24	; 0x01
    pixel <<= 1;
    2328:	11 0f       	add	r17, r17
  } while( pixel != 0  );
    232a:	99 f7       	brne	.-26     	; 0x2312 <u8g_pb8v1_Set8PixelOpt2+0x44>
  
}
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	ef 90       	pop	r14
    2338:	df 90       	pop	r13
    233a:	08 95       	ret

0000233c <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    2344:	fb 01       	movw	r30, r22
    2346:	c2 81       	ldd	r28, Z+2	; 0x02
    2348:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    234a:	50 e0       	ldi	r21, 0x00	; 0
    234c:	fa 01       	movw	r30, r20
    234e:	74 97       	sbiw	r30, 0x14	; 20
    2350:	e4 33       	cpi	r30, 0x34	; 52
    2352:	f1 05       	cpc	r31, r1
    2354:	90 f5       	brcc	.+100    	; 0x23ba <u8g_dev_pb8v1_base_fn+0x7e>
    2356:	89 01       	movw	r16, r18
    2358:	88 27       	eor	r24, r24
    235a:	e7 58       	subi	r30, 0x87	; 135
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	8f 4f       	sbci	r24, 0xFF	; 255
    2360:	54 c4       	rjmp	.+2216   	; 0x2c0a <__tablejump2__>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    2362:	b9 01       	movw	r22, r18
    2364:	ce 01       	movw	r24, r28
    2366:	70 df       	rcall	.-288    	; 0x2248 <u8g_pb_Is8PixelVisible>
    2368:	88 23       	and	r24, r24
    236a:	49 f1       	breq	.+82     	; 0x23be <u8g_dev_pb8v1_base_fn+0x82>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    236c:	b8 01       	movw	r22, r16
    236e:	ce 01       	movw	r24, r28
    2370:	ae df       	rcall	.-164    	; 0x22ce <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    2374:	25 c0       	rjmp	.+74     	; 0x23c0 <u8g_dev_pb8v1_base_fn+0x84>
    2376:	b9 01       	movw	r22, r18
    2378:	ce 01       	movw	r24, r28
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    237a:	95 df       	rcall	.-214    	; 0x22a6 <u8g_pb8v1_SetPixel>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	20 c0       	rjmp	.+64     	; 0x23c0 <u8g_dev_pb8v1_base_fn+0x84>
    2380:	ce 01       	movw	r24, r28
      u8g_page_First(&(pb->p));
    2382:	29 df       	rcall	.-430    	; 0x21d6 <u8g_pb_Clear>
    2384:	ce 01       	movw	r24, r28
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2386:	0a df       	rcall	.-492    	; 0x219c <u8g_page_First>
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	1a c0       	rjmp	.+52     	; 0x23c0 <u8g_dev_pb8v1_base_fn+0x84>
    238c:	ce 01       	movw	r24, r28
    238e:	0d df       	rcall	.-486    	; 0x21aa <u8g_page_Next>
        return 0;
      u8g_pb_Clear(pb);
    2390:	88 23       	and	r24, r24
    2392:	b1 f0       	breq	.+44     	; 0x23c0 <u8g_dev_pb8v1_base_fn+0x84>
    2394:	ce 01       	movw	r24, r28
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    2396:	1f df       	rcall	.-450    	; 0x21d6 <u8g_pb_Clear>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
      u8g_pb_Clear(pb);
      break;
    2398:	81 e0       	ldi	r24, 0x01	; 1
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    239a:	12 c0       	rjmp	.+36     	; 0x23c0 <u8g_dev_pb8v1_base_fn+0x84>
    239c:	b9 01       	movw	r22, r18
    239e:	ce 01       	movw	r24, r28
    23a0:	43 df       	rcall	.-378    	; 0x2228 <u8g_pb_GetPageBox>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    23a4:	0d c0       	rjmp	.+26     	; 0x23c0 <u8g_dev_pb8v1_base_fn+0x84>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	f9 01       	movw	r30, r18
    23aa:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    23ae:	08 c0       	rjmp	.+16     	; 0x23c0 <u8g_dev_pb8v1_base_fn+0x84>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	f9 01       	movw	r30, r18
    23b4:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
      break;
    23b8:	03 c0       	rjmp	.+6      	; 0x23c0 <u8g_dev_pb8v1_base_fn+0x84>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <u8g_dev_pb8v1_base_fn+0x84>
  }
  return 1;
    23be:	81 e0       	ldi	r24, 0x01	; 1
}
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	1f 91       	pop	r17
    23c6:	0f 91       	pop	r16
    23c8:	08 95       	ret

000023ca <u8g_draw_hline>:
void u8g_DrawVLine(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
  if ( u8g_IsBBXIntersection(u8g, x, y, 1, w) == 0 )
    return;
  u8g_draw_vline(u8g, x, y, w);
}
    23ca:	ef 92       	push	r14
    23cc:	ff 92       	push	r15
    23ce:	0f 93       	push	r16
    23d0:	1f 93       	push	r17
    23d2:	cf 93       	push	r28
    23d4:	df 93       	push	r29
    23d6:	7c 01       	movw	r14, r24
    23d8:	d6 2f       	mov	r29, r22
    23da:	14 2f       	mov	r17, r20
    23dc:	c2 2f       	mov	r28, r18
    23de:	08 c0       	rjmp	.+16     	; 0x23f0 <u8g_draw_hline+0x26>
    23e0:	0f ef       	ldi	r16, 0xFF	; 255
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	41 2f       	mov	r20, r17
    23e6:	6d 2f       	mov	r22, r29
    23e8:	c7 01       	movw	r24, r14
    23ea:	60 de       	rcall	.-832    	; 0x20ac <u8g_Draw8Pixel>
    23ec:	c8 50       	subi	r28, 0x08	; 8
    23ee:	d8 5f       	subi	r29, 0xF8	; 248
    23f0:	c8 30       	cpi	r28, 0x08	; 8
    23f2:	b0 f7       	brcc	.-20     	; 0x23e0 <u8g_draw_hline+0x16>
    23f4:	cc 23       	and	r28, r28
    23f6:	89 f0       	breq	.+34     	; 0x241a <u8g_draw_hline+0x50>
    23f8:	87 e0       	ldi	r24, 0x07	; 7
    23fa:	c8 27       	eor	r28, r24
    23fc:	cf 5f       	subi	r28, 0xFF	; 255
    23fe:	c7 70       	andi	r28, 0x07	; 7
    2400:	8f ef       	ldi	r24, 0xFF	; 255
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	02 c0       	rjmp	.+4      	; 0x240a <u8g_draw_hline+0x40>
    2406:	88 0f       	add	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	ca 95       	dec	r28
    240c:	e2 f7       	brpl	.-8      	; 0x2406 <u8g_draw_hline+0x3c>
    240e:	08 2f       	mov	r16, r24
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	41 2f       	mov	r20, r17
    2414:	6d 2f       	mov	r22, r29
    2416:	c7 01       	movw	r24, r14
    2418:	49 de       	rcall	.-878    	; 0x20ac <u8g_Draw8Pixel>
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	ff 90       	pop	r15
    2424:	ef 90       	pop	r14
    2426:	08 95       	ret

00002428 <u8g_draw_vline>:
    2428:	ef 92       	push	r14
    242a:	ff 92       	push	r15
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	7c 01       	movw	r14, r24
    2436:	16 2f       	mov	r17, r22
    2438:	d4 2f       	mov	r29, r20
    243a:	c2 2f       	mov	r28, r18
    243c:	08 c0       	rjmp	.+16     	; 0x244e <u8g_draw_vline+0x26>
    243e:	0f ef       	ldi	r16, 0xFF	; 255
    2440:	21 e0       	ldi	r18, 0x01	; 1
    2442:	4d 2f       	mov	r20, r29
    2444:	61 2f       	mov	r22, r17
    2446:	c7 01       	movw	r24, r14
    2448:	31 de       	rcall	.-926    	; 0x20ac <u8g_Draw8Pixel>
    244a:	c8 50       	subi	r28, 0x08	; 8
    244c:	d8 5f       	subi	r29, 0xF8	; 248
    244e:	c8 30       	cpi	r28, 0x08	; 8
    2450:	b0 f7       	brcc	.-20     	; 0x243e <u8g_draw_vline+0x16>
    2452:	cc 23       	and	r28, r28
    2454:	89 f0       	breq	.+34     	; 0x2478 <u8g_draw_vline+0x50>
    2456:	87 e0       	ldi	r24, 0x07	; 7
    2458:	c8 27       	eor	r28, r24
    245a:	cf 5f       	subi	r28, 0xFF	; 255
    245c:	c7 70       	andi	r28, 0x07	; 7
    245e:	8f ef       	ldi	r24, 0xFF	; 255
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <u8g_draw_vline+0x40>
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	ca 95       	dec	r28
    246a:	e2 f7       	brpl	.-8      	; 0x2464 <u8g_draw_vline+0x3c>
    246c:	08 2f       	mov	r16, r24
    246e:	21 e0       	ldi	r18, 0x01	; 1
    2470:	4d 2f       	mov	r20, r29
    2472:	61 2f       	mov	r22, r17
    2474:	c7 01       	movw	r24, r14
    2476:	1a de       	rcall	.-972    	; 0x20ac <u8g_Draw8Pixel>
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	ff 90       	pop	r15
    2482:	ef 90       	pop	r14
    2484:	08 95       	ret

00002486 <u8g_DrawFrame>:

/* restrictions: w > 0 && h > 0 */
void u8g_DrawFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    2486:	df 92       	push	r13
    2488:	ef 92       	push	r14
    248a:	ff 92       	push	r15
    248c:	0f 93       	push	r16
    248e:	1f 93       	push	r17
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	7c 01       	movw	r14, r24
    2496:	d6 2f       	mov	r29, r22
    2498:	14 2f       	mov	r17, r20
    249a:	d2 2e       	mov	r13, r18
  u8g_uint_t xtmp = x;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    249c:	05 d8       	rcall	.-4086   	; 0x14a8 <u8g_IsBBXIntersection>
    249e:	88 23       	and	r24, r24
    24a0:	c1 f0       	breq	.+48     	; 0x24d2 <u8g_DrawFrame+0x4c>
    return;

  
  u8g_draw_hline(u8g, x, y, w);
    24a2:	2d 2d       	mov	r18, r13
    24a4:	41 2f       	mov	r20, r17
    24a6:	6d 2f       	mov	r22, r29
    24a8:	c7 01       	movw	r24, r14
    24aa:	8f df       	rcall	.-226    	; 0x23ca <u8g_draw_hline>
  u8g_draw_vline(u8g, x, y, h);
    24ac:	20 2f       	mov	r18, r16
    24ae:	41 2f       	mov	r20, r17
    24b0:	6d 2f       	mov	r22, r29
    24b2:	c7 01       	movw	r24, r14
    24b4:	b9 df       	rcall	.-142    	; 0x2428 <u8g_draw_vline>
  x+=w;
    24b6:	6d 2f       	mov	r22, r29
    24b8:	6d 0d       	add	r22, r13
  x--;
    24ba:	61 50       	subi	r22, 0x01	; 1
  u8g_draw_vline(u8g, x, y, h);
    24bc:	20 2f       	mov	r18, r16
    24be:	41 2f       	mov	r20, r17
    24c0:	c7 01       	movw	r24, r14
    24c2:	b2 df       	rcall	.-156    	; 0x2428 <u8g_draw_vline>
  y+=h;
    24c4:	41 2f       	mov	r20, r17
    24c6:	40 0f       	add	r20, r16
  y--;
    24c8:	41 50       	subi	r20, 0x01	; 1
  u8g_draw_hline(u8g, xtmp, y, w);
    24ca:	2d 2d       	mov	r18, r13
    24cc:	6d 2f       	mov	r22, r29
    24ce:	c7 01       	movw	r24, r14
    24d0:	7c df       	rcall	.-264    	; 0x23ca <u8g_draw_hline>
}
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	1f 91       	pop	r17
    24d8:	0f 91       	pop	r16
    24da:	ff 90       	pop	r15
    24dc:	ef 90       	pop	r14
    24de:	df 90       	pop	r13
    24e0:	08 95       	ret

000024e2 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    24e2:	08 95       	ret

000024e4 <__subsf3>:
    24e4:	50 58       	subi	r21, 0x80	; 128

000024e6 <__addsf3>:
    24e6:	bb 27       	eor	r27, r27
    24e8:	aa 27       	eor	r26, r26
    24ea:	0e d0       	rcall	.+28     	; 0x2508 <__addsf3x>
    24ec:	75 c1       	rjmp	.+746    	; 0x27d8 <__fp_round>
    24ee:	66 d1       	rcall	.+716    	; 0x27bc <__fp_pscA>
    24f0:	30 f0       	brcs	.+12     	; 0x24fe <__addsf3+0x18>
    24f2:	6b d1       	rcall	.+726    	; 0x27ca <__fp_pscB>
    24f4:	20 f0       	brcs	.+8      	; 0x24fe <__addsf3+0x18>
    24f6:	31 f4       	brne	.+12     	; 0x2504 <__addsf3+0x1e>
    24f8:	9f 3f       	cpi	r25, 0xFF	; 255
    24fa:	11 f4       	brne	.+4      	; 0x2500 <__addsf3+0x1a>
    24fc:	1e f4       	brtc	.+6      	; 0x2504 <__addsf3+0x1e>
    24fe:	5b c1       	rjmp	.+694    	; 0x27b6 <__fp_nan>
    2500:	0e f4       	brtc	.+2      	; 0x2504 <__addsf3+0x1e>
    2502:	e0 95       	com	r30
    2504:	e7 fb       	bst	r30, 7
    2506:	51 c1       	rjmp	.+674    	; 0x27aa <__fp_inf>

00002508 <__addsf3x>:
    2508:	e9 2f       	mov	r30, r25
    250a:	77 d1       	rcall	.+750    	; 0x27fa <__fp_split3>
    250c:	80 f3       	brcs	.-32     	; 0x24ee <__addsf3+0x8>
    250e:	ba 17       	cp	r27, r26
    2510:	62 07       	cpc	r22, r18
    2512:	73 07       	cpc	r23, r19
    2514:	84 07       	cpc	r24, r20
    2516:	95 07       	cpc	r25, r21
    2518:	18 f0       	brcs	.+6      	; 0x2520 <__addsf3x+0x18>
    251a:	71 f4       	brne	.+28     	; 0x2538 <__addsf3x+0x30>
    251c:	9e f5       	brtc	.+102    	; 0x2584 <__addsf3x+0x7c>
    251e:	8f c1       	rjmp	.+798    	; 0x283e <__fp_zero>
    2520:	0e f4       	brtc	.+2      	; 0x2524 <__addsf3x+0x1c>
    2522:	e0 95       	com	r30
    2524:	0b 2e       	mov	r0, r27
    2526:	ba 2f       	mov	r27, r26
    2528:	a0 2d       	mov	r26, r0
    252a:	0b 01       	movw	r0, r22
    252c:	b9 01       	movw	r22, r18
    252e:	90 01       	movw	r18, r0
    2530:	0c 01       	movw	r0, r24
    2532:	ca 01       	movw	r24, r20
    2534:	a0 01       	movw	r20, r0
    2536:	11 24       	eor	r1, r1
    2538:	ff 27       	eor	r31, r31
    253a:	59 1b       	sub	r21, r25
    253c:	99 f0       	breq	.+38     	; 0x2564 <__addsf3x+0x5c>
    253e:	59 3f       	cpi	r21, 0xF9	; 249
    2540:	50 f4       	brcc	.+20     	; 0x2556 <__addsf3x+0x4e>
    2542:	50 3e       	cpi	r21, 0xE0	; 224
    2544:	68 f1       	brcs	.+90     	; 0x25a0 <__addsf3x+0x98>
    2546:	1a 16       	cp	r1, r26
    2548:	f0 40       	sbci	r31, 0x00	; 0
    254a:	a2 2f       	mov	r26, r18
    254c:	23 2f       	mov	r18, r19
    254e:	34 2f       	mov	r19, r20
    2550:	44 27       	eor	r20, r20
    2552:	58 5f       	subi	r21, 0xF8	; 248
    2554:	f3 cf       	rjmp	.-26     	; 0x253c <__addsf3x+0x34>
    2556:	46 95       	lsr	r20
    2558:	37 95       	ror	r19
    255a:	27 95       	ror	r18
    255c:	a7 95       	ror	r26
    255e:	f0 40       	sbci	r31, 0x00	; 0
    2560:	53 95       	inc	r21
    2562:	c9 f7       	brne	.-14     	; 0x2556 <__addsf3x+0x4e>
    2564:	7e f4       	brtc	.+30     	; 0x2584 <__addsf3x+0x7c>
    2566:	1f 16       	cp	r1, r31
    2568:	ba 0b       	sbc	r27, r26
    256a:	62 0b       	sbc	r22, r18
    256c:	73 0b       	sbc	r23, r19
    256e:	84 0b       	sbc	r24, r20
    2570:	ba f0       	brmi	.+46     	; 0x25a0 <__addsf3x+0x98>
    2572:	91 50       	subi	r25, 0x01	; 1
    2574:	a1 f0       	breq	.+40     	; 0x259e <__addsf3x+0x96>
    2576:	ff 0f       	add	r31, r31
    2578:	bb 1f       	adc	r27, r27
    257a:	66 1f       	adc	r22, r22
    257c:	77 1f       	adc	r23, r23
    257e:	88 1f       	adc	r24, r24
    2580:	c2 f7       	brpl	.-16     	; 0x2572 <__addsf3x+0x6a>
    2582:	0e c0       	rjmp	.+28     	; 0x25a0 <__addsf3x+0x98>
    2584:	ba 0f       	add	r27, r26
    2586:	62 1f       	adc	r22, r18
    2588:	73 1f       	adc	r23, r19
    258a:	84 1f       	adc	r24, r20
    258c:	48 f4       	brcc	.+18     	; 0x25a0 <__addsf3x+0x98>
    258e:	87 95       	ror	r24
    2590:	77 95       	ror	r23
    2592:	67 95       	ror	r22
    2594:	b7 95       	ror	r27
    2596:	f7 95       	ror	r31
    2598:	9e 3f       	cpi	r25, 0xFE	; 254
    259a:	08 f0       	brcs	.+2      	; 0x259e <__addsf3x+0x96>
    259c:	b3 cf       	rjmp	.-154    	; 0x2504 <__addsf3+0x1e>
    259e:	93 95       	inc	r25
    25a0:	88 0f       	add	r24, r24
    25a2:	08 f0       	brcs	.+2      	; 0x25a6 <__addsf3x+0x9e>
    25a4:	99 27       	eor	r25, r25
    25a6:	ee 0f       	add	r30, r30
    25a8:	97 95       	ror	r25
    25aa:	87 95       	ror	r24
    25ac:	08 95       	ret

000025ae <__cmpsf2>:
    25ae:	d9 d0       	rcall	.+434    	; 0x2762 <__fp_cmp>
    25b0:	08 f4       	brcc	.+2      	; 0x25b4 <__cmpsf2+0x6>
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	08 95       	ret

000025b6 <__divsf3>:
    25b6:	0c d0       	rcall	.+24     	; 0x25d0 <__divsf3x>
    25b8:	0f c1       	rjmp	.+542    	; 0x27d8 <__fp_round>
    25ba:	07 d1       	rcall	.+526    	; 0x27ca <__fp_pscB>
    25bc:	40 f0       	brcs	.+16     	; 0x25ce <__divsf3+0x18>
    25be:	fe d0       	rcall	.+508    	; 0x27bc <__fp_pscA>
    25c0:	30 f0       	brcs	.+12     	; 0x25ce <__divsf3+0x18>
    25c2:	21 f4       	brne	.+8      	; 0x25cc <__divsf3+0x16>
    25c4:	5f 3f       	cpi	r21, 0xFF	; 255
    25c6:	19 f0       	breq	.+6      	; 0x25ce <__divsf3+0x18>
    25c8:	f0 c0       	rjmp	.+480    	; 0x27aa <__fp_inf>
    25ca:	51 11       	cpse	r21, r1
    25cc:	39 c1       	rjmp	.+626    	; 0x2840 <__fp_szero>
    25ce:	f3 c0       	rjmp	.+486    	; 0x27b6 <__fp_nan>

000025d0 <__divsf3x>:
    25d0:	14 d1       	rcall	.+552    	; 0x27fa <__fp_split3>
    25d2:	98 f3       	brcs	.-26     	; 0x25ba <__divsf3+0x4>

000025d4 <__divsf3_pse>:
    25d4:	99 23       	and	r25, r25
    25d6:	c9 f3       	breq	.-14     	; 0x25ca <__divsf3+0x14>
    25d8:	55 23       	and	r21, r21
    25da:	b1 f3       	breq	.-20     	; 0x25c8 <__divsf3+0x12>
    25dc:	95 1b       	sub	r25, r21
    25de:	55 0b       	sbc	r21, r21
    25e0:	bb 27       	eor	r27, r27
    25e2:	aa 27       	eor	r26, r26
    25e4:	62 17       	cp	r22, r18
    25e6:	73 07       	cpc	r23, r19
    25e8:	84 07       	cpc	r24, r20
    25ea:	38 f0       	brcs	.+14     	; 0x25fa <__divsf3_pse+0x26>
    25ec:	9f 5f       	subi	r25, 0xFF	; 255
    25ee:	5f 4f       	sbci	r21, 0xFF	; 255
    25f0:	22 0f       	add	r18, r18
    25f2:	33 1f       	adc	r19, r19
    25f4:	44 1f       	adc	r20, r20
    25f6:	aa 1f       	adc	r26, r26
    25f8:	a9 f3       	breq	.-22     	; 0x25e4 <__divsf3_pse+0x10>
    25fa:	33 d0       	rcall	.+102    	; 0x2662 <__divsf3_pse+0x8e>
    25fc:	0e 2e       	mov	r0, r30
    25fe:	3a f0       	brmi	.+14     	; 0x260e <__divsf3_pse+0x3a>
    2600:	e0 e8       	ldi	r30, 0x80	; 128
    2602:	30 d0       	rcall	.+96     	; 0x2664 <__divsf3_pse+0x90>
    2604:	91 50       	subi	r25, 0x01	; 1
    2606:	50 40       	sbci	r21, 0x00	; 0
    2608:	e6 95       	lsr	r30
    260a:	00 1c       	adc	r0, r0
    260c:	ca f7       	brpl	.-14     	; 0x2600 <__divsf3_pse+0x2c>
    260e:	29 d0       	rcall	.+82     	; 0x2662 <__divsf3_pse+0x8e>
    2610:	fe 2f       	mov	r31, r30
    2612:	27 d0       	rcall	.+78     	; 0x2662 <__divsf3_pse+0x8e>
    2614:	66 0f       	add	r22, r22
    2616:	77 1f       	adc	r23, r23
    2618:	88 1f       	adc	r24, r24
    261a:	bb 1f       	adc	r27, r27
    261c:	26 17       	cp	r18, r22
    261e:	37 07       	cpc	r19, r23
    2620:	48 07       	cpc	r20, r24
    2622:	ab 07       	cpc	r26, r27
    2624:	b0 e8       	ldi	r27, 0x80	; 128
    2626:	09 f0       	breq	.+2      	; 0x262a <__divsf3_pse+0x56>
    2628:	bb 0b       	sbc	r27, r27
    262a:	80 2d       	mov	r24, r0
    262c:	bf 01       	movw	r22, r30
    262e:	ff 27       	eor	r31, r31
    2630:	93 58       	subi	r25, 0x83	; 131
    2632:	5f 4f       	sbci	r21, 0xFF	; 255
    2634:	2a f0       	brmi	.+10     	; 0x2640 <__divsf3_pse+0x6c>
    2636:	9e 3f       	cpi	r25, 0xFE	; 254
    2638:	51 05       	cpc	r21, r1
    263a:	68 f0       	brcs	.+26     	; 0x2656 <__divsf3_pse+0x82>
    263c:	b6 c0       	rjmp	.+364    	; 0x27aa <__fp_inf>
    263e:	00 c1       	rjmp	.+512    	; 0x2840 <__fp_szero>
    2640:	5f 3f       	cpi	r21, 0xFF	; 255
    2642:	ec f3       	brlt	.-6      	; 0x263e <__divsf3_pse+0x6a>
    2644:	98 3e       	cpi	r25, 0xE8	; 232
    2646:	dc f3       	brlt	.-10     	; 0x263e <__divsf3_pse+0x6a>
    2648:	86 95       	lsr	r24
    264a:	77 95       	ror	r23
    264c:	67 95       	ror	r22
    264e:	b7 95       	ror	r27
    2650:	f7 95       	ror	r31
    2652:	9f 5f       	subi	r25, 0xFF	; 255
    2654:	c9 f7       	brne	.-14     	; 0x2648 <__divsf3_pse+0x74>
    2656:	88 0f       	add	r24, r24
    2658:	91 1d       	adc	r25, r1
    265a:	96 95       	lsr	r25
    265c:	87 95       	ror	r24
    265e:	97 f9       	bld	r25, 7
    2660:	08 95       	ret
    2662:	e1 e0       	ldi	r30, 0x01	; 1
    2664:	66 0f       	add	r22, r22
    2666:	77 1f       	adc	r23, r23
    2668:	88 1f       	adc	r24, r24
    266a:	bb 1f       	adc	r27, r27
    266c:	62 17       	cp	r22, r18
    266e:	73 07       	cpc	r23, r19
    2670:	84 07       	cpc	r24, r20
    2672:	ba 07       	cpc	r27, r26
    2674:	20 f0       	brcs	.+8      	; 0x267e <__divsf3_pse+0xaa>
    2676:	62 1b       	sub	r22, r18
    2678:	73 0b       	sbc	r23, r19
    267a:	84 0b       	sbc	r24, r20
    267c:	ba 0b       	sbc	r27, r26
    267e:	ee 1f       	adc	r30, r30
    2680:	88 f7       	brcc	.-30     	; 0x2664 <__divsf3_pse+0x90>
    2682:	e0 95       	com	r30
    2684:	08 95       	ret

00002686 <__fixsfsi>:
    2686:	04 d0       	rcall	.+8      	; 0x2690 <__fixunssfsi>
    2688:	68 94       	set
    268a:	b1 11       	cpse	r27, r1
    268c:	d9 c0       	rjmp	.+434    	; 0x2840 <__fp_szero>
    268e:	08 95       	ret

00002690 <__fixunssfsi>:
    2690:	bc d0       	rcall	.+376    	; 0x280a <__fp_splitA>
    2692:	88 f0       	brcs	.+34     	; 0x26b6 <__fixunssfsi+0x26>
    2694:	9f 57       	subi	r25, 0x7F	; 127
    2696:	90 f0       	brcs	.+36     	; 0x26bc <__fixunssfsi+0x2c>
    2698:	b9 2f       	mov	r27, r25
    269a:	99 27       	eor	r25, r25
    269c:	b7 51       	subi	r27, 0x17	; 23
    269e:	a0 f0       	brcs	.+40     	; 0x26c8 <__fixunssfsi+0x38>
    26a0:	d1 f0       	breq	.+52     	; 0x26d6 <__fixunssfsi+0x46>
    26a2:	66 0f       	add	r22, r22
    26a4:	77 1f       	adc	r23, r23
    26a6:	88 1f       	adc	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	1a f0       	brmi	.+6      	; 0x26b2 <__fixunssfsi+0x22>
    26ac:	ba 95       	dec	r27
    26ae:	c9 f7       	brne	.-14     	; 0x26a2 <__fixunssfsi+0x12>
    26b0:	12 c0       	rjmp	.+36     	; 0x26d6 <__fixunssfsi+0x46>
    26b2:	b1 30       	cpi	r27, 0x01	; 1
    26b4:	81 f0       	breq	.+32     	; 0x26d6 <__fixunssfsi+0x46>
    26b6:	c3 d0       	rcall	.+390    	; 0x283e <__fp_zero>
    26b8:	b1 e0       	ldi	r27, 0x01	; 1
    26ba:	08 95       	ret
    26bc:	c0 c0       	rjmp	.+384    	; 0x283e <__fp_zero>
    26be:	67 2f       	mov	r22, r23
    26c0:	78 2f       	mov	r23, r24
    26c2:	88 27       	eor	r24, r24
    26c4:	b8 5f       	subi	r27, 0xF8	; 248
    26c6:	39 f0       	breq	.+14     	; 0x26d6 <__fixunssfsi+0x46>
    26c8:	b9 3f       	cpi	r27, 0xF9	; 249
    26ca:	cc f3       	brlt	.-14     	; 0x26be <__fixunssfsi+0x2e>
    26cc:	86 95       	lsr	r24
    26ce:	77 95       	ror	r23
    26d0:	67 95       	ror	r22
    26d2:	b3 95       	inc	r27
    26d4:	d9 f7       	brne	.-10     	; 0x26cc <__fixunssfsi+0x3c>
    26d6:	3e f4       	brtc	.+14     	; 0x26e6 <__fixunssfsi+0x56>
    26d8:	90 95       	com	r25
    26da:	80 95       	com	r24
    26dc:	70 95       	com	r23
    26de:	61 95       	neg	r22
    26e0:	7f 4f       	sbci	r23, 0xFF	; 255
    26e2:	8f 4f       	sbci	r24, 0xFF	; 255
    26e4:	9f 4f       	sbci	r25, 0xFF	; 255
    26e6:	08 95       	ret

000026e8 <__floatunsisf>:
    26e8:	e8 94       	clt
    26ea:	09 c0       	rjmp	.+18     	; 0x26fe <__floatsisf+0x12>

000026ec <__floatsisf>:
    26ec:	97 fb       	bst	r25, 7
    26ee:	3e f4       	brtc	.+14     	; 0x26fe <__floatsisf+0x12>
    26f0:	90 95       	com	r25
    26f2:	80 95       	com	r24
    26f4:	70 95       	com	r23
    26f6:	61 95       	neg	r22
    26f8:	7f 4f       	sbci	r23, 0xFF	; 255
    26fa:	8f 4f       	sbci	r24, 0xFF	; 255
    26fc:	9f 4f       	sbci	r25, 0xFF	; 255
    26fe:	99 23       	and	r25, r25
    2700:	a9 f0       	breq	.+42     	; 0x272c <__floatsisf+0x40>
    2702:	f9 2f       	mov	r31, r25
    2704:	96 e9       	ldi	r25, 0x96	; 150
    2706:	bb 27       	eor	r27, r27
    2708:	93 95       	inc	r25
    270a:	f6 95       	lsr	r31
    270c:	87 95       	ror	r24
    270e:	77 95       	ror	r23
    2710:	67 95       	ror	r22
    2712:	b7 95       	ror	r27
    2714:	f1 11       	cpse	r31, r1
    2716:	f8 cf       	rjmp	.-16     	; 0x2708 <__floatsisf+0x1c>
    2718:	fa f4       	brpl	.+62     	; 0x2758 <__floatsisf+0x6c>
    271a:	bb 0f       	add	r27, r27
    271c:	11 f4       	brne	.+4      	; 0x2722 <__floatsisf+0x36>
    271e:	60 ff       	sbrs	r22, 0
    2720:	1b c0       	rjmp	.+54     	; 0x2758 <__floatsisf+0x6c>
    2722:	6f 5f       	subi	r22, 0xFF	; 255
    2724:	7f 4f       	sbci	r23, 0xFF	; 255
    2726:	8f 4f       	sbci	r24, 0xFF	; 255
    2728:	9f 4f       	sbci	r25, 0xFF	; 255
    272a:	16 c0       	rjmp	.+44     	; 0x2758 <__floatsisf+0x6c>
    272c:	88 23       	and	r24, r24
    272e:	11 f0       	breq	.+4      	; 0x2734 <__floatsisf+0x48>
    2730:	96 e9       	ldi	r25, 0x96	; 150
    2732:	11 c0       	rjmp	.+34     	; 0x2756 <__floatsisf+0x6a>
    2734:	77 23       	and	r23, r23
    2736:	21 f0       	breq	.+8      	; 0x2740 <__floatsisf+0x54>
    2738:	9e e8       	ldi	r25, 0x8E	; 142
    273a:	87 2f       	mov	r24, r23
    273c:	76 2f       	mov	r23, r22
    273e:	05 c0       	rjmp	.+10     	; 0x274a <__floatsisf+0x5e>
    2740:	66 23       	and	r22, r22
    2742:	71 f0       	breq	.+28     	; 0x2760 <__floatsisf+0x74>
    2744:	96 e8       	ldi	r25, 0x86	; 134
    2746:	86 2f       	mov	r24, r22
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	2a f0       	brmi	.+10     	; 0x2758 <__floatsisf+0x6c>
    274e:	9a 95       	dec	r25
    2750:	66 0f       	add	r22, r22
    2752:	77 1f       	adc	r23, r23
    2754:	88 1f       	adc	r24, r24
    2756:	da f7       	brpl	.-10     	; 0x274e <__floatsisf+0x62>
    2758:	88 0f       	add	r24, r24
    275a:	96 95       	lsr	r25
    275c:	87 95       	ror	r24
    275e:	97 f9       	bld	r25, 7
    2760:	08 95       	ret

00002762 <__fp_cmp>:
    2762:	99 0f       	add	r25, r25
    2764:	00 08       	sbc	r0, r0
    2766:	55 0f       	add	r21, r21
    2768:	aa 0b       	sbc	r26, r26
    276a:	e0 e8       	ldi	r30, 0x80	; 128
    276c:	fe ef       	ldi	r31, 0xFE	; 254
    276e:	16 16       	cp	r1, r22
    2770:	17 06       	cpc	r1, r23
    2772:	e8 07       	cpc	r30, r24
    2774:	f9 07       	cpc	r31, r25
    2776:	c0 f0       	brcs	.+48     	; 0x27a8 <__fp_cmp+0x46>
    2778:	12 16       	cp	r1, r18
    277a:	13 06       	cpc	r1, r19
    277c:	e4 07       	cpc	r30, r20
    277e:	f5 07       	cpc	r31, r21
    2780:	98 f0       	brcs	.+38     	; 0x27a8 <__fp_cmp+0x46>
    2782:	62 1b       	sub	r22, r18
    2784:	73 0b       	sbc	r23, r19
    2786:	84 0b       	sbc	r24, r20
    2788:	95 0b       	sbc	r25, r21
    278a:	39 f4       	brne	.+14     	; 0x279a <__fp_cmp+0x38>
    278c:	0a 26       	eor	r0, r26
    278e:	61 f0       	breq	.+24     	; 0x27a8 <__fp_cmp+0x46>
    2790:	23 2b       	or	r18, r19
    2792:	24 2b       	or	r18, r20
    2794:	25 2b       	or	r18, r21
    2796:	21 f4       	brne	.+8      	; 0x27a0 <__fp_cmp+0x3e>
    2798:	08 95       	ret
    279a:	0a 26       	eor	r0, r26
    279c:	09 f4       	brne	.+2      	; 0x27a0 <__fp_cmp+0x3e>
    279e:	a1 40       	sbci	r26, 0x01	; 1
    27a0:	a6 95       	lsr	r26
    27a2:	8f ef       	ldi	r24, 0xFF	; 255
    27a4:	81 1d       	adc	r24, r1
    27a6:	81 1d       	adc	r24, r1
    27a8:	08 95       	ret

000027aa <__fp_inf>:
    27aa:	97 f9       	bld	r25, 7
    27ac:	9f 67       	ori	r25, 0x7F	; 127
    27ae:	80 e8       	ldi	r24, 0x80	; 128
    27b0:	70 e0       	ldi	r23, 0x00	; 0
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	08 95       	ret

000027b6 <__fp_nan>:
    27b6:	9f ef       	ldi	r25, 0xFF	; 255
    27b8:	80 ec       	ldi	r24, 0xC0	; 192
    27ba:	08 95       	ret

000027bc <__fp_pscA>:
    27bc:	00 24       	eor	r0, r0
    27be:	0a 94       	dec	r0
    27c0:	16 16       	cp	r1, r22
    27c2:	17 06       	cpc	r1, r23
    27c4:	18 06       	cpc	r1, r24
    27c6:	09 06       	cpc	r0, r25
    27c8:	08 95       	ret

000027ca <__fp_pscB>:
    27ca:	00 24       	eor	r0, r0
    27cc:	0a 94       	dec	r0
    27ce:	12 16       	cp	r1, r18
    27d0:	13 06       	cpc	r1, r19
    27d2:	14 06       	cpc	r1, r20
    27d4:	05 06       	cpc	r0, r21
    27d6:	08 95       	ret

000027d8 <__fp_round>:
    27d8:	09 2e       	mov	r0, r25
    27da:	03 94       	inc	r0
    27dc:	00 0c       	add	r0, r0
    27de:	11 f4       	brne	.+4      	; 0x27e4 <__fp_round+0xc>
    27e0:	88 23       	and	r24, r24
    27e2:	52 f0       	brmi	.+20     	; 0x27f8 <__fp_round+0x20>
    27e4:	bb 0f       	add	r27, r27
    27e6:	40 f4       	brcc	.+16     	; 0x27f8 <__fp_round+0x20>
    27e8:	bf 2b       	or	r27, r31
    27ea:	11 f4       	brne	.+4      	; 0x27f0 <__fp_round+0x18>
    27ec:	60 ff       	sbrs	r22, 0
    27ee:	04 c0       	rjmp	.+8      	; 0x27f8 <__fp_round+0x20>
    27f0:	6f 5f       	subi	r22, 0xFF	; 255
    27f2:	7f 4f       	sbci	r23, 0xFF	; 255
    27f4:	8f 4f       	sbci	r24, 0xFF	; 255
    27f6:	9f 4f       	sbci	r25, 0xFF	; 255
    27f8:	08 95       	ret

000027fa <__fp_split3>:
    27fa:	57 fd       	sbrc	r21, 7
    27fc:	90 58       	subi	r25, 0x80	; 128
    27fe:	44 0f       	add	r20, r20
    2800:	55 1f       	adc	r21, r21
    2802:	59 f0       	breq	.+22     	; 0x281a <__fp_splitA+0x10>
    2804:	5f 3f       	cpi	r21, 0xFF	; 255
    2806:	71 f0       	breq	.+28     	; 0x2824 <__fp_splitA+0x1a>
    2808:	47 95       	ror	r20

0000280a <__fp_splitA>:
    280a:	88 0f       	add	r24, r24
    280c:	97 fb       	bst	r25, 7
    280e:	99 1f       	adc	r25, r25
    2810:	61 f0       	breq	.+24     	; 0x282a <__fp_splitA+0x20>
    2812:	9f 3f       	cpi	r25, 0xFF	; 255
    2814:	79 f0       	breq	.+30     	; 0x2834 <__fp_splitA+0x2a>
    2816:	87 95       	ror	r24
    2818:	08 95       	ret
    281a:	12 16       	cp	r1, r18
    281c:	13 06       	cpc	r1, r19
    281e:	14 06       	cpc	r1, r20
    2820:	55 1f       	adc	r21, r21
    2822:	f2 cf       	rjmp	.-28     	; 0x2808 <__fp_split3+0xe>
    2824:	46 95       	lsr	r20
    2826:	f1 df       	rcall	.-30     	; 0x280a <__fp_splitA>
    2828:	08 c0       	rjmp	.+16     	; 0x283a <__fp_splitA+0x30>
    282a:	16 16       	cp	r1, r22
    282c:	17 06       	cpc	r1, r23
    282e:	18 06       	cpc	r1, r24
    2830:	99 1f       	adc	r25, r25
    2832:	f1 cf       	rjmp	.-30     	; 0x2816 <__fp_splitA+0xc>
    2834:	86 95       	lsr	r24
    2836:	71 05       	cpc	r23, r1
    2838:	61 05       	cpc	r22, r1
    283a:	08 94       	sec
    283c:	08 95       	ret

0000283e <__fp_zero>:
    283e:	e8 94       	clt

00002840 <__fp_szero>:
    2840:	bb 27       	eor	r27, r27
    2842:	66 27       	eor	r22, r22
    2844:	77 27       	eor	r23, r23
    2846:	cb 01       	movw	r24, r22
    2848:	97 f9       	bld	r25, 7
    284a:	08 95       	ret

0000284c <__gesf2>:
    284c:	8a df       	rcall	.-236    	; 0x2762 <__fp_cmp>
    284e:	08 f4       	brcc	.+2      	; 0x2852 <__gesf2+0x6>
    2850:	8f ef       	ldi	r24, 0xFF	; 255
    2852:	08 95       	ret

00002854 <__mulsf3>:
    2854:	0b d0       	rcall	.+22     	; 0x286c <__mulsf3x>
    2856:	c0 cf       	rjmp	.-128    	; 0x27d8 <__fp_round>
    2858:	b1 df       	rcall	.-158    	; 0x27bc <__fp_pscA>
    285a:	28 f0       	brcs	.+10     	; 0x2866 <__mulsf3+0x12>
    285c:	b6 df       	rcall	.-148    	; 0x27ca <__fp_pscB>
    285e:	18 f0       	brcs	.+6      	; 0x2866 <__mulsf3+0x12>
    2860:	95 23       	and	r25, r21
    2862:	09 f0       	breq	.+2      	; 0x2866 <__mulsf3+0x12>
    2864:	a2 cf       	rjmp	.-188    	; 0x27aa <__fp_inf>
    2866:	a7 cf       	rjmp	.-178    	; 0x27b6 <__fp_nan>
    2868:	11 24       	eor	r1, r1
    286a:	ea cf       	rjmp	.-44     	; 0x2840 <__fp_szero>

0000286c <__mulsf3x>:
    286c:	c6 df       	rcall	.-116    	; 0x27fa <__fp_split3>
    286e:	a0 f3       	brcs	.-24     	; 0x2858 <__mulsf3+0x4>

00002870 <__mulsf3_pse>:
    2870:	95 9f       	mul	r25, r21
    2872:	d1 f3       	breq	.-12     	; 0x2868 <__mulsf3+0x14>
    2874:	95 0f       	add	r25, r21
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	55 1f       	adc	r21, r21
    287a:	62 9f       	mul	r22, r18
    287c:	f0 01       	movw	r30, r0
    287e:	72 9f       	mul	r23, r18
    2880:	bb 27       	eor	r27, r27
    2882:	f0 0d       	add	r31, r0
    2884:	b1 1d       	adc	r27, r1
    2886:	63 9f       	mul	r22, r19
    2888:	aa 27       	eor	r26, r26
    288a:	f0 0d       	add	r31, r0
    288c:	b1 1d       	adc	r27, r1
    288e:	aa 1f       	adc	r26, r26
    2890:	64 9f       	mul	r22, r20
    2892:	66 27       	eor	r22, r22
    2894:	b0 0d       	add	r27, r0
    2896:	a1 1d       	adc	r26, r1
    2898:	66 1f       	adc	r22, r22
    289a:	82 9f       	mul	r24, r18
    289c:	22 27       	eor	r18, r18
    289e:	b0 0d       	add	r27, r0
    28a0:	a1 1d       	adc	r26, r1
    28a2:	62 1f       	adc	r22, r18
    28a4:	73 9f       	mul	r23, r19
    28a6:	b0 0d       	add	r27, r0
    28a8:	a1 1d       	adc	r26, r1
    28aa:	62 1f       	adc	r22, r18
    28ac:	83 9f       	mul	r24, r19
    28ae:	a0 0d       	add	r26, r0
    28b0:	61 1d       	adc	r22, r1
    28b2:	22 1f       	adc	r18, r18
    28b4:	74 9f       	mul	r23, r20
    28b6:	33 27       	eor	r19, r19
    28b8:	a0 0d       	add	r26, r0
    28ba:	61 1d       	adc	r22, r1
    28bc:	23 1f       	adc	r18, r19
    28be:	84 9f       	mul	r24, r20
    28c0:	60 0d       	add	r22, r0
    28c2:	21 1d       	adc	r18, r1
    28c4:	82 2f       	mov	r24, r18
    28c6:	76 2f       	mov	r23, r22
    28c8:	6a 2f       	mov	r22, r26
    28ca:	11 24       	eor	r1, r1
    28cc:	9f 57       	subi	r25, 0x7F	; 127
    28ce:	50 40       	sbci	r21, 0x00	; 0
    28d0:	8a f0       	brmi	.+34     	; 0x28f4 <__mulsf3_pse+0x84>
    28d2:	e1 f0       	breq	.+56     	; 0x290c <__mulsf3_pse+0x9c>
    28d4:	88 23       	and	r24, r24
    28d6:	4a f0       	brmi	.+18     	; 0x28ea <__mulsf3_pse+0x7a>
    28d8:	ee 0f       	add	r30, r30
    28da:	ff 1f       	adc	r31, r31
    28dc:	bb 1f       	adc	r27, r27
    28de:	66 1f       	adc	r22, r22
    28e0:	77 1f       	adc	r23, r23
    28e2:	88 1f       	adc	r24, r24
    28e4:	91 50       	subi	r25, 0x01	; 1
    28e6:	50 40       	sbci	r21, 0x00	; 0
    28e8:	a9 f7       	brne	.-22     	; 0x28d4 <__mulsf3_pse+0x64>
    28ea:	9e 3f       	cpi	r25, 0xFE	; 254
    28ec:	51 05       	cpc	r21, r1
    28ee:	70 f0       	brcs	.+28     	; 0x290c <__mulsf3_pse+0x9c>
    28f0:	5c cf       	rjmp	.-328    	; 0x27aa <__fp_inf>
    28f2:	a6 cf       	rjmp	.-180    	; 0x2840 <__fp_szero>
    28f4:	5f 3f       	cpi	r21, 0xFF	; 255
    28f6:	ec f3       	brlt	.-6      	; 0x28f2 <__mulsf3_pse+0x82>
    28f8:	98 3e       	cpi	r25, 0xE8	; 232
    28fa:	dc f3       	brlt	.-10     	; 0x28f2 <__mulsf3_pse+0x82>
    28fc:	86 95       	lsr	r24
    28fe:	77 95       	ror	r23
    2900:	67 95       	ror	r22
    2902:	b7 95       	ror	r27
    2904:	f7 95       	ror	r31
    2906:	e7 95       	ror	r30
    2908:	9f 5f       	subi	r25, 0xFF	; 255
    290a:	c1 f7       	brne	.-16     	; 0x28fc <__mulsf3_pse+0x8c>
    290c:	fe 2b       	or	r31, r30
    290e:	88 0f       	add	r24, r24
    2910:	91 1d       	adc	r25, r1
    2912:	96 95       	lsr	r25
    2914:	87 95       	ror	r24
    2916:	97 f9       	bld	r25, 7
    2918:	08 95       	ret

0000291a <pow>:
    291a:	fa 01       	movw	r30, r20
    291c:	ee 0f       	add	r30, r30
    291e:	ff 1f       	adc	r31, r31
    2920:	30 96       	adiw	r30, 0x00	; 0
    2922:	21 05       	cpc	r18, r1
    2924:	31 05       	cpc	r19, r1
    2926:	99 f1       	breq	.+102    	; 0x298e <pow+0x74>
    2928:	61 15       	cp	r22, r1
    292a:	71 05       	cpc	r23, r1
    292c:	61 f4       	brne	.+24     	; 0x2946 <pow+0x2c>
    292e:	80 38       	cpi	r24, 0x80	; 128
    2930:	bf e3       	ldi	r27, 0x3F	; 63
    2932:	9b 07       	cpc	r25, r27
    2934:	49 f1       	breq	.+82     	; 0x2988 <pow+0x6e>
    2936:	68 94       	set
    2938:	90 38       	cpi	r25, 0x80	; 128
    293a:	81 05       	cpc	r24, r1
    293c:	61 f0       	breq	.+24     	; 0x2956 <pow+0x3c>
    293e:	80 38       	cpi	r24, 0x80	; 128
    2940:	bf ef       	ldi	r27, 0xFF	; 255
    2942:	9b 07       	cpc	r25, r27
    2944:	41 f0       	breq	.+16     	; 0x2956 <pow+0x3c>
    2946:	99 23       	and	r25, r25
    2948:	42 f5       	brpl	.+80     	; 0x299a <pow+0x80>
    294a:	ff 3f       	cpi	r31, 0xFF	; 255
    294c:	e1 05       	cpc	r30, r1
    294e:	31 05       	cpc	r19, r1
    2950:	21 05       	cpc	r18, r1
    2952:	11 f1       	breq	.+68     	; 0x2998 <pow+0x7e>
    2954:	e8 94       	clt
    2956:	08 94       	sec
    2958:	e7 95       	ror	r30
    295a:	d9 01       	movw	r26, r18
    295c:	aa 23       	and	r26, r26
    295e:	29 f4       	brne	.+10     	; 0x296a <pow+0x50>
    2960:	ab 2f       	mov	r26, r27
    2962:	be 2f       	mov	r27, r30
    2964:	f8 5f       	subi	r31, 0xF8	; 248
    2966:	d0 f3       	brcs	.-12     	; 0x295c <pow+0x42>
    2968:	10 c0       	rjmp	.+32     	; 0x298a <pow+0x70>
    296a:	ff 5f       	subi	r31, 0xFF	; 255
    296c:	70 f4       	brcc	.+28     	; 0x298a <pow+0x70>
    296e:	a6 95       	lsr	r26
    2970:	e0 f7       	brcc	.-8      	; 0x296a <pow+0x50>
    2972:	f7 39       	cpi	r31, 0x97	; 151
    2974:	50 f0       	brcs	.+20     	; 0x298a <pow+0x70>
    2976:	19 f0       	breq	.+6      	; 0x297e <pow+0x64>
    2978:	ff 3a       	cpi	r31, 0xAF	; 175
    297a:	38 f4       	brcc	.+14     	; 0x298a <pow+0x70>
    297c:	9f 77       	andi	r25, 0x7F	; 127
    297e:	9f 93       	push	r25
    2980:	0c d0       	rcall	.+24     	; 0x299a <pow+0x80>
    2982:	0f 90       	pop	r0
    2984:	07 fc       	sbrc	r0, 7
    2986:	90 58       	subi	r25, 0x80	; 128
    2988:	08 95       	ret
    298a:	3e f0       	brts	.+14     	; 0x299a <pow+0x80>
    298c:	14 cf       	rjmp	.-472    	; 0x27b6 <__fp_nan>
    298e:	60 e0       	ldi	r22, 0x00	; 0
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	80 e8       	ldi	r24, 0x80	; 128
    2994:	9f e3       	ldi	r25, 0x3F	; 63
    2996:	08 95       	ret
    2998:	4f e7       	ldi	r20, 0x7F	; 127
    299a:	9f 77       	andi	r25, 0x7F	; 127
    299c:	5f 93       	push	r21
    299e:	4f 93       	push	r20
    29a0:	3f 93       	push	r19
    29a2:	2f 93       	push	r18
    29a4:	9e d0       	rcall	.+316    	; 0x2ae2 <log>
    29a6:	2f 91       	pop	r18
    29a8:	3f 91       	pop	r19
    29aa:	4f 91       	pop	r20
    29ac:	5f 91       	pop	r21
    29ae:	52 df       	rcall	.-348    	; 0x2854 <__mulsf3>
    29b0:	05 c0       	rjmp	.+10     	; 0x29bc <exp>
    29b2:	19 f4       	brne	.+6      	; 0x29ba <pow+0xa0>
    29b4:	0e f0       	brts	.+2      	; 0x29b8 <pow+0x9e>
    29b6:	f9 ce       	rjmp	.-526    	; 0x27aa <__fp_inf>
    29b8:	42 cf       	rjmp	.-380    	; 0x283e <__fp_zero>
    29ba:	fd ce       	rjmp	.-518    	; 0x27b6 <__fp_nan>

000029bc <exp>:
    29bc:	26 df       	rcall	.-436    	; 0x280a <__fp_splitA>
    29be:	c8 f3       	brcs	.-14     	; 0x29b2 <pow+0x98>
    29c0:	96 38       	cpi	r25, 0x86	; 134
    29c2:	c0 f7       	brcc	.-16     	; 0x29b4 <pow+0x9a>
    29c4:	07 f8       	bld	r0, 7
    29c6:	0f 92       	push	r0
    29c8:	e8 94       	clt
    29ca:	2b e3       	ldi	r18, 0x3B	; 59
    29cc:	3a ea       	ldi	r19, 0xAA	; 170
    29ce:	48 eb       	ldi	r20, 0xB8	; 184
    29d0:	5f e7       	ldi	r21, 0x7F	; 127
    29d2:	4e df       	rcall	.-356    	; 0x2870 <__mulsf3_pse>
    29d4:	0f 92       	push	r0
    29d6:	0f 92       	push	r0
    29d8:	0f 92       	push	r0
    29da:	4d b7       	in	r20, 0x3d	; 61
    29dc:	5e b7       	in	r21, 0x3e	; 62
    29de:	0f 92       	push	r0
    29e0:	c0 d0       	rcall	.+384    	; 0x2b62 <modf>
    29e2:	ea e5       	ldi	r30, 0x5A	; 90
    29e4:	f1 e0       	ldi	r31, 0x01	; 1
    29e6:	16 d0       	rcall	.+44     	; 0x2a14 <__fp_powser>
    29e8:	4f 91       	pop	r20
    29ea:	5f 91       	pop	r21
    29ec:	ef 91       	pop	r30
    29ee:	ff 91       	pop	r31
    29f0:	e5 95       	asr	r30
    29f2:	ee 1f       	adc	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	49 f0       	breq	.+18     	; 0x2a0a <exp+0x4e>
    29f8:	fe 57       	subi	r31, 0x7E	; 126
    29fa:	e0 68       	ori	r30, 0x80	; 128
    29fc:	44 27       	eor	r20, r20
    29fe:	ee 0f       	add	r30, r30
    2a00:	44 1f       	adc	r20, r20
    2a02:	fa 95       	dec	r31
    2a04:	e1 f7       	brne	.-8      	; 0x29fe <exp+0x42>
    2a06:	41 95       	neg	r20
    2a08:	55 0b       	sbc	r21, r21
    2a0a:	32 d0       	rcall	.+100    	; 0x2a70 <ldexp>
    2a0c:	0f 90       	pop	r0
    2a0e:	07 fe       	sbrs	r0, 7
    2a10:	26 c0       	rjmp	.+76     	; 0x2a5e <inverse>
    2a12:	08 95       	ret

00002a14 <__fp_powser>:
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	1f 93       	push	r17
    2a1a:	0f 93       	push	r16
    2a1c:	ff 92       	push	r15
    2a1e:	ef 92       	push	r14
    2a20:	df 92       	push	r13
    2a22:	7b 01       	movw	r14, r22
    2a24:	8c 01       	movw	r16, r24
    2a26:	68 94       	set
    2a28:	05 c0       	rjmp	.+10     	; 0x2a34 <__fp_powser+0x20>
    2a2a:	da 2e       	mov	r13, r26
    2a2c:	ef 01       	movw	r28, r30
    2a2e:	1e df       	rcall	.-452    	; 0x286c <__mulsf3x>
    2a30:	fe 01       	movw	r30, r28
    2a32:	e8 94       	clt
    2a34:	a5 91       	lpm	r26, Z+
    2a36:	25 91       	lpm	r18, Z+
    2a38:	35 91       	lpm	r19, Z+
    2a3a:	45 91       	lpm	r20, Z+
    2a3c:	55 91       	lpm	r21, Z+
    2a3e:	ae f3       	brts	.-22     	; 0x2a2a <__fp_powser+0x16>
    2a40:	ef 01       	movw	r28, r30
    2a42:	62 dd       	rcall	.-1340   	; 0x2508 <__addsf3x>
    2a44:	fe 01       	movw	r30, r28
    2a46:	97 01       	movw	r18, r14
    2a48:	a8 01       	movw	r20, r16
    2a4a:	da 94       	dec	r13
    2a4c:	79 f7       	brne	.-34     	; 0x2a2c <__fp_powser+0x18>
    2a4e:	df 90       	pop	r13
    2a50:	ef 90       	pop	r14
    2a52:	ff 90       	pop	r15
    2a54:	0f 91       	pop	r16
    2a56:	1f 91       	pop	r17
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <inverse>:
    2a5e:	9b 01       	movw	r18, r22
    2a60:	ac 01       	movw	r20, r24
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	70 e0       	ldi	r23, 0x00	; 0
    2a66:	80 e8       	ldi	r24, 0x80	; 128
    2a68:	9f e3       	ldi	r25, 0x3F	; 63
    2a6a:	a5 cd       	rjmp	.-1206   	; 0x25b6 <__divsf3>
    2a6c:	9e ce       	rjmp	.-708    	; 0x27aa <__fp_inf>
    2a6e:	ac c0       	rjmp	.+344    	; 0x2bc8 <__fp_mpack>

00002a70 <ldexp>:
    2a70:	cc de       	rcall	.-616    	; 0x280a <__fp_splitA>
    2a72:	e8 f3       	brcs	.-6      	; 0x2a6e <inverse+0x10>
    2a74:	99 23       	and	r25, r25
    2a76:	d9 f3       	breq	.-10     	; 0x2a6e <inverse+0x10>
    2a78:	94 0f       	add	r25, r20
    2a7a:	51 1d       	adc	r21, r1
    2a7c:	bb f3       	brvs	.-18     	; 0x2a6c <inverse+0xe>
    2a7e:	91 50       	subi	r25, 0x01	; 1
    2a80:	50 40       	sbci	r21, 0x00	; 0
    2a82:	94 f0       	brlt	.+36     	; 0x2aa8 <ldexp+0x38>
    2a84:	59 f0       	breq	.+22     	; 0x2a9c <ldexp+0x2c>
    2a86:	88 23       	and	r24, r24
    2a88:	32 f0       	brmi	.+12     	; 0x2a96 <ldexp+0x26>
    2a8a:	66 0f       	add	r22, r22
    2a8c:	77 1f       	adc	r23, r23
    2a8e:	88 1f       	adc	r24, r24
    2a90:	91 50       	subi	r25, 0x01	; 1
    2a92:	50 40       	sbci	r21, 0x00	; 0
    2a94:	c1 f7       	brne	.-16     	; 0x2a86 <ldexp+0x16>
    2a96:	9e 3f       	cpi	r25, 0xFE	; 254
    2a98:	51 05       	cpc	r21, r1
    2a9a:	44 f7       	brge	.-48     	; 0x2a6c <inverse+0xe>
    2a9c:	88 0f       	add	r24, r24
    2a9e:	91 1d       	adc	r25, r1
    2aa0:	96 95       	lsr	r25
    2aa2:	87 95       	ror	r24
    2aa4:	97 f9       	bld	r25, 7
    2aa6:	08 95       	ret
    2aa8:	5f 3f       	cpi	r21, 0xFF	; 255
    2aaa:	ac f0       	brlt	.+42     	; 0x2ad6 <ldexp+0x66>
    2aac:	98 3e       	cpi	r25, 0xE8	; 232
    2aae:	9c f0       	brlt	.+38     	; 0x2ad6 <ldexp+0x66>
    2ab0:	bb 27       	eor	r27, r27
    2ab2:	86 95       	lsr	r24
    2ab4:	77 95       	ror	r23
    2ab6:	67 95       	ror	r22
    2ab8:	b7 95       	ror	r27
    2aba:	08 f4       	brcc	.+2      	; 0x2abe <ldexp+0x4e>
    2abc:	b1 60       	ori	r27, 0x01	; 1
    2abe:	93 95       	inc	r25
    2ac0:	c1 f7       	brne	.-16     	; 0x2ab2 <ldexp+0x42>
    2ac2:	bb 0f       	add	r27, r27
    2ac4:	58 f7       	brcc	.-42     	; 0x2a9c <ldexp+0x2c>
    2ac6:	11 f4       	brne	.+4      	; 0x2acc <ldexp+0x5c>
    2ac8:	60 ff       	sbrs	r22, 0
    2aca:	e8 cf       	rjmp	.-48     	; 0x2a9c <ldexp+0x2c>
    2acc:	6f 5f       	subi	r22, 0xFF	; 255
    2ace:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad4:	e3 cf       	rjmp	.-58     	; 0x2a9c <ldexp+0x2c>
    2ad6:	b4 ce       	rjmp	.-664    	; 0x2840 <__fp_szero>
    2ad8:	0e f0       	brts	.+2      	; 0x2adc <ldexp+0x6c>
    2ada:	76 c0       	rjmp	.+236    	; 0x2bc8 <__fp_mpack>
    2adc:	6c ce       	rjmp	.-808    	; 0x27b6 <__fp_nan>
    2ade:	68 94       	set
    2ae0:	64 ce       	rjmp	.-824    	; 0x27aa <__fp_inf>

00002ae2 <log>:
    2ae2:	93 de       	rcall	.-730    	; 0x280a <__fp_splitA>
    2ae4:	c8 f3       	brcs	.-14     	; 0x2ad8 <ldexp+0x68>
    2ae6:	99 23       	and	r25, r25
    2ae8:	d1 f3       	breq	.-12     	; 0x2ade <ldexp+0x6e>
    2aea:	c6 f3       	brts	.-16     	; 0x2adc <ldexp+0x6c>
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	1f 93       	push	r17
    2af2:	0f 93       	push	r16
    2af4:	ff 92       	push	r15
    2af6:	c9 2f       	mov	r28, r25
    2af8:	dd 27       	eor	r29, r29
    2afa:	88 23       	and	r24, r24
    2afc:	2a f0       	brmi	.+10     	; 0x2b08 <log+0x26>
    2afe:	21 97       	sbiw	r28, 0x01	; 1
    2b00:	66 0f       	add	r22, r22
    2b02:	77 1f       	adc	r23, r23
    2b04:	88 1f       	adc	r24, r24
    2b06:	da f7       	brpl	.-10     	; 0x2afe <log+0x1c>
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e8       	ldi	r20, 0x80	; 128
    2b0e:	5f eb       	ldi	r21, 0xBF	; 191
    2b10:	9f e3       	ldi	r25, 0x3F	; 63
    2b12:	88 39       	cpi	r24, 0x98	; 152
    2b14:	20 f0       	brcs	.+8      	; 0x2b1e <log+0x3c>
    2b16:	80 3e       	cpi	r24, 0xE0	; 224
    2b18:	30 f0       	brcs	.+12     	; 0x2b26 <log+0x44>
    2b1a:	21 96       	adiw	r28, 0x01	; 1
    2b1c:	8f 77       	andi	r24, 0x7F	; 127
    2b1e:	e3 dc       	rcall	.-1594   	; 0x24e6 <__addsf3>
    2b20:	e2 e8       	ldi	r30, 0x82	; 130
    2b22:	f1 e0       	ldi	r31, 0x01	; 1
    2b24:	03 c0       	rjmp	.+6      	; 0x2b2c <log+0x4a>
    2b26:	df dc       	rcall	.-1602   	; 0x24e6 <__addsf3>
    2b28:	ef ea       	ldi	r30, 0xAF	; 175
    2b2a:	f1 e0       	ldi	r31, 0x01	; 1
    2b2c:	73 df       	rcall	.-282    	; 0x2a14 <__fp_powser>
    2b2e:	8b 01       	movw	r16, r22
    2b30:	be 01       	movw	r22, r28
    2b32:	ec 01       	movw	r28, r24
    2b34:	fb 2e       	mov	r15, r27
    2b36:	6f 57       	subi	r22, 0x7F	; 127
    2b38:	71 09       	sbc	r23, r1
    2b3a:	75 95       	asr	r23
    2b3c:	77 1f       	adc	r23, r23
    2b3e:	88 0b       	sbc	r24, r24
    2b40:	99 0b       	sbc	r25, r25
    2b42:	d4 dd       	rcall	.-1112   	; 0x26ec <__floatsisf>
    2b44:	28 e1       	ldi	r18, 0x18	; 24
    2b46:	32 e7       	ldi	r19, 0x72	; 114
    2b48:	41 e3       	ldi	r20, 0x31	; 49
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	8f de       	rcall	.-738    	; 0x286c <__mulsf3x>
    2b4e:	af 2d       	mov	r26, r15
    2b50:	98 01       	movw	r18, r16
    2b52:	ae 01       	movw	r20, r28
    2b54:	ff 90       	pop	r15
    2b56:	0f 91       	pop	r16
    2b58:	1f 91       	pop	r17
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	d4 dc       	rcall	.-1624   	; 0x2508 <__addsf3x>
    2b60:	3b ce       	rjmp	.-906    	; 0x27d8 <__fp_round>

00002b62 <modf>:
    2b62:	fa 01       	movw	r30, r20
    2b64:	dc 01       	movw	r26, r24
    2b66:	aa 0f       	add	r26, r26
    2b68:	bb 1f       	adc	r27, r27
    2b6a:	9b 01       	movw	r18, r22
    2b6c:	ac 01       	movw	r20, r24
    2b6e:	bf 57       	subi	r27, 0x7F	; 127
    2b70:	28 f4       	brcc	.+10     	; 0x2b7c <modf+0x1a>
    2b72:	22 27       	eor	r18, r18
    2b74:	33 27       	eor	r19, r19
    2b76:	44 27       	eor	r20, r20
    2b78:	50 78       	andi	r21, 0x80	; 128
    2b7a:	1f c0       	rjmp	.+62     	; 0x2bba <modf+0x58>
    2b7c:	b7 51       	subi	r27, 0x17	; 23
    2b7e:	88 f4       	brcc	.+34     	; 0x2ba2 <modf+0x40>
    2b80:	ab 2f       	mov	r26, r27
    2b82:	00 24       	eor	r0, r0
    2b84:	46 95       	lsr	r20
    2b86:	37 95       	ror	r19
    2b88:	27 95       	ror	r18
    2b8a:	01 1c       	adc	r0, r1
    2b8c:	a3 95       	inc	r26
    2b8e:	d2 f3       	brmi	.-12     	; 0x2b84 <modf+0x22>
    2b90:	00 20       	and	r0, r0
    2b92:	69 f0       	breq	.+26     	; 0x2bae <modf+0x4c>
    2b94:	22 0f       	add	r18, r18
    2b96:	33 1f       	adc	r19, r19
    2b98:	44 1f       	adc	r20, r20
    2b9a:	b3 95       	inc	r27
    2b9c:	da f3       	brmi	.-10     	; 0x2b94 <modf+0x32>
    2b9e:	0d d0       	rcall	.+26     	; 0x2bba <modf+0x58>
    2ba0:	a1 cc       	rjmp	.-1726   	; 0x24e4 <__subsf3>
    2ba2:	61 30       	cpi	r22, 0x01	; 1
    2ba4:	71 05       	cpc	r23, r1
    2ba6:	a0 e8       	ldi	r26, 0x80	; 128
    2ba8:	8a 07       	cpc	r24, r26
    2baa:	b9 46       	sbci	r27, 0x69	; 105
    2bac:	30 f4       	brcc	.+12     	; 0x2bba <modf+0x58>
    2bae:	9b 01       	movw	r18, r22
    2bb0:	ac 01       	movw	r20, r24
    2bb2:	66 27       	eor	r22, r22
    2bb4:	77 27       	eor	r23, r23
    2bb6:	88 27       	eor	r24, r24
    2bb8:	90 78       	andi	r25, 0x80	; 128
    2bba:	30 96       	adiw	r30, 0x00	; 0
    2bbc:	21 f0       	breq	.+8      	; 0x2bc6 <modf+0x64>
    2bbe:	20 83       	st	Z, r18
    2bc0:	31 83       	std	Z+1, r19	; 0x01
    2bc2:	42 83       	std	Z+2, r20	; 0x02
    2bc4:	53 83       	std	Z+3, r21	; 0x03
    2bc6:	08 95       	ret

00002bc8 <__fp_mpack>:
    2bc8:	9f 3f       	cpi	r25, 0xFF	; 255
    2bca:	31 f0       	breq	.+12     	; 0x2bd8 <__fp_mpack_finite+0xc>

00002bcc <__fp_mpack_finite>:
    2bcc:	91 50       	subi	r25, 0x01	; 1
    2bce:	20 f4       	brcc	.+8      	; 0x2bd8 <__fp_mpack_finite+0xc>
    2bd0:	87 95       	ror	r24
    2bd2:	77 95       	ror	r23
    2bd4:	67 95       	ror	r22
    2bd6:	b7 95       	ror	r27
    2bd8:	88 0f       	add	r24, r24
    2bda:	91 1d       	adc	r25, r1
    2bdc:	96 95       	lsr	r25
    2bde:	87 95       	ror	r24
    2be0:	97 f9       	bld	r25, 7
    2be2:	08 95       	ret

00002be4 <__divmodhi4>:
    2be4:	97 fb       	bst	r25, 7
    2be6:	07 2e       	mov	r0, r23
    2be8:	16 f4       	brtc	.+4      	; 0x2bee <__divmodhi4+0xa>
    2bea:	00 94       	com	r0
    2bec:	06 d0       	rcall	.+12     	; 0x2bfa <__divmodhi4_neg1>
    2bee:	77 fd       	sbrc	r23, 7
    2bf0:	08 d0       	rcall	.+16     	; 0x2c02 <__divmodhi4_neg2>
    2bf2:	13 d0       	rcall	.+38     	; 0x2c1a <__udivmodhi4>
    2bf4:	07 fc       	sbrc	r0, 7
    2bf6:	05 d0       	rcall	.+10     	; 0x2c02 <__divmodhi4_neg2>
    2bf8:	3e f4       	brtc	.+14     	; 0x2c08 <__divmodhi4_exit>

00002bfa <__divmodhi4_neg1>:
    2bfa:	90 95       	com	r25
    2bfc:	81 95       	neg	r24
    2bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2c00:	08 95       	ret

00002c02 <__divmodhi4_neg2>:
    2c02:	70 95       	com	r23
    2c04:	61 95       	neg	r22
    2c06:	7f 4f       	sbci	r23, 0xFF	; 255

00002c08 <__divmodhi4_exit>:
    2c08:	08 95       	ret

00002c0a <__tablejump2__>:
    2c0a:	ee 0f       	add	r30, r30
    2c0c:	ff 1f       	adc	r31, r31
    2c0e:	88 1f       	adc	r24, r24
    2c10:	8b bf       	out	0x3b, r24	; 59
    2c12:	07 90       	elpm	r0, Z+
    2c14:	f6 91       	elpm	r31, Z
    2c16:	e0 2d       	mov	r30, r0
    2c18:	19 94       	eijmp

00002c1a <__udivmodhi4>:
    2c1a:	aa 1b       	sub	r26, r26
    2c1c:	bb 1b       	sub	r27, r27
    2c1e:	51 e1       	ldi	r21, 0x11	; 17
    2c20:	07 c0       	rjmp	.+14     	; 0x2c30 <__udivmodhi4_ep>

00002c22 <__udivmodhi4_loop>:
    2c22:	aa 1f       	adc	r26, r26
    2c24:	bb 1f       	adc	r27, r27
    2c26:	a6 17       	cp	r26, r22
    2c28:	b7 07       	cpc	r27, r23
    2c2a:	10 f0       	brcs	.+4      	; 0x2c30 <__udivmodhi4_ep>
    2c2c:	a6 1b       	sub	r26, r22
    2c2e:	b7 0b       	sbc	r27, r23

00002c30 <__udivmodhi4_ep>:
    2c30:	88 1f       	adc	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	5a 95       	dec	r21
    2c36:	a9 f7       	brne	.-22     	; 0x2c22 <__udivmodhi4_loop>
    2c38:	80 95       	com	r24
    2c3a:	90 95       	com	r25
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	08 95       	ret

00002c42 <memcpy_P>:
    2c42:	fb 01       	movw	r30, r22
    2c44:	dc 01       	movw	r26, r24
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <memcpy_P+0xa>
    2c48:	05 90       	lpm	r0, Z+
    2c4a:	0d 92       	st	X+, r0
    2c4c:	41 50       	subi	r20, 0x01	; 1
    2c4e:	50 40       	sbci	r21, 0x00	; 0
    2c50:	d8 f7       	brcc	.-10     	; 0x2c48 <memcpy_P+0x6>
    2c52:	08 95       	ret

00002c54 <_exit>:
    2c54:	f8 94       	cli

00002c56 <__stop_program>:
    2c56:	ff cf       	rjmp	.-2      	; 0x2c56 <__stop_program>
