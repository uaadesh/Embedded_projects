
AVRASM ver. 2.1.30  D:\MeitY training\Embedded projects\Basic Lift system\Debug\List\Lift.asm Sun Mar 21 13:01:27 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.29 Evaluation
                 ;(C) Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 2.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0034 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 003f
00002b 0006
00002c 005b
00002d 004f      	.DB  0x3F,0x0,0x6,0x0,0x5B,0x0,0x4F,0x0
00002e 0066
00002f 006d
000030 007d
000031 0007      	.DB  0x66,0x0,0x6D,0x0,0x7D,0x0,0x7,0x0
000032 007f
000033 0067      	.DB  0x7F,0x0,0x67,0x0
                 __RESET:
000034 94f8      	CLI
000035 27ee      	CLR  R30
000036 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000037 e0f1      	LDI  R31,1
000038 bffb      	OUT  GICR,R31
000039 bfeb      	OUT  GICR,R30
00003a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003b e08d      	LDI  R24,(14-2)+1
00003c e0a2      	LDI  R26,2
00003d 27bb      	CLR  R27
                 __CLEAR_REG:
00003e 93ed      	ST   X+,R30
00003f 958a      	DEC  R24
000040 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000041 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000042 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000043 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000044 93ed      	ST   X+,R30
000045 9701      	SBIW R24,1
000046 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000047 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000048 bfed      	OUT  SPL,R30
000049 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004c e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004d 940c 004f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include<mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include<delay.h>
                 ;
                 ;void main()
                 ; 0000 0005 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0006 int z[]={0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x67};
                 ; 0000 0007 int currflr=0;
                 ; 0000 0008 int targflr=0;
                 ; 0000 0009 int flrdiff=0;
                 ; 0000 000A //Target floor display
                 ; 0000 000B PORTA=0b00000000;
00004f 9764      	SBIW R28,20
000050 e184      	LDI  R24,20
                +
000051 e060     +LDI R22 , LOW ( 0 )
000052 e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
000053 e5e4      	LDI  R30,LOW(_0x3*2)
000054 e0f0      	LDI  R31,HIGH(_0x3*2)
000055 d092      	RCALL __INITLOCB
                 ;	z -> Y+0
                 ;	currflr -> R16,R17
                 ;	targflr -> R18,R19
                 ;	flrdiff -> R20,R21
                +
000056 e000     +LDI R16 , LOW ( 0 )
000057 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000058 e020     +LDI R18 , LOW ( 0 )
000059 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00005a e040     +LDI R20 , LOW ( 0 )
00005b e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
00005c e0e0      	LDI  R30,LOW(0)
00005d bbeb      	OUT  0x1B,R30
                 ; 0000 000C DDRA=0b01111111;
00005e e7ef      	LDI  R30,LOW(127)
00005f bbea      	OUT  0x1A,R30
                 ; 0000 000D 
                 ; 0000 000E //Floor buttons and power display
                 ; 0000 000F PORTB=0b00011111;
000060 e1ef      	LDI  R30,LOW(31)
000061 bbe8      	OUT  0x18,R30
                 ; 0000 0010 DDRB=0b01100000;
000062 e6e0      	LDI  R30,LOW(96)
000063 bbe7      	OUT  0x17,R30
                 ; 0000 0011 
                 ; 0000 0012 //floor and door motors
                 ; 0000 0013 PORTC=0b00000000;
000064 e0e0      	LDI  R30,LOW(0)
000065 bbe5      	OUT  0x15,R30
                 ; 0000 0014 DDRC=0b00001111;
000066 e0ef      	LDI  R30,LOW(15)
000067 bbe4      	OUT  0x14,R30
                 ; 0000 0015 
                 ; 0000 0016 //Current floor display
                 ; 0000 0017 PORTD=0b00000000;
000068 e0e0      	LDI  R30,LOW(0)
000069 bbe2      	OUT  0x12,R30
                 ; 0000 0018 DDRD=0b01111111;
00006a e7ef      	LDI  R30,LOW(127)
00006b bbe1      	OUT  0x11,R30
                 ; 0000 0019 
                 ; 0000 001A //Motor clk==up, anticlk==down.
                 ; 0000 001B PORTA=z[0];
00006c 81e8      	LD   R30,Y
00006d bbeb      	OUT  0x1B,R30
                 ; 0000 001C PORTD=z[0];
00006e bbe2      	OUT  0x12,R30
                 ; 0000 001D PORTB.5=1;
00006f 9ac5      	SBI  0x18,5
                 ; 0000 001E while(1)
                 _0x6:
                 ; 0000 001F {
                 ; 0000 0020 if(PINB.0==0)   //Ground floor
000070 99b0      	SBIC 0x16,0
000071 c006      	RJMP _0x9
                 ; 0000 0021 {
                 ; 0000 0022    delay_ms(300);
000072 e2ac      	LDI  R26,LOW(300)
000073 e0b1      	LDI  R27,HIGH(300)
000074 d09e      	RCALL _delay_ms
                 ; 0000 0023    targflr=0;
                +
000075 e020     +LDI R18 , LOW ( 0 )
000076 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0024    PORTA=z[targflr];
000077 d04e      	RCALL SUBOPT_0x0
                 ; 0000 0025 }
                 ; 0000 0026 if(PINB.1==0)   //first floor
                 _0x9:
000078 99b1      	SBIC 0x16,1
000079 c006      	RJMP _0xA
                 ; 0000 0027 {
                 ; 0000 0028    delay_ms(300);
00007a e2ac      	LDI  R26,LOW(300)
00007b e0b1      	LDI  R27,HIGH(300)
00007c d096      	RCALL _delay_ms
                 ; 0000 0029    targflr=1;
                +
00007d e021     +LDI R18 , LOW ( 1 )
00007e e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 002A    PORTA=z[targflr];
00007f d046      	RCALL SUBOPT_0x0
                 ; 0000 002B }
                 ; 0000 002C if(PINB.2==0)   //second floor
                 _0xA:
000080 99b2      	SBIC 0x16,2
000081 c006      	RJMP _0xB
                 ; 0000 002D {
                 ; 0000 002E    delay_ms(300);
000082 e2ac      	LDI  R26,LOW(300)
000083 e0b1      	LDI  R27,HIGH(300)
000084 d08e      	RCALL _delay_ms
                 ; 0000 002F    targflr=2;
                +
000085 e022     +LDI R18 , LOW ( 2 )
000086 e030     +LDI R19 , HIGH ( 2 )
                 	__GETWRN 18,19,2
                 ; 0000 0030    PORTA=z[targflr];
000087 d03e      	RCALL SUBOPT_0x0
                 ; 0000 0031 }
                 ; 0000 0032 if(PINB.3==0)   //third floor
                 _0xB:
000088 99b3      	SBIC 0x16,3
000089 c006      	RJMP _0xC
                 ; 0000 0033 {
                 ; 0000 0034    delay_ms(300);
00008a e2ac      	LDI  R26,LOW(300)
00008b e0b1      	LDI  R27,HIGH(300)
00008c d086      	RCALL _delay_ms
                 ; 0000 0035    targflr=3;
                +
00008d e023     +LDI R18 , LOW ( 3 )
00008e e030     +LDI R19 , HIGH ( 3 )
                 	__GETWRN 18,19,3
                 ; 0000 0036    PORTA=z[targflr];
00008f d036      	RCALL SUBOPT_0x0
                 ; 0000 0037 }
                 ; 0000 0038 if(PINB.4==0)   //start button
                 _0xC:
000090 99b4      	SBIC 0x16,4
000091 c032      	RJMP _0xD
                 ; 0000 0039 {
                 ; 0000 003A    delay_ms(300);
000092 e2ac      	LDI  R26,LOW(300)
000093 e0b1      	LDI  R27,HIGH(300)
000094 d07e      	RCALL _delay_ms
                 ; 0000 003B    flrdiff=targflr-currflr;
000095 01f9      	MOVW R30,R18
000096 1be0      	SUB  R30,R16
000097 0bf1      	SBC  R31,R17
000098 01af      	MOVW R20,R30
                 ; 0000 003C    if(flrdiff>0)
000099 2400      	CLR  R0
00009a 1604      	CP   R0,R20
00009b 0605      	CPC  R0,R21
00009c f45c      	BRGE _0xE
                 ; 0000 003D    {
                 ; 0000 003E       while(flrdiff!=0)
                 _0xF:
00009d 2e04      	MOV  R0,R20
00009e 2a05      	OR   R0,R21
00009f f039      	BREQ _0x11
                 ; 0000 003F       {
                 ; 0000 0040          PORTC.0=1;
0000a0 9aa8      	SBI  0x15,0
                 ; 0000 0041          PORTC.1=0;
0000a1 98a9      	CBI  0x15,1
                 ; 0000 0042          delay_ms(4000);
0000a2 d02c      	RCALL SUBOPT_0x1
                 ; 0000 0043          flrdiff=flrdiff-1;
                 ; 0000 0044          currflr=currflr+1;
                +
0000a3 5f0f     +SUBI R16 , LOW ( - 1 )
0000a4 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0045          PORTD=z[currflr];
0000a5 d02f      	RCALL SUBOPT_0x2
                 ; 0000 0046          //led blink at each floor
                 ; 0000 0047          PORTB.6=1;
                 ; 0000 0048          delay_ms(200);
                 ; 0000 0049          PORTB.6=0;
                 ; 0000 004A       }
0000a6 cff6      	RJMP _0xF
                 _0x11:
                 ; 0000 004B       PORTC.0=0;
0000a7 c00f      	RJMP _0x4F
                 ; 0000 004C       PORTC.1=0;
                 ; 0000 004D       //Door operation=>
                 ; 0000 004E       delay_ms(1000);
                 ; 0000 004F       //open
                 ; 0000 0050       PORTC.2=0;
                 ; 0000 0051       PORTC.3=1;
                 ; 0000 0052       delay_ms(1000);
                 ; 0000 0053       //hold
                 ; 0000 0054       PORTC.2=0;
                 ; 0000 0055       PORTC.3=0;
                 ; 0000 0056       delay_ms(2000);
                 ; 0000 0057       //close
                 ; 0000 0058       PORTC.2=1;
                 ; 0000 0059       PORTC.3=0;
                 ; 0000 005A       delay_ms(1000);
                 ; 0000 005B       PORTC.2=0;
                 ; 0000 005C       PORTC.3=0;
                 ; 0000 005D    }
                 ; 0000 005E    else
                 _0xE:
                 ; 0000 005F    {
                 ; 0000 0060       flrdiff=flrdiff*(-1);
0000a8 01fa      	MOVW R30,R20
0000a9 efaf      	LDI  R26,LOW(65535)
0000aa efbf      	LDI  R27,HIGH(65535)
0000ab d054      	RCALL __MULW12
0000ac 01af      	MOVW R20,R30
                 ; 0000 0061       while(flrdiff!=0)
                 _0x2F:
0000ad 2e04      	MOV  R0,R20
0000ae 2a05      	OR   R0,R21
0000af f039      	BREQ _0x31
                 ; 0000 0062       {
                 ; 0000 0063          PORTC.0=0;
0000b0 98a8      	CBI  0x15,0
                 ; 0000 0064          PORTC.1=1;
0000b1 9aa9      	SBI  0x15,1
                 ; 0000 0065          delay_ms(4000);
0000b2 d01c      	RCALL SUBOPT_0x1
                 ; 0000 0066          flrdiff=flrdiff-1;
                 ; 0000 0067          currflr=currflr-1;
                +
0000b3 5001     +SUBI R16 , LOW ( 1 )
0000b4 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 0068          PORTD=z[currflr];
0000b5 d01f      	RCALL SUBOPT_0x2
                 ; 0000 0069          //led blink at each floor
                 ; 0000 006A          PORTB.6=1;
                 ; 0000 006B          delay_ms(200);
                 ; 0000 006C          PORTB.6=0;
                 ; 0000 006D       }
0000b6 cff6      	RJMP _0x2F
                 _0x31:
                 ; 0000 006E       PORTC.0=0;
                 _0x4F:
0000b7 98a8      	CBI  0x15,0
                 ; 0000 006F       PORTC.1=0;
0000b8 98a9      	CBI  0x15,1
                 ; 0000 0070       //Door operation=>
                 ; 0000 0071       delay_ms(1000);
0000b9 d029      	RCALL SUBOPT_0x3
                 ; 0000 0072       //open
                 ; 0000 0073       PORTC.2=0;
                 ; 0000 0074       PORTC.3=1;
0000ba 9aab      	SBI  0x15,3
                 ; 0000 0075       delay_ms(1000);
0000bb d027      	RCALL SUBOPT_0x3
                 ; 0000 0076       //hold
                 ; 0000 0077       PORTC.2=0;
                 ; 0000 0078       PORTC.3=0;
0000bc 98ab      	CBI  0x15,3
                 ; 0000 0079       delay_ms(2000);
0000bd eda0      	LDI  R26,LOW(2000)
0000be e0b7      	LDI  R27,HIGH(2000)
0000bf d053      	RCALL _delay_ms
                 ; 0000 007A       //close
                 ; 0000 007B       PORTC.2=1;
0000c0 9aaa      	SBI  0x15,2
                 ; 0000 007C       PORTC.3=0;
0000c1 98ab      	CBI  0x15,3
                 ; 0000 007D       delay_ms(1000);
0000c2 d020      	RCALL SUBOPT_0x3
                 ; 0000 007E       PORTC.2=0;
                 ; 0000 007F       PORTC.3=0;
0000c3 98ab      	CBI  0x15,3
                 ; 0000 0080    }
                 ; 0000 0081 }
                 ; 0000 0082 }
                 _0xD:
0000c4 cfab      	RJMP _0x6
                 ; 0000 0083 }
                 _0x4E:
0000c5 cfff      	RJMP _0x4E
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x0:
0000c6 01f9      	MOVW R30,R18
0000c7 01de      	MOVW R26,R28
0000c8 0fee      	LSL  R30
0000c9 1fff      	ROL  R31
0000ca 0fae      	ADD  R26,R30
0000cb 1fbf      	ADC  R27,R31
0000cc 91ec      	LD   R30,X
0000cd bbeb      	OUT  0x1B,R30
0000ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0000cf eaa0      	LDI  R26,LOW(4000)
0000d0 e0bf      	LDI  R27,HIGH(4000)
0000d1 d041      	RCALL _delay_ms
                +
0000d2 5041     +SUBI R20 , LOW ( 1 )
0000d3 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
0000d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x2:
0000d5 01f8      	MOVW R30,R16
0000d6 01de      	MOVW R26,R28
0000d7 0fee      	LSL  R30
0000d8 1fff      	ROL  R31
0000d9 0fae      	ADD  R26,R30
0000da 1fbf      	ADC  R27,R31
0000db 91ec      	LD   R30,X
0000dc bbe2      	OUT  0x12,R30
0000dd 9ac6      	SBI  0x18,6
0000de eca8      	LDI  R26,LOW(200)
0000df e0b0      	LDI  R27,0
0000e0 d032      	RCALL _delay_ms
0000e1 98c6      	CBI  0x18,6
0000e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
0000e3 eea8      	LDI  R26,LOW(1000)
0000e4 e0b3      	LDI  R27,HIGH(1000)
0000e5 d02d      	RCALL _delay_ms
0000e6 98aa      	CBI  0x15,2
0000e7 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __INITLOCB:
                 __INITLOCW:
0000e8 93af      	PUSH R26
0000e9 93bf      	PUSH R27
0000ea 01db      	MOVW R26,R22
0000eb 0fac      	ADD  R26,R28
0000ec 1fbd      	ADC  R27,R29
                 __INITLOC0:
0000ed 9005      	LPM  R0,Z+
0000ee 920d      	ST   X+,R0
0000ef 958a      	DEC  R24
0000f0 f7e1      	BRNE __INITLOC0
0000f1 91bf      	POP  R27
0000f2 91af      	POP  R26
0000f3 9508      	RET
                 
                 __ANEGW1:
0000f4 95f1      	NEG  R31
0000f5 95e1      	NEG  R30
0000f6 40f0      	SBCI R31,0
0000f7 9508      	RET
                 
                 __MULW12U:
0000f8 9ffa      	MUL  R31,R26
0000f9 2df0      	MOV  R31,R0
0000fa 9feb      	MUL  R30,R27
0000fb 0df0      	ADD  R31,R0
0000fc 9fea      	MUL  R30,R26
0000fd 2de0      	MOV  R30,R0
0000fe 0df1      	ADD  R31,R1
0000ff 9508      	RET
                 
                 __MULW12:
000100 d004      	RCALL __CHKSIGNW
000101 dff6      	RCALL __MULW12U
000102 f40e      	BRTC __MULW121
000103 dff0      	RCALL __ANEGW1
                 __MULW121:
000104 9508      	RET
                 
                 __CHKSIGNW:
000105 94e8      	CLT
000106 fff7      	SBRS R31,7
000107 c002      	RJMP __CHKSW1
000108 dfeb      	RCALL __ANEGW1
000109 9468      	SET
                 __CHKSW1:
00010a ffb7      	SBRS R27,7
00010b c006      	RJMP __CHKSW2
00010c 95b1      	NEG  R27
00010d 95a1      	NEG  R26
00010e 40b0      	SBCI R27,0
00010f f800      	BLD  R0,0
000110 9403      	INC  R0
000111 fa00      	BST  R0,0
                 __CHKSW2:
000112 9508      	RET
                 
                 _delay_ms:
000113 9610      	adiw r26,0
000114 f039      	breq __delay_ms1
                 __delay_ms0:
000115 95a8      	wdr
                +
000116 ef84     +LDI R24 , LOW ( 0x1F4 )
000117 e091     +LDI R25 , HIGH ( 0x1F4 )
                +__DELAY_USW_LOOP :
000118 9701     +SBIW R24 , 1
000119 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1F4
00011a 9711      	sbiw r26,1
00011b f7c9      	brne __delay_ms0
                 __delay_ms1:
00011c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  15 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:   4 r18:   7 r19:   5 r20:   8 r21:   5 r22:   2 r23:   1 
r24:   8 r25:   2 r26:  25 r27:  20 r28:   5 r29:   2 r30:  49 r31:  15 
x  :   5 y  :   1 z  :   1 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   5 
adiw  :   1 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   3 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   5 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   1 cpi   :   0 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   1 jmp   :  22 ld    :   3 ldd   :   0 ldi   :  59 
lds   :   0 lpm   :   1 lsl   :   2 lsr   :   0 mov   :   4 movw  :   9 
mul   :   3 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   2 
ori   :   0 out   :  18 pop   :   2 push  :   2 rcall :  26 ret   :  10 
reti  :   0 rjmp  :  12 rol   :   2 ror   :   0 sbc   :   1 sbci  :   5 
sbi   :   6 sbic  :   5 sbis  :   0 sbiw  :   4 sbr   :   0 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   3 std   :   0 sts   :   0 sub   :   1 subi  :   3 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 45 out of 116 (38.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00023a    550     20    570   16384   3.5%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
