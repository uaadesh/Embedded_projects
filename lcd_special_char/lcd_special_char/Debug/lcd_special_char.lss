
lcd_special_char.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000414  00000488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000414  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001392  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d2  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000835  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00002a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e3  00000000  00000000  00002bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ab3  00000000  00000000  000030b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 34       	cpi	r26, 0x40	; 64
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <main>
  9e:	0c 94 08 02 	jmp	0x410	; 0x410 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_port_config>:
 * Logic: Passes 0x80 command to LCD using lcd_wr_command
 * Example Call: lcd_home();
 */
void lcd_home (void)
{
	lcd_wr_command(0x80);								// LCD cursor set to Home position
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	80 6f       	ori	r24, 0xF0	; 240
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	88 7f       	andi	r24, 0xF8	; 248
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	08 95       	ret

000000c0 <lcd_set_4bit>:
  c0:	8f e9       	ldi	r24, 0x9F	; 159
  c2:	9f e0       	ldi	r25, 0x0F	; 15
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_set_4bit+0x4>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_set_4bit+0xa>
  ca:	00 00       	nop
  cc:	28 98       	cbi	0x05, 0	; 5
  ce:	2a 98       	cbi	0x05, 2	; 5
  d0:	80 e3       	ldi	r24, 0x30	; 48
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	29 9a       	sbi	0x05, 1	; 5
  d6:	ef e1       	ldi	r30, 0x1F	; 31
  d8:	fe e4       	ldi	r31, 0x4E	; 78
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_set_4bit+0x1a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_set_4bit+0x20>
  e0:	00 00       	nop
  e2:	29 98       	cbi	0x05, 1	; 5
  e4:	ef e9       	ldi	r30, 0x9F	; 159
  e6:	ff e0       	ldi	r31, 0x0F	; 15
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_set_4bit+0x28>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_set_4bit+0x2e>
  ee:	00 00       	nop
  f0:	28 98       	cbi	0x05, 0	; 5
  f2:	2a 98       	cbi	0x05, 2	; 5
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	29 9a       	sbi	0x05, 1	; 5
  f8:	ef e1       	ldi	r30, 0x1F	; 31
  fa:	fe e4       	ldi	r31, 0x4E	; 78
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_set_4bit+0x3c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_set_4bit+0x42>
 102:	00 00       	nop
 104:	29 98       	cbi	0x05, 1	; 5
 106:	ef e9       	ldi	r30, 0x9F	; 159
 108:	ff e0       	ldi	r31, 0x0F	; 15
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_set_4bit+0x4a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_set_4bit+0x50>
 110:	00 00       	nop
 112:	28 98       	cbi	0x05, 0	; 5
 114:	2a 98       	cbi	0x05, 2	; 5
 116:	8b b9       	out	0x0b, r24	; 11
 118:	29 9a       	sbi	0x05, 1	; 5
 11a:	8f e1       	ldi	r24, 0x1F	; 31
 11c:	9e e4       	ldi	r25, 0x4E	; 78
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_set_4bit+0x5e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_set_4bit+0x64>
 124:	00 00       	nop
 126:	29 98       	cbi	0x05, 1	; 5
 128:	ef e9       	ldi	r30, 0x9F	; 159
 12a:	ff e0       	ldi	r31, 0x0F	; 15
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x6c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_set_4bit+0x72>
 132:	00 00       	nop
 134:	28 98       	cbi	0x05, 0	; 5
 136:	2a 98       	cbi	0x05, 2	; 5
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	29 9a       	sbi	0x05, 1	; 5
 13e:	8f e1       	ldi	r24, 0x1F	; 31
 140:	9e e4       	ldi	r25, 0x4E	; 78
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x82>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x88>
 148:	00 00       	nop
 14a:	29 98       	cbi	0x05, 1	; 5
 14c:	08 95       	ret

0000014e <lcd_wr_command>:
 14e:	9b b1       	in	r25, 0x0b	; 11
 150:	9f 70       	andi	r25, 0x0F	; 15
 152:	9b b9       	out	0x0b, r25	; 11
 154:	9b b1       	in	r25, 0x0b	; 11
 156:	28 2f       	mov	r18, r24
 158:	20 7f       	andi	r18, 0xF0	; 240
 15a:	92 2b       	or	r25, r18
 15c:	9b b9       	out	0x0b, r25	; 11
 15e:	28 98       	cbi	0x05, 0	; 5
 160:	2a 98       	cbi	0x05, 2	; 5
 162:	29 9a       	sbi	0x05, 1	; 5
 164:	ef e1       	ldi	r30, 0x1F	; 31
 166:	fe e4       	ldi	r31, 0x4E	; 78
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_wr_command+0x1a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_wr_command+0x20>
 16e:	00 00       	nop
 170:	29 98       	cbi	0x05, 1	; 5
 172:	9b b1       	in	r25, 0x0b	; 11
 174:	9f 70       	andi	r25, 0x0F	; 15
 176:	9b b9       	out	0x0b, r25	; 11
 178:	9b b1       	in	r25, 0x0b	; 11
 17a:	82 95       	swap	r24
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	89 2b       	or	r24, r25
 180:	8b b9       	out	0x0b, r24	; 11
 182:	28 98       	cbi	0x05, 0	; 5
 184:	2a 98       	cbi	0x05, 2	; 5
 186:	29 9a       	sbi	0x05, 1	; 5
 188:	8f e1       	ldi	r24, 0x1F	; 31
 18a:	9e e4       	ldi	r25, 0x4E	; 78
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_wr_command+0x3e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_wr_command+0x44>
 192:	00 00       	nop
 194:	29 98       	cbi	0x05, 1	; 5
 196:	08 95       	ret

00000198 <lcd_init>:
 198:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_set_4bit>
 19c:	8f e9       	ldi	r24, 0x9F	; 159
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x8>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_init+0xe>
 1a6:	00 00       	nop
 1a8:	88 e2       	ldi	r24, 0x28	; 40
 1aa:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1c6:	08 95       	ret

000001c8 <lcd_cursor>:
 *
 * Example Call: lcd_cursor(2, 3);
 */
void lcd_cursor (char row, char column)
{
	switch (row)
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	71 f0       	breq	.+28     	; 0x1e8 <lcd_cursor+0x20>
 1cc:	18 f4       	brcc	.+6      	; 0x1d4 <lcd_cursor+0xc>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	31 f0       	breq	.+12     	; 0x1de <lcd_cursor+0x16>
 1d2:	08 95       	ret
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	69 f0       	breq	.+26     	; 0x1f2 <lcd_cursor+0x2a>
 1d8:	84 30       	cpi	r24, 0x04	; 4
 1da:	81 f0       	breq	.+32     	; 0x1fc <lcd_cursor+0x34>
 1dc:	08 95       	ret
	{
		case 1: lcd_wr_command (0x80 + column - 1); break;
 1de:	8f e7       	ldi	r24, 0x7F	; 127
 1e0:	86 0f       	add	r24, r22
 1e2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1e6:	08 95       	ret
		case 2: lcd_wr_command (0xC0 + column - 1); break;
 1e8:	8f eb       	ldi	r24, 0xBF	; 191
 1ea:	86 0f       	add	r24, r22
 1ec:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1f0:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 1f2:	83 e9       	ldi	r24, 0x93	; 147
 1f4:	86 0f       	add	r24, r22
 1f6:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1fa:	08 95       	ret
		case 4: lcd_wr_command (0xD4 + column - 1); break;
 1fc:	83 ed       	ldi	r24, 0xD3	; 211
 1fe:	86 0f       	add	r24, r22
 200:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 204:	08 95       	ret

00000206 <lcd_clear>:
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 20c:	08 95       	ret

0000020e <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 20e:	cf 93       	push	r28
 210:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 212:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	8f 70       	andi	r24, 0x0F	; 15
 21a:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= temp;
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	9c 2f       	mov	r25, r28
 220:	90 7f       	andi	r25, 0xF0	; 240
 222:	89 2b       	or	r24, r25
 224:	8b b9       	out	0x0b, r24	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 226:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 228:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 22a:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	8f e1       	ldi	r24, 0x1F	; 31
 22e:	9e e4       	ldi	r25, 0x4E	; 78
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <lcd_wr_char+0x22>
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_wr_char+0x28>
 236:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 238:	29 98       	cbi	0x05, 1	; 5
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
 23a:	8b b1       	in	r24, 0x0b	; 11
 23c:	8f 70       	andi	r24, 0x0F	; 15
 23e:	8b b9       	out	0x0b, r24	; 11
	lcd_data_port_reg |= alpha_num_char;
 240:	8b b1       	in	r24, 0x0b	; 11
 242:	c2 95       	swap	r28
 244:	c0 7f       	andi	r28, 0xF0	; 240
 246:	c8 2b       	or	r28, r24
 248:	cb b9       	out	0x0b, r28	; 11
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 24a:	28 9a       	sbi	0x05, 0	; 5
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 24c:	2a 98       	cbi	0x05, 2	; 5
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 24e:	29 9a       	sbi	0x05, 1	; 5
 250:	8f e1       	ldi	r24, 0x1F	; 31
 252:	9e e4       	ldi	r25, 0x4E	; 78
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_wr_char+0x46>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_wr_char+0x4c>
 25a:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 25c:	29 98       	cbi	0x05, 1	; 5
}
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	d8 2f       	mov	r29, r24
 26c:	c6 2f       	mov	r28, r22
 26e:	fa 01       	movw	r30, r20
	while(*str != '\0')
 270:	40 81       	ld	r20, Z
 272:	44 23       	and	r20, r20
 274:	69 f0       	breq	.+26     	; 0x290 <lcd_string+0x2e>
 276:	8f 01       	movw	r16, r30
 278:	0f 5f       	subi	r16, 0xFF	; 255
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
 27c:	6c 2f       	mov	r22, r28
 27e:	8d 2f       	mov	r24, r29
 280:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_wr_char>
		str++;
		column+=1;
 284:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 286:	f8 01       	movw	r30, r16
 288:	41 91       	ld	r20, Z+
 28a:	8f 01       	movw	r16, r30
 28c:	41 11       	cpse	r20, r1
 28e:	f6 cf       	rjmp	.-20     	; 0x27c <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	08 95       	ret

0000029a <lcd_custom_char>:
* 			  *pattern 		Base address of array where the pattern is stored
*/

//<< NOTE >>: You should not change this function in order to get the required output
void lcd_custom_char (unsigned char loc, unsigned char *pattern)
{
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
	/*
	<< TODO >> :
		Command 0x40 and onwards to force the device to point CGRAM address
	    Write 8 byte for generation of the custom character 
	*/
	if(loc<8){
 2a2:	88 30       	cpi	r24, 0x08	; 8
 2a4:	90 f4       	brcc	.+36     	; 0x2ca <lcd_custom_char+0x30>
 2a6:	8b 01       	movw	r16, r22
		lcd_wr_command(0x40+(loc*8));
 2a8:	88 0f       	add	r24, r24
 2aa:	88 0f       	add	r24, r24
 2ac:	88 0f       	add	r24, r24
 2ae:	80 5c       	subi	r24, 0xC0	; 192
 2b0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 2b4:	e8 01       	movw	r28, r16
 2b6:	08 5f       	subi	r16, 0xF8	; 248
 2b8:	1f 4f       	sbci	r17, 0xFF	; 255
		for(unsigned char i=0;i<8;i++){
			lcd_wr_char(0,0,pattern[i]);
 2ba:	49 91       	ld	r20, Y+
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_wr_char>
		Command 0x40 and onwards to force the device to point CGRAM address
	    Write 8 byte for generation of the custom character 
	*/
	if(loc<8){
		lcd_wr_command(0x40+(loc*8));
		for(unsigned char i=0;i<8;i++){
 2c4:	c0 17       	cp	r28, r16
 2c6:	d1 07       	cpc	r29, r17
 2c8:	c1 f7       	brne	.-16     	; 0x2ba <lcd_custom_char+0x20>
			lcd_wr_char(0,0,pattern[i]);
		}
	}	
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	08 95       	ret

000002d4 <Display_logo>:
* @details    This function displays the pattern "e".<br>
*
*/		
void Display_logo()
{
	lcd_string(1,3,"Display Logo");
 2d4:	48 e2       	ldi	r20, 0x28	; 40
 2d6:	51 e0       	ldi	r21, 0x01	; 1
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 31 01 	call	0x262	; 0x262 <lcd_string>
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	87 ea       	ldi	r24, 0xA7	; 167
 2e4:	91 e6       	ldi	r25, 0x61	; 97
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <Display_logo+0x12>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <Display_logo+0x1c>
 2f0:	00 00       	nop
	_delay_ms(2000);
	lcd_clear();						// Clear the LCD
 2f2:	0e 94 03 01 	call	0x206	; 0x206 <lcd_clear>
	<< TODO >> :
		displays the logo on LCD 
		Use the binary pattern stored in pattern_e array<br> 
*		and pass the base address of array to the lcd_custom_char function.
	*/
	lcd_custom_char(0,pattern_e);
 2f6:	60 e2       	ldi	r22, 0x20	; 32
 2f8:	71 e0       	ldi	r23, 0x01	; 1
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_custom_char>
	lcd_wr_char(2,8,0);
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	68 e0       	ldi	r22, 0x08	; 8
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_wr_char>
 30a:	08 95       	ret

0000030c <Display_sine_wave>:
*		       
* @details    This function displays the sine wave on LCD.<br>
*
*/		
void Display_sine_wave()
{
 30c:	cf 93       	push	r28
	lcd_string(1,3,"Sine Wave");
 30e:	45 e3       	ldi	r20, 0x35	; 53
 310:	51 e0       	ldi	r21, 0x01	; 1
 312:	63 e0       	ldi	r22, 0x03	; 3
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 31 01 	call	0x262	; 0x262 <lcd_string>
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	87 ea       	ldi	r24, 0xA7	; 167
 31e:	91 e6       	ldi	r25, 0x61	; 97
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <Display_sine_wave+0x14>
 328:	00 c0       	rjmp	.+0      	; 0x32a <Display_sine_wave+0x1e>
 32a:	00 00       	nop
	_delay_ms(2000);
	lcd_clear();						// Clear the LCD
 32c:	0e 94 03 01 	call	0x206	; 0x206 <lcd_clear>
	<< TODO >> :
		displays the sine wave on LCD 
		Store the binary patterns for positive and negative cycle of sine wave in an array<br> 
*		and pass the base address of array to the lcd_custom_char function.
	*/
	lcd_custom_char(1,upper_left);
 330:	68 e1       	ldi	r22, 0x18	; 24
 332:	71 e0       	ldi	r23, 0x01	; 1
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_custom_char>
	lcd_custom_char(2,upper_right);
 33a:	60 e1       	ldi	r22, 0x10	; 16
 33c:	71 e0       	ldi	r23, 0x01	; 1
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_custom_char>
	lcd_custom_char(3,lower_left);
 344:	68 e0       	ldi	r22, 0x08	; 8
 346:	71 e0       	ldi	r23, 0x01	; 1
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_custom_char>
	lcd_custom_char(4,lower_right);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	71 e0       	ldi	r23, 0x01	; 1
 352:	84 e0       	ldi	r24, 0x04	; 4
 354:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_custom_char>
	for(unsigned char i=1;i<=16;i++){
 358:	c1 e0       	ldi	r28, 0x01	; 1
		switch(i%4){
 35a:	8c 2f       	mov	r24, r28
 35c:	83 70       	andi	r24, 0x03	; 3
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	89 f0       	breq	.+34     	; 0x384 <Display_sine_wave+0x78>
 362:	28 f0       	brcs	.+10     	; 0x36e <Display_sine_wave+0x62>
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	c9 f0       	breq	.+50     	; 0x39a <Display_sine_wave+0x8e>
 368:	83 30       	cpi	r24, 0x03	; 3
 36a:	11 f1       	breq	.+68     	; 0x3b0 <Display_sine_wave+0xa4>
 36c:	2b c0       	rjmp	.+86     	; 0x3c4 <Display_sine_wave+0xb8>
			case 0:
			lcd_wr_char(1,i,4);
 36e:	44 e0       	ldi	r20, 0x04	; 4
 370:	6c 2f       	mov	r22, r28
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_wr_char>
			lcd_wr_char(2,i,4);
 378:	44 e0       	ldi	r20, 0x04	; 4
 37a:	6c 2f       	mov	r22, r28
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_wr_char>
			break;
 382:	20 c0       	rjmp	.+64     	; 0x3c4 <Display_sine_wave+0xb8>
			case 1:
			lcd_wr_char(1,i,1);
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	6c 2f       	mov	r22, r28
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_wr_char>
			lcd_wr_char(2,i,1);
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	6c 2f       	mov	r22, r28
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_wr_char>
			break;
 398:	15 c0       	rjmp	.+42     	; 0x3c4 <Display_sine_wave+0xb8>
			case 2:
			lcd_wr_char(1,i,2);
 39a:	42 e0       	ldi	r20, 0x02	; 2
 39c:	6c 2f       	mov	r22, r28
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_wr_char>
			lcd_wr_char(2,i,2);
 3a4:	42 e0       	ldi	r20, 0x02	; 2
 3a6:	6c 2f       	mov	r22, r28
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_wr_char>
			break;
 3ae:	0a c0       	rjmp	.+20     	; 0x3c4 <Display_sine_wave+0xb8>
			case 3:
			lcd_wr_char(1,i,3);
 3b0:	43 e0       	ldi	r20, 0x03	; 3
 3b2:	6c 2f       	mov	r22, r28
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_wr_char>
			lcd_wr_char(2,i,3);
 3ba:	43 e0       	ldi	r20, 0x03	; 3
 3bc:	6c 2f       	mov	r22, r28
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_wr_char>
	*/
	lcd_custom_char(1,upper_left);
	lcd_custom_char(2,upper_right);
	lcd_custom_char(3,lower_left);
	lcd_custom_char(4,lower_right);
	for(unsigned char i=1;i<=16;i++){
 3c4:	cf 5f       	subi	r28, 0xFF	; 255
 3c6:	c1 31       	cpi	r28, 0x11	; 17
 3c8:	41 f6       	brne	.-112    	; 0x35a <Display_sine_wave+0x4e>
			lcd_wr_char(1,i,3);
			lcd_wr_char(2,i,3);
			break;
		}
	}
}
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <main>:
 * @details    First Initializes the LCD
 *			   and displays the different patterns on LCD on by one. 
 */
 int main(void)
{
	lcd_port_config();					// Initialize the LCD port
 3ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_port_config>
	lcd_init();							// Initialize the LCD
 3d2:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_init>
	lcd_clear();						// Clear the LCD
 3d6:	0e 94 03 01 	call	0x206	; 0x206 <lcd_clear>
    
	Display_logo();
 3da:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Display_logo>
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	87 ea       	ldi	r24, 0xA7	; 167
 3e2:	91 e6       	ldi	r25, 0x61	; 97
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <main+0x16>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x20>
 3ee:	00 00       	nop
	_delay_ms(2000);
	lcd_clear();						// Clear the LCD
 3f0:	0e 94 03 01 	call	0x206	; 0x206 <lcd_clear>
	Display_sine_wave();
 3f4:	0e 94 86 01 	call	0x30c	; 0x30c <Display_sine_wave>
 3f8:	2f ef       	ldi	r18, 0xFF	; 255
 3fa:	87 ea       	ldi	r24, 0xA7	; 167
 3fc:	91 e6       	ldi	r25, 0x61	; 97
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	90 40       	sbci	r25, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x30>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
	_delay_ms(2000);
	lcd_clear();						// Clear the LCD
 40a:	0e 94 03 01 	call	0x206	; 0x206 <lcd_clear>
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

00000410 <_exit>:
 410:	f8 94       	cli

00000412 <__stop_program>:
 412:	ff cf       	rjmp	.-2      	; 0x412 <__stop_program>
